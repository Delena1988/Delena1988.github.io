<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2020-12</title>
      <link href="/posts/bb24/"/>
      <url>/posts/bb24/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库连接池连接异常com.alibaba.druid.pool.GetConnectionTimeoutException</title>
      <link href="/posts/5c88/"/>
      <url>/posts/5c88/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p><code>Caused by: com.alibaba.druid.pool.GetConnectionTimeoutException: wait millis 45000, active 100, runningSqlCount 2</code></p><a id="more"></a><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><h3 id="1-事务没提交"><a href="#1-事务没提交" class="headerlink" title="1.事务没提交"></a>1.事务没提交</h3><p>开启了事务，但是没有关闭事务，导致连接池一直被占用</p><p>事务管理代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PlatformTransactionManager platformTransactionManager;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> TransactionStatus <span class="title">startTx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TransactionStatus transactionStatus = platformTransactionManager</span><br><span class="line">                .getTransaction(<span class="keyword">new</span> DefaultTransactionDefinition(</span><br><span class="line">                        TransactionDefinition.PROPAGATION_REQUIRES_NEW));</span><br><span class="line">        <span class="keyword">return</span> transactionStatus;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">commitTx</span><span class="params">(TransactionStatus transactionStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(transactionStatus != <span class="keyword">null</span>)&#123;</span><br><span class="line">            platformTransactionManager.commit(transactionStatus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rollbackTx</span><span class="params">(TransactionStatus transactionStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(transactionStatus != <span class="keyword">null</span>)&#123;</span><br><span class="line">            platformTransactionManager.rollback(transactionStatus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>启动事务没提交</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TransactionStatus transactionStatus = <span class="keyword">null</span>;</span><br><span class="line">transactionStatus = startTx();</span><br></pre></td></tr></table></figure><p>应该提交事务，释放连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commitTx(transactionStatus);</span><br></pre></td></tr></table></figure><p>异常回滚事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollbackTx(transactionStatus);</span><br></pre></td></tr></table></figure><h3 id="2-连接没关闭"><a href="#2-连接没关闭" class="headerlink" title="2. 连接没关闭"></a>2. 连接没关闭</h3><p>打开了数据库连接，没有关闭，连接池被占用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">conn = jdbcTemplate.getDataSource().getConnection();</span><br><span class="line"></span><br><span class="line">rs = conn.getMetaData().getTables(<span class="keyword">null</span>, <span class="keyword">null</span>, table, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>应该在完成数据库相关操作后，关闭连接，释放连接池</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (rs != null) &#123;</span><br><span class="line">       rs.close();</span><br><span class="line"> &#125;</span><br><span class="line">  if (conn != null) &#123;</span><br><span class="line">       conn.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Problem </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020销售培训</title>
      <link href="/posts/68d/"/>
      <url>/posts/68d/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      
      
      <categories>
          
          <category> Jh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分析java应用cpu使用率飙升</title>
      <link href="/posts/6748/"/>
      <url>/posts/6748/</url>
      
        <content type="html"><![CDATA[<h1 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a><strong>疑惑</strong></h1><ul><li>一个 while 死循环，会不会引起 CPU 使用率飚升？</li><li>频繁 Young GC 会不会引起 CPU 使用率飚升？</li><li>线程数很高的应用，CPU 使用率一定高么？</li><li>CPU 使用率高的应用，线程数一定高么？</li><li>BLOCKED 状态的线程会不会引起 CPU 使用率飚升？</li><li>分时操作系统 CPU 是耗费 us ？ 还是耗费 sy ？</li></ul><a id="more"></a><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a><strong>思考</strong></h1><p><strong>1、CPU 使用率怎么计算？</strong></p><p>CPU% = 1 - idleTime / sysTime * 100</p><ul><li>idleTime：CPU处于空闲状态的时间</li><li>sysTime：CPU处于用户态和内核台的时间总和</li></ul><p><strong>2、CPU 使用率跟啥有关系？</strong></p><p>常听说计算密集型的程序是比较耗 CPU 使用率的。</p><p>那 JAVA 应用中哪些操作是比较耗 CPU 使用的？</p><p>列举日常程序中常见的耗CPU的操作：</p><ul><li>频繁GC，访问量高时，有可能造成频繁的GC、甚至FGC。当调用量大时，内存分配过快，就会造成GC线程不停的执行，导致CPU飙高</li><li>序列化与反序列化，后文中举了一个真实的案例，程序执行xml解析的时，调用量增大的情况下，导致了CPU被打满</li><li>加密、解密</li><li>正则表达式校验，曾经线上发生一次血案，正则校验将CPU打满。大概原因是：Java 正则表达式使用的引擎实现是 NFA 自动机，这种引擎在进行字符匹配会发生回溯（backtracking）</li><li>线程上下文切换、当启动了很多线程，而这些线程都处于不断的阻塞状态（锁等待、IO等待等）和执行状态的变化过程中。当锁竞争激烈时，很容易出现这种情况</li><li>某些线程在做无阻塞的运算，简单的例子while(true)中不停的做运算，没有任何阻塞。写程序时，如果需要做很久的计算，可以适当将程序sleep下</li></ul><p><strong>3、CPU 与进程、线程有关系么？</strong></p><p>现在分时操作系统是通过循轮方式分配时间片进行进程调度的，如果进程在等待或阻塞，不会造成 CPU 资源使用。线程称为轻进程，共享进程资源，关于线程的调度，CPU 对于线程也是分时调度。而在 Java 中，线程的调用由 JVM 负责，线程的调度一般有两种模式，分时调度和抢占式调度。</p><p><strong>解惑</strong></p><p><strong>1、一个 while 死循环，会不会引起 CPU 使用率飚升？</strong></p><p>会的。</p><p>先不说别的，死循环会调用 CPU 寄存器进行计数，这个操作就会占用 CPU。其次，如果线程一直处于死循环状态，CPU 调用会进行线程切换么？</p><p>死循环不会让出 CPU，除非操作系统时间片到期，但死循环会不断向系统申请时间片，直到系统没有空闲时间做别的事情。</p><p>这个问题在 stackoverflow 也有人提问：why does an infinite loop of the unintended kind increase the CPU use?</p><p>地址：<a href="https://stackoverflow.com/questions/2846165/why-does-an-infinite-loop-of-the-unintended-kind-increase-the-cpu-use" target="_blank" rel="noopener">https://stackoverflow.com/questions/2846165/why-does-an-infinite-loop-of-the-unintended-kind-increase-the-cpu-use</a></p><p><strong>2、频繁 Young GC 会不会引起 CPU 使用率飚升？</strong></p><p>会的。</p><p>Young GC 本身是 JVM 进行垃圾回收的操作，会计算内存和调用寄存器，频繁 Young GC 一定是会占用 CPU。</p><p>之前有个一个案例，for 循环从数据库查询数据集合，二次封装新的数据集合，这时如果量比较大时，内存没有足够的空间存储，那么 JVM 就会 GC 回收那些不再使用的数据，因此量大的时候，就会收到 CPU 使用率报警。</p><p><strong>3、线程数很高的应用，CPU 使用率一定高么？</strong></p><p>不会。</p><p>通过 jstack 查看系统线程状态，查看整个线程数很多，但 Runable 和 Running 状态的线程不多，这时 CPU 使用率不一定会高。</p><p>之前有过一个案例，查看系统线程数 1000+，jstack 分析 900多个线程是 BLOCKED 和 WAITING 状态的，这种线程是不会占用 CPU 的。</p><p>如果线程数很高，其实大多数原因是死锁，大量线程处于 BLOCKED 和 WAITING 状态。</p><p><strong>4、CPU 使用率高的应用，线程数一定高么？</strong></p><p>不会。</p><p>同上，CPU 使用率高的关键因素还是计算密集型操作，一个线程如果有大量计算，也会造成 CPU 使用率高，也是现在为什么一个大数据脚本任务，要大规模集群共同运算才能运行的原因。</p><p><strong>5、BLOCKED 状态的线程会不会引起 CPU 使用率飚升？</strong></p><p>不一定。</p><p>CPU使用率的飙升，更多是因为上下文的切换或者runnable状态线程过多导致。Blocked状态，未必会引起CPU上升。</p><p><strong>6、分时操作系统 CPU us高或者sy高是什么意思？</strong></p><p>通过top命令，可以观察到CPU的us，sy值，示例如下：</p><p><img src="https://www.pianshen.com/images/656/b9a045178b67f683c8f2dba797a481d0.JPEG" alt="这可能是全网分析java应用cpu使用率飙升最全的文章"></p><ul><li>us 用户空间占用CPU百分比，简单来说，us高是因为程序导致的，通过分析线程堆栈，可以很容易的定位到问题线程。</li><li>sy 内核空间占用CPU百分比，sy高的时候，如果是程序问题导致，基本是因为线程上下文切换造成的。</li></ul><h1 id="经验"><a href="#经验" class="headerlink" title="经验"></a><strong>经验</strong></h1><p>平时怎么定位 CPU 使用率高的原因？网上有个教程和方法，下面简述一下分析过程。</p><p>首先发现某台应用 CPU 使用率高，一要看先线程数、JVM、系统 load 等参数，共同作证。二要打印 jstack，通过工具分析线程情况，推荐 fastThread 这个在线的 Thread 分析工具。</p><p>以下是线上发生的真实案例，简要介绍下：</p><p>某日晚，突然收到短信报警，CPU利用率100%。立刻dump该机器jstack，通过 <a href="http://fastthread.io/" target="_blank" rel="noopener">http://fastthread.io/</a> 查看日志如下：</p><p><img src="https://www.pianshen.com/images/909/b433e06f8d2a11b040e0d84e2018d925.JPEG" alt="这可能是全网分析java应用cpu使用率飙升最全的文章"></p><p>进一步查看具体日志：</p><p><img src="https://www.pianshen.com/images/453/4a4795af002747efa2f31fc2b03182f5.JPEG" alt="这可能是全网分析java应用cpu使用率飙升最全的文章"></p><p>通过这段日志，已经定位到了具体CPU被打满的方法，接收MQ之后，MQ消息体为xml，反序列化的时候，造成了CPU飙高。</p>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Problem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下JAVA运行后，CPU使用率100%解决办法</title>
      <link href="/posts/165f/"/>
      <url>/posts/165f/</url>
      
        <content type="html"><![CDATA[<p>新版本项目打包的时候发现电脑特别卡，打开任务管理器发现CPU使用率达到100%，以为是电脑卡了，后来布到另一个电脑上，发现CPU仍然是100%…对不起我的电脑<br>放一下成功解决的步骤~</p><h1 id="1-先下载个Process-Explorer"><a href="#1-先下载个Process-Explorer" class="headerlink" title="1. 先下载个Process Explorer"></a>1. 先下载个Process Explorer</h1><p>这个软件是可以查看进程的CPU占有率，任务管理器只能看到进程的CPU占有率，放个地址：<br><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer</a></p><h1 id="2-打开任务管理器"><a href="#2-打开任务管理器" class="headerlink" title="2. 打开任务管理器"></a>2. 打开任务管理器</h1><p>打开任务管理器，找到java，右键点击【转到详细信息】，或者直接到详细信息里找java，查看java对应的PID。（这是win10下的，win7可以点击【查看】- &gt; 【选择列】然后点击PID）<br><img src="https://www.pianshen.com/images/926/1866f2b5eeca33231f424674d1cfe116.png" alt="在这里插入图片描述"><br><img src="https://www.pianshen.com/images/530/cc234391711911be3d2fca1359e0e922.png" alt="在这里插入图片描述"></p><h1 id="3-管理员打开cmd"><a href="#3-管理员打开cmd" class="headerlink" title="3. 管理员打开cmd"></a>3. 管理员打开cmd</h1><p>输入命令： <strong>jstack [PID] &gt; c:/cdf.log</strong><br>或<br><strong>jstack -1 [PID] &gt; c:/[pid].stack</strong><br>后面是文件名，可以自定义<br><img src="https://www.pianshen.com/images/509/0db2877d0414caf6b61db186b4031785.png" alt="在这里插入图片描述"><br><img src="https://www.pianshen.com/images/735/946183fc6ab010d677a483bb38b46967.png" alt="在这里插入图片描述"><br>C盘文件夹：<br><img src="https://www.pianshen.com/images/939/acfab0617cc3559f8372fba0ea03151b.png" alt="在这里插入图片描述"><br>这个是把java进程的信息导出来到文件里，方便后面操作来定位异常代码。<br>ps: 有的博客的命令是 <strong><em>jstack -1 12580 &gt; +文件</em></strong>，我加上-1后会无法导出或导出文件是0KB，去掉-1就好了。<br><img src="https://www.pianshen.com/images/197/564e3097f670b77d171851b748cc314d.png" alt="在这里插入图片描述"></p><h1 id="4-把下载的Process-Explorer解压并运行"><a href="#4-把下载的Process-Explorer解压并运行" class="headerlink" title="4. 把下载的Process Explorer解压并运行"></a>4. 把下载的Process Explorer解压并运行</h1><p>解压后可以直接运行。运行后找到java，右键点击【Properties…】,然后点击【Threads】<br><img src="https://www.pianshen.com/images/99/cc7b3431bead4dae37d23f9544084fc3.png" alt="在这里插入图片描述"><br><img src="https://www.pianshen.com/images/740/ec8210592588da8984143af9f41502b4.png" alt="在这里插入图片描述"><br>找到CPU使用率高的线程，记住TID，然后打开电脑上的计算机：<br><img src="https://www.pianshen.com/images/224/b1b068fea481025aee3bc65ce3b2f588.png" alt="在这里插入图片描述"><br><img src="https://www.pianshen.com/images/259/9a5bace01a4d00ef4ba1da42e08d1bb3.png" alt="在这里插入图片描述"><br>输入刚刚的线程号：1156<br><img src="https://www.pianshen.com/images/294/1ac6167ea5c7b7fdb7826a6d821b4846.png" alt="在这里插入图片描述"><br>找到他对应的十六进制是：484</p><h1 id="5-打开之前导出的进程文件，输入刚刚转换的十六进制数"><a href="#5-打开之前导出的进程文件，输入刚刚转换的十六进制数" class="headerlink" title="5. 打开之前导出的进程文件，输入刚刚转换的十六进制数"></a>5. 打开之前导出的进程文件，输入刚刚转换的十六进制数</h1><p><img src="https://www.pianshen.com/images/718/4ec6b0c18b2cf74a6b2d8c2712c0635e.png" alt="在这里插入图片描述"><br>可以定位到异常的部分（我的之前改过了，正常应该是定位到哪个文件下的哪一行。。。），然后去把bug改掉就好了~</p>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Problem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下rar unrar的安装</title>
      <link href="/posts/5311/"/>
      <url>/posts/5311/</url>
      
        <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget   http://www.rarlab.com/rar/rarlinux-x64-4.2.0.tar.gz</span><br></pre></td></tr></table></figure><h1 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf rarlinux-x64-4.2.0.tar.gz -C /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure><p>此时，/usr/local/rar下就会有rar命令和unrar命令。可以在/usr/local/bin下创建连接 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/rar/rar /usr/<span class="built_in">local</span>/bin/rar</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/rar/unrar /usr/<span class="built_in">local</span>/bin/unrar</span><br></pre></td></tr></table></figure><h1 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h1><h3 id="rar-命令使用方法"><a href="#rar-命令使用方法" class="headerlink" title="rar 命令使用方法"></a>rar 命令使用方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rar  a  anaconda-ks.cfg.rar    anaconda-ks.cfg</span><br></pre></td></tr></table></figure><h3 id="解压缩命令unrar的使用："><a href="#解压缩命令unrar的使用：" class="headerlink" title="解压缩命令unrar的使用："></a>解压缩命令unrar的使用：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unrar  e  education.rar  /home/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESB医院</title>
      <link href="/posts/ad30/"/>
      <url>/posts/ad30/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> Jh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac网易企业邮箱设置</title>
      <link href="/posts/89d3/"/>
      <url>/posts/89d3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/11/03/DISCAlwgspxfE5v.png" alt="image-20201103105710315"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2020-11</title>
      <link href="/posts/ba64/"/>
      <url>/posts/ba64/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql数据库备份与还原</title>
      <link href="/posts/4e45/"/>
      <url>/posts/4e45/</url>
      
        <content type="html"><![CDATA[<h1 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h1><p>使用 mysqldump 备份数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份所有的数据库</span></span><br><span class="line">mysqldump -u root -p --all-databases &gt; bak.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份指定的数据库db1、db2以及db3</span></span><br><span class="line">mysqldump -u root -p --databases db1 db2 db3 &gt; bak.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份db数据库，当仅备份一个数据库时，--databases可以省略</span></span><br><span class="line"><span class="comment"># 两者之间的差别在于不使用 --databases 选项，则备份输出信息中不会包含CREATE DATABASE或USE语句。不使用 --databases 选项备份的数据文件，在后期进行数据还原操作时，如果该数据库不存在，必须先创建该数据库。</span></span><br><span class="line">mysqldump -u root -p db4 &gt; bak.sql</span><br><span class="line">mysqldump -u root -p --databases db4 &gt; bak.sql</span><br></pre></td></tr></table></figure><h1 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p &lt; bak.sql</span><br><span class="line"></span><br><span class="line">mysql -u root -p db4 &lt; bak.sq1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat打印GC日志</title>
      <link href="/posts/184c/"/>
      <url>/posts/184c/</url>
      
        <content type="html"><![CDATA[<h1 id="指定JVM参数"><a href="#指定JVM参数" class="headerlink" title="指定JVM参数"></a>指定JVM参数</h1><p>Windows路径 <strong>tomcat\bin\catalina.bat</strong></p><p>Linux路径<strong>tomcat\bin\catalina.sh</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set "JAVA_OPTS=%JAVA_OPTS% -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:D:\yunsuifang\GC\gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=D:\yunsuifang\GC\heapdump.dump"</span><br></pre></td></tr></table></figure><p>GC 日志文件路径 以及dump文件路径可自行修改</p>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Elasticsearch</title>
      <link href="/posts/69f2/"/>
      <url>/posts/69f2/</url>
      
        <content type="html"><![CDATA[<h1 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.9.3-x86_64.rpm</span><br><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.9.3-x86_64.rpm.sha512</span><br><span class="line">shasum -a 512 -c elasticsearch-7.9.3-x86_64.rpm.sha512 </span><br><span class="line">sudo rpm --install elasticsearch-7.9.3-x86_64.rpm</span><br></pre></td></tr></table></figure><p>需要先安装wget</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget</span><br></pre></td></tr></table></figure><p>安装目录<strong>/usr/share/elasticsearch</strong></p><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd elasticsearch-&lt;version&gt;</span><br><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure><p> 如果你想把 Elasticsearch 作为一个守护进程在后台运行，那么可以在后面添加参数 <code>-d</code> </p><h3 id="启动报错"><a href="#启动报错" class="headerlink" title="启动报错"></a>启动报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">future versions of Elasticsearch will require Java 11; your Java version from [/usr/local/jdk1.8.0_191/jre] does not meet this requirement</span><br><span class="line">future versions of Elasticsearch will require Java 11; your Java version from [/usr/local/jdk1.8.0_191/jre] does not meet this requirement</span><br><span class="line">[2020-10-26T17:51:37,275][ERROR][o.e.b.ElasticsearchUncaughtExceptionHandler] [localhost.localdomain] uncaught exception in thread [main]</span><br><span class="line">org.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:174) ~[elasticsearch-7.9.3.jar:7.9.3]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:161) ~[elasticsearch-7.9.3.jar:7.9.3]</span><br><span class="line">at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86) ~[elasticsearch-7.9.3.jar:7.9.3]</span><br><span class="line">at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:127) ~[elasticsearch-cli-7.9.3.jar:7.9.3]</span><br><span class="line">at org.elasticsearch.cli.Command.main(Command.java:90) ~[elasticsearch-cli-7.9.3.jar:7.9.3]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:126) ~[elasticsearch-7.9.3.jar:7.9.3]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:92) ~[elasticsearch-7.9.3.jar:7.9.3]</span><br><span class="line">Caused by: java.lang.RuntimeException: can not run elasticsearch as root</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:111) ~[elasticsearch-7.9.3.jar:7.9.3]</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:178) ~[elasticsearch-7.9.3.jar:7.9.3]</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:393) ~[elasticsearch-7.9.3.jar:7.9.3]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:170) ~[elasticsearch-7.9.3.jar:7.9.3]</span><br><span class="line">... 6 more</span><br><span class="line">uncaught exception in thread [main]</span><br><span class="line">java.lang.RuntimeException: can not run elasticsearch as root</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:111)</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:178)</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:393)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:170)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:161)</span><br><span class="line">at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86)</span><br><span class="line">at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:127)</span><br><span class="line">at org.elasticsearch.cli.Command.main(Command.java:90)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:126)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:92)</span><br><span class="line">For complete error details, refer to the log at /var/log/elasticsearch/elasticsearch.log</span><br><span class="line">2020-10-26 09:51:37,598820 UTC [5212] ERROR CLogger.cc@310 Cannot log to named pipe /tmp/elasticsearch-8630107584639609731/controller_log_5047 as it could not be opened for writing</span><br></pre></td></tr></table></figure><h5 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h5><p>　　为了安全不允许使用root用户启动</p><h5 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h5><p>　　es5之后的都不能使用添加启动参数或者修改配置文件等方法启动了，必须要创建用户</p><p>创建用户：elasticsearch.    <code>adduser elasticsearch</code></p><p>创建用户密码，需要输入两次.   <code>passwd elasticsearch</code></p><p>将对应的文件夹权限赋给该用户.    <code>chown -R elasticsearch /usr/share/elasticsearch</code></p><p>切换至elasticsearch用户.   <code>su elasticsearch</code></p><h3 id="切换用户报错"><a href="#切换用户报错" class="headerlink" title="切换用户报错"></a>切换用户报错</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This account is currently not available</span><br></pre></td></tr></table></figure><h5 id="原因：-1"><a href="#原因：-1" class="headerlink" title="原因："></a>原因：</h5><p>​        用户的shell禁止登录</p><h5 id="解决：-1"><a href="#解决：-1" class="headerlink" title="解决："></a>解决：</h5><p>​        用cat看看 elasticsearch`的帐号信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd | grep elasticsearch</span><br></pre></td></tr></table></figure><p>发现它的shell是“/sbin /nologin”，需要改成“/bin/bash”</p><h3 id="再次启动报错"><a href="#再次启动报错" class="headerlink" title="再次启动报错"></a>再次启动报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/log/elasticsearch/elasticsearch_server.json (权限不够)</span><br></pre></td></tr></table></figure><h5 id="解决：-2"><a href="#解决：-2" class="headerlink" title="解决："></a>解决：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown elasticsearch /var/log -R</span><br></pre></td></tr></table></figure><h3 id="再次启动报错-1"><a href="#再次启动报错-1" class="headerlink" title="再次启动报错"></a>再次启动报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">uncaught exception in thread [main]</span><br><span class="line">java.lang.IllegalStateException: failed to obtain node locks, tried [[/var/lib/elasticsearch]] with lock id [0]; maybe these locations are not writable or multiple nodes were started without increasing [node.max_local_storage_nodes] (was [1])?</span><br><span class="line">at org.elasticsearch.env.NodeEnvironment.&lt;init&gt;(NodeEnvironment.java:301)</span><br><span class="line">at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:344)</span><br><span class="line">at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:277)</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap$5.&lt;init&gt;(Bootstrap.java:227)</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:227)</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:393)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:170)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:161)</span><br><span class="line">at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86)</span><br><span class="line">at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:127)</span><br><span class="line">at org.elasticsearch.cli.Command.main(Command.java:90)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:126)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:92)</span><br><span class="line">For complete error details, refer to the log at /var/log/elasticsearch/elasticsearch.log</span><br></pre></td></tr></table></figure><h5 id="原因：-2"><a href="#原因：-2" class="headerlink" title="原因："></a>原因：</h5><p>​        可能是因为之前运行的es还没有正常关闭</p><h5 id="解决：-3"><a href="#解决：-3" class="headerlink" title="解决："></a>解决：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep elastic</span><br><span class="line">kill -9 xxx</span><br></pre></td></tr></table></figure><h3 id="验证是否启动成功"><a href="#验证是否启动成功" class="headerlink" title="验证是否启动成功"></a>验证是否启动成功</h3><p>打开另一个终端，执行以下操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 'http://localhost:9200/?pretty'</span><br></pre></td></tr></table></figure><p>以下响应表示成功，意味着你现在已经启动并运行一个 Elasticsearch 节点了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "name" : "localhost.localdomain",</span><br><span class="line">  "cluster_name" : "elasticsearch",</span><br><span class="line">  "cluster_uuid" : "w_tfyzSiSIy3ArcZ4_MwFw",</span><br><span class="line">  "version" : &#123;</span><br><span class="line">    "number" : "7.9.3",</span><br><span class="line">    "build_flavor" : "default",</span><br><span class="line">    "build_type" : "rpm",</span><br><span class="line">    "build_hash" : "c4138e51121ef06a6404866cddc601906fe5c868",</span><br><span class="line">    "build_date" : "2020-10-16T10:36:16.141335Z",</span><br><span class="line">    "build_snapshot" : false,</span><br><span class="line">    "lucene_version" : "8.6.2",</span><br><span class="line">    "minimum_wire_compatibility_version" : "6.8.0",</span><br><span class="line">    "minimum_index_compatibility_version" : "6.0.0-beta1"</span><br><span class="line">  &#125;,</span><br><span class="line">  "tagline" : "You Know, for Search"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随访表结构说明</title>
      <link href="/posts/37a8/"/>
      <url>/posts/37a8/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>前缀</th><th>模块</th></tr></thead><tbody><tr><td>t_cab_*</td><td>驾驶舱</td></tr><tr><td>t_cdr_*</td><td>cdr数据中心</td></tr><tr><td>t_chronic_*</td><td>慢病</td></tr><tr><td>t_complaints_praise_*</td><td>投诉表扬</td></tr><tr><td>t_crm_*</td><td>患者管理</td></tr><tr><td>t_day_surgery_*</td><td>日间手术</td></tr><tr><td>t_dict_*</td><td>字典</td></tr><tr><td>t_education_*</td><td>宣教</td></tr><tr><td>t_empi_*</td><td>主索引</td></tr><tr><td>t_en_followup_*</td><td>子宫内膜增生</td></tr><tr><td>t_form_auto_fill_*</td><td>表单自动填充</td></tr><tr><td>t_hospital_followup_*</td><td>病区护士随访/客服中心随访</td></tr><tr><td>t_manage_*</td><td>系统管理</td></tr><tr><td>t_patient_*</td><td>患者相关</td></tr><tr><td>t_referral_*</td><td>复诊提醒</td></tr><tr><td>t_repository_*</td><td>知识库</td></tr><tr><td>t_rule_*</td><td>知识库规则</td></tr><tr><td>t_satisfaction_*</td><td>满意度</td></tr><tr><td>t_sl_followup_*</td><td>科室专病</td></tr><tr><td>t_sms_*</td><td>短信</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2020-10</title>
      <link href="/posts/7aa5/"/>
      <url>/posts/7aa5/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>log4j切换成logback</title>
      <link href="/posts/835b/"/>
      <url>/posts/835b/</url>
      
        <content type="html"><![CDATA[<p>Log4j切换成logback</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slf4j-version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">slf4j-version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j-over-slf4j-version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">log4j-over-slf4j-version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logback-version</span>&gt;</span>1.1.7<span class="tag">&lt;/<span class="name">logback-version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j-over-slf4j-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;logback-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;logback-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"$&#123;catalina.home&#125;/logs"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %highlight(%-5level) [%thread] %cyan(%logger&#123;26&#125;) - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按照每天生成日志文件 业务日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"business_log"</span>  <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/business.log.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level [%thread] %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件最大的大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按照每天生成日志文件 业务日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"run_log"</span>  <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/run.log.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level [%thread] %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件最大的大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按照每天生成日志文件 错误日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"error_log"</span>  <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/ex/hug-interview-exception.log.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件最大的大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 慢sql --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"slow_log"</span>  <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/ex/hug-interview-slowlog.log.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件最大的大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"cn.joinhealth.interview.web.root.aspect.ServiceAspect"</span> <span class="attr">level</span>=<span class="string">"error"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"error_log"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.alibaba.druid.filter.stat.StatFilter"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"slow_log"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"business"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"business_log"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"cn.joinhealth.interview"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"run_log"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"cn.joinhealth.interview.*.*.dao"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"run_log"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--myibatis log configure--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.apache.ibatis"</span> <span class="attr">level</span>=<span class="string">"TRACE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.Connection"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.Statement"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.PreparedStatement"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java、log4j、logback </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产检记录</title>
      <link href="/posts/4ae2/"/>
      <url>/posts/4ae2/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>日期</th><th>项目</th><th>注意事项</th></tr></thead><tbody><tr><td>9.11</td><td>NT、早糖</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>下次产检日期：</p><p>挂号科室：妇科/产科？</p><p>产检内容：</p><p>注意事项：是否空腹</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VisualVM远程监控JVM</title>
      <link href="/posts/cdfd/"/>
      <url>/posts/cdfd/</url>
      
        <content type="html"><![CDATA[<p>VisualVM在Java 8中是JDK自带的一个图形化工具，项目主页 <a href="https://visualvm.github.io/index.html" target="_blank" rel="noopener">VisualVM</a>，在后续版本中可能会从JDK移除。</p><p>VisualVM可以监控Java进程的CPU与内存占用情况，可以监控Java进程内的各个线程的执行情况，还可以与MAT工具一样用来分析堆转储快照。</p><h1 id="Mac-VisualVM路径"><a href="#Mac-VisualVM路径" class="headerlink" title="Mac VisualVM路径"></a>Mac VisualVM路径</h1><p><code>/System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands</code></p><h1 id="监控远程Tomcat进程"><a href="#监控远程Tomcat进程" class="headerlink" title="监控远程Tomcat进程"></a>监控远程Tomcat进程</h1><p>监控远程主机上的Tomcat进程，需要在Tomcat的catalina.sh文件中加入参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS=&quot;$JAVA_OPTS -Dcom.sum.management.jmxremote -Dcom.sun.management.jmxremote.port=9004 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.net.preferIPV4Stack=true -Djava.rmi.server.hostname=x.x.x.x&quot;</span><br></pre></td></tr></table></figure><ul><li>-Dcom.sum.management.jmxremote: 启用JMX远程连接</li><li>-Dcom.sun.management.jmxremote.port=9004: 设置JMX连接端口</li><li>-Dcom.sun.management.jmxremote.authenticate: 是否开启用户名密码认证</li><li>-Dcom.sun.management.jmxremote.ssl: 是否使用SSL连接</li><li>-Djava.net.preferIPV4Stack: 优先使用IPV4</li><li>-Djava.rmi.server.hostname: 设置JMX主机IP</li></ul><p>打开VisualVM，文件 -&gt; 添加JMX连接，输入刚才设置的IP和端口号：</p><p><img src="https://i.loli.net/2020/09/08/yEL8rasMIXfge4S.png" alt="image-20200908162617992" style="zoom: 67%;"></p><h1 id="通过jstatd启动RMI服务"><a href="#通过jstatd启动RMI服务" class="headerlink" title="通过jstatd启动RMI服务"></a>通过jstatd启动RMI服务</h1><ol><li>文件路径<strong>$JAVA_HOME/jre/lib/security/java.policy</strong>，在文件末位的<code>};</code> 前添加</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permission java.security.AllPermission;</span><br></pre></td></tr></table></figure><ol start="2"><li>在被监控机器启动</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line">./jstatd -J-Djava.security.policy=all.policy &amp;</span><br></pre></td></tr></table></figure><p>​    启动后会开启注册端口1099和一个随机的连接端口，注册端口也可通过-p参数指定，如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./jstatd -J-Djava.security.policy=all.policy -p 10003 &amp;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>设置防火墙</p><p>除了把1099添加到防火墙规则外，还需要找到另外一个随机端口，也加入到规则中<br>执行<br>netstat -anp | grep *jstatd</p></li><li><p>测试</p><p>启动VisualVM，因为在配置JMX时已经添加过服务器节点，如果配置正确，通常VisualVM会自动检测到jstatd连接并添加节点</p><p>如果没有自动添加，可以检查端口是否能连通并尝试手动添加连接</p></li></ol><p><img src="https://i.loli.net/2020/09/08/lyMPhCRDqsLdAuv.png" alt="image-20200908163214196"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷歌浏览器新版本Chrome 80默认SameSite导致跨域登录状态失效的问题</title>
      <link href="/posts/90d3/"/>
      <url>/posts/90d3/</url>
      
        <content type="html"><![CDATA[<p>大概新年新气象吧，大家复工之后都追求一个“新”，不少用户升级到了Chrome 80，然后发现登入成功之后总是重定向回单点登录的统一登录页，然后头秃的我感觉头上更凉了。</p><h2 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h2><p>生产环境出了问题，肯定得赶紧寻找问题根源啊。（三步走路子）</p><ul><li>第一步，最先以为<code>cookie</code>失效的问题，于是远程用户，发现浏览器<code>cookie</code>设置正常，域名下<code>cookie</code>也有值，<strong>但就是带不过去后台</strong>，于是开始怀疑跨域出了问题。</li><li>第二步，遂检查<code>Nignx</code>配置，<code>CORS</code>配置正常，那就不是后台的问题，应该是浏览器的锅。</li><li>第三步，顺着这条路子，最后发现是Chrome 80版本的一个<a href="https://www.chromestatus.com/feature/5088147346030592" target="_blank" rel="noopener">新特性</a>搞的鬼。</li></ul><blockquote><p>在Chrome 80版本中，Chrome会将没有声明<code>SameSite</code>值的<code>cookie</code>默认设置为<code>SameSite=Lax</code>。只有采用<code>SameSite=None; Secure</code>设置的<code>cookie</code>可以从外部访问，前提是通过安全连接（即<code>HTTPS</code>）访问。</p></blockquote><p><code>SameSite</code>又是个啥？（T︵T，为啥那么多我不知道的东西），哎，慢慢道来。</p><a id="more"></a><h2 id="什么是SameSite"><a href="#什么是SameSite" class="headerlink" title="什么是SameSite"></a>什么是<code>SameSite</code></h2><p><code>SameSite</code>是<code>Cookie</code>中的一个属性，它用来标明这个 <code>cookie</code> 是个“同站 <code>cookie</code>”，“同站 <code>cookie</code>” 只能作为<code>第一方cookie</code>，不能作为<code>第三方cookie</code>，因此可以限制第三方<code>Cookie</code>，解决<code>CSRF</code>的问题。不知道<code>CSRF</code>的看着<a href="https://blog.csdn.net/sinat_36521655/article/details/84189698" target="_blank" rel="noopener">这个</a>。早在Chrome 51中就引入了这一属性，但是不会默认设置，所以相安无事。</p><blockquote><p>第三方Cookie：由当前<code>a.com</code>页面发起的请求的 <code>URL</code> 不一定也是 <code>a.com</code> 上的，可能有 <code>b.com</code> 的，也可能有 <code>c.com</code> 的。我们把发送给 <code>a.com</code> 上的请求叫做第一方请求（<code>first-party request</code>），发送给 <code>b.com</code> 和 <code>c.com</code> 等的请求叫做第三方请求（<code>third-party request</code>），第三方请求和第一方请求一样，都会带上<strong>各自域名下</strong>的 <code>cookie</code>，所以就有了<code>第一方cookie</code>（<code>first-party cookie</code>）和<code>第三方cookie</code>（<code>third-party cookie</code>）的区别。上面提到的 <code>CSRF</code> 攻击，就是利用了第三方 <code>cookie</code>可以携带发送的特点 。</p></blockquote><p>“同站<code>cookie</code>”不是根据同源策略判断，而是PSL（公共后缀列表），子域名可以访问父域名<code>cookie</code>，但父域名无法访问子域名<code>cookie</code>。</p><p><code>SameSite</code>总共有三个值：<code>Strict</code>、<code>Lax</code>、<code>None</code>。以下内容引自<a href="http://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html" target="_blank" rel="noopener">阮一峰博客</a></p><ol><li><code>Strict</code></li></ol><p><code>Strict</code>最为严格，完全禁止第三方 <code>Cookie</code>，跨站点时，任何情况下都不会发送 <code>Cookie</code>。换言之，只有当前网页的 <code>URL</code> 与请求目标一致，才会带上 <code>Cookie</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: CookieName=CookieValue; SameSite=Strict;</span><br></pre></td></tr></table></figure><p>这个规则过于严格，可能造成非常不好的用户体验。比如像本人当前遇到的现象，<code>cookie</code>带不过，等于一直没有登录状态，就会回到登录页。</p><ol start="2"><li><code>Lax</code></li></ol><p><code>Lax</code>规则稍稍放宽，大多数情况也是不发送第三方 <code>Cookie</code>，但是导航到目标网址的 <code>Get</code> 请求除外。Chrome 80之后默认设置为该值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: CookieName=CookieValue; SameSite=Lax;</span><br></pre></td></tr></table></figure><p>导航到目标网址的 <code>GET</code> 请求，只包括三种情况：链接，预加载请求，<code>GET</code> 表单。详见下表。</p><table><thead><tr><th>请求类型</th><th>示例</th><th>正常情况</th><th>Lax</th></tr></thead><tbody><tr><td>链接</td><td><code>&lt;a href=&quot;…&quot;&gt;&lt;/a&gt;</code></td><td>发送 Cookie</td><td>发送 Cookie</td></tr><tr><td>预加载</td><td><code>&lt;link rel=&quot;prerender&quot;  href=&quot;…&quot;/&gt;</code></td><td>发送 Cookie</td><td>发送 Cookie</td></tr><tr><td><code>GET</code> 表单</td><td><code>&lt;form method=&quot;GET&quot;  action=&quot;…&quot;&gt;</code></td><td>发送 Cookie</td><td>发送 Cookie</td></tr><tr><td><code>POST</code> 表单</td><td><code>&lt;form method=&quot;POST&quot;  action=&quot;…&quot;&gt;</code></td><td>发送 Cookie</td><td>不发送</td></tr><tr><td><code>iframe</code></td><td><code>&lt;iframe src=&quot;…&quot;&gt;&lt;/iframe&gt;</code></td><td>发送 Cookie</td><td>不发送</td></tr><tr><td><code>AJAX</code></td><td><code>$.get(&quot;…&quot;)</code></td><td>发送 Cookie</td><td>不发送</td></tr><tr><td><code>Image</code></td><td><code>&lt;img src=&quot;…&quot;&gt;</code></td><td>发送 Cookie</td><td>不发送</td></tr></tbody></table><p>设置了<code>Strict</code>或<code>Lax</code>以后，基本就杜绝了<code>CSRF</code>攻击。当然，前提是用户浏览器支持 <code>SameSite</code>属性。</p><ol start="3"><li><code>None</code></li></ol><p>浏览器会在同站请求、跨站请求下继续发送cookies，不区分大小写。网站可以选择显式关闭 <code>SameSite</code> 属性，将其设为 <code>None</code> ，<strong>同时必须</strong>设置 <code>Secure</code> 属性（表示<code>Cookie</code> 只能通过 <code>HTTPS</code> 协议发送，<code>HTTP</code>协议不会发送），否则无效。</p><p>下面为无效响应头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: widget_session=abc123; SameSite=None</span><br></pre></td></tr></table></figure><p>下面为有效响应头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: widget_session=abc123; SameSite=None; Secure</span><br></pre></td></tr></table></figure><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>本人项目中，采用单点登录，在验证登录状态时存在跨域，即采用<code>JSONP</code>的方式获取<code>JWT</code>等相关信息，然后写入本项目域名下的<code>cookie</code>中，满足<code>Lax</code>属性值表单中的<code>AJAX</code>请求，所以不会发送<code>Cookie</code>。</p><p>准确定位到问题，就好办了。这里想到了两种解决方法：</p><ol><li>显示关闭<code>SameSite</code>属性，按照上述有效响应头设置登录接口的响应头即可（本人目前采取的该方法）。直接配置Nginx也行，最先采用的这种方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line">response.setHeader(name: <span class="string">"Set-Cookie"</span>, value: <span class="string">"_u=xxxx; Path=/Login; SameSite=None; Secure"</span>)</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>最后响应头如下：<br><img src="https://i.loli.net/2020/09/08/fgvMnJ9SHw5EF2z.png" alt="image-20200908094344919"></p><ol start="2"><li>浏览器显式关闭该功能。（不推荐，这个功能还是蛮有用的）</li></ol><ul><li>地址栏输入：<code>chrome://flags/</code></li><li>找到<code>SameSite by default cookies</code>和<code>Cookies without SameSite must be secure</code></li><li>将上面两项设置为 <code>Disable</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Chrome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-09</title>
      <link href="/posts/ec64/"/>
      <url>/posts/ec64/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随访规章制度</title>
      <link href="/posts/7d6c/"/>
      <url>/posts/7d6c/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git统计某人代码行数</title>
      <link href="/posts/2e46/"/>
      <url>/posts/2e46/</url>
      
        <content type="html"><![CDATA[<h3 id="统计某人某个时间段内代码提交行数"><a href="#统计某人某个时间段内代码提交行数" class="headerlink" title="统计某人某个时间段内代码提交行数"></a>统计某人某个时间段内代码提交行数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --format=<span class="string">'%aN'</span> | sort -u | <span class="keyword">while</span> <span class="built_in">read</span> name; <span class="keyword">do</span> <span class="built_in">echo</span> -en <span class="string">"<span class="variable">$name</span>\t"</span>; git <span class="built_in">log</span> --author=<span class="string">"<span class="variable">$name</span>"</span> --since=2020-08-01 --until=2020-08-31 --pretty=tformat: --numstat | awk <span class="string">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc &#125;'</span> -; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx代理后,获取request的ip</title>
      <link href="/posts/57ba/"/>
      <url>/posts/57ba/</url>
      
        <content type="html"><![CDATA[<p>应用程序部署上线,一般都会用nginx之类的来进行反向代理,而不是直接访问tomcat之类的容器.</p><p>这时候如果用平时的获取ip的代码,就只会获取到nginx所在服务器的ip, 就失去了本身的意义.</p><p>今天就来配置下 nginx+tomcat 后,  程序获取ip和 tomcat的访问日志localhost_access_log 获取ip. </p><a id="more"></a><h3 id="1-首先要在nginx中加个配置-即把用户ip保存下来"><a href="#1-首先要在nginx中加个配置-即把用户ip保存下来" class="headerlink" title="1.首先要在nginx中加个配置,即把用户ip保存下来"></a>1.首先要在nginx中加个配置,即把用户ip保存下来</h3><p>在nginx的配置文件中增加 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header X-real-ip           $remote_addr;</span><br></pre></td></tr></table></figure><p>各位置要注意, 可以放在 location / 中, 如果你配置了.do, .action的转发, 那就要放在 .do,.action的配置中</p><p><img src="https://i.loli.net/2020/08/24/fk6gwblcNH1ZuGq.png" alt="image-20200824170648170"></p><h3 id="2-修改程序中获取ip的方法-先取-X-real-ip的值"><a href="#2-修改程序中获取ip的方法-先取-X-real-ip的值" class="headerlink" title="2.修改程序中获取ip的方法,先取 X-real-ip的值"></a>2.修改程序中获取ip的方法,先取 X-real-ip的值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getIpAddr</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">  String ip = request.getHeader(<span class="string">"X-real-ip"</span>);<span class="comment">//先从nginx自定义配置获取</span></span><br><span class="line">  <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">    ip = request.getHeader(<span class="string">"x-forwarded-for"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">    ip = request.getHeader(<span class="string">"Proxy-Client-IP"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">    ip = request.getHeader(<span class="string">"WL-Proxy-Client-IP"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">    ip = request.getRemoteAddr();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-修改tomcat的日志配置-记录访问的来源ip"><a href="#3-修改tomcat的日志配置-记录访问的来源ip" class="headerlink" title="3.修改tomcat的日志配置,记录访问的来源ip"></a>3.修改tomcat的日志配置,记录访问的来源ip</h3><p>在server.xml中,修改AccessLogValve的配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">               prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;</span><br><span class="line">               pattern=&quot;%&#123;yyyy-MM-dd HH:mm:ss&#125;t %&#123;X-real-ip&#125;i &quot;%r&quot; %s %b %&#123;User-Agent&#125;i&quot; /&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>孕妇在选择化妆品时应注意哪些问题？</title>
      <link href="/posts/6264/"/>
      <url>/posts/6264/</url>
      
        <content type="html"><![CDATA[<p>​        孕妇作为一个特殊的群体，在选择化妆品时，除应考虑化妆品对自身的影响外，尤其要保证腹中胎儿的健康，因此，在化妆品的选用方面要格外谨慎。<br>​        根据各类化妆品的不同特点及其对孕妇以及胎儿可能产生的不良影响，孕妇最好避免接触和使用以下几类化妆品：<br>　　（1）染发产品<br>　　染发产品不但会对孕妇产生不良影响，容易致敏，甚至有致癌的风险，而且还有可能导致胎儿畸形。所以，孕妇在妊娠期间不宜染发。<br>　　（2）冷烫精<br>　　烫发所用的冷烫精会影响孕妇体内胎儿的正常生长发育，也会导致孕妇脱发，个别人群可能还会出现过敏反应。<br>　　（3）口红<br>　　口红是由各种油脂蜡类原料、颜料和香精等成分组成，其中的油脂蜡类原料覆盖在口唇表面，极易吸附空气中飞扬的尘埃、细菌和病毒，经过口腔进入体内，此时一旦孕妇的抵抗力下降就会染病。其中的有毒、有害物质以及细菌和病毒还能够通过胎盘对胎儿造成威胁。同时，口红中的颜料也可能会引起胎儿畸形。<br>　　（4）指甲油<br>　　目前市场上销售的指甲油大多是以硝化纤维素作为成膜材料，配以丙酮、乙酸乙酯、乙酸丁酯、苯二甲酸等化学溶剂、增塑剂及各色染料而制成。这些化学物质对人体有一定的毒害作用，日积月累，对胎儿的健康也会产生影响，容易引起孕妇流产及胎儿畸形。<br>　　（5）芳香类产品<br>　　包括香水、精油等，其中散发香气的香料成分有可能会导致孕妇流产。<br>　　（6）美白祛斑类产品<br>　　孕妇在妊娠期间会出现面部色斑加深的现象，一般情况下，这是正常的生理现象而非病理现象，孕妇此时切不可选用美白祛斑产品，否则，不但达不到理想的祛斑效果，还会影响自己和胎儿的健康。有些祛斑霜中含有的铅、汞等重金属，甚至是违法添加的某些激素等有害物质，不但会对孕妇自身健康产生影响，还会影响胎儿的生长发育，甚至有可能出现畸形胎儿的风险。<br>　　（7）脱毛霜<br>　　化学性脱毛霜中的脱毛成分会影响胎儿的生长发育。另外，孕妇在选择化妆品时，应关注化妆品成分表中的成分，避免选用含维甲酸类、激素类成分的化妆品，这两类成分都有可能对胎儿的发育造成不良的影响，甚至会导致胎儿畸形。同时，尽量选择不含或少含香精及防腐剂的产品，以降低对胎儿产生不良影响的风险。一般情况下，孕妇在妊娠期间不宜化妆，以清洁、护肤为主要护理方式，而且目前市面上有专门为孕妇提供的一类化妆品，但都是基础护理类产品，产品质量安全，均可放心选择使用。如果在孕前已经使用一些基础护理化妆品，如洗面奶、化妆水和乳液等，只要符合上述提到的注意事项，也可继续使用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB占用CPU过高问题排查</title>
      <link href="/posts/f8bd/"/>
      <url>/posts/f8bd/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>随访程序无法正常使用，发现服务器CPU占用100%，重启服务后，发现MongoDB占用50%左右，其他服务正常。</p><a id="more"></a><h1 id="Step1-分析数据库正在执行的请求"><a href="#Step1-分析数据库正在执行的请求" class="headerlink" title="Step1: 分析数据库正在执行的请求"></a>Step1: 分析数据库正在执行的请求</h1><p>用户可以通过 Mongo Shell 连接，并执行 <code>db.currentOp()</code> 命令，能看到数据库当前正在执行的操作，如下是该命令的一个输出示例，标识一个正在执行的操作。重点关注几个字段</p><ul><li>client：请求是由哪个客户端发起的？</li><li>opid：操作的opid，有需要的话，可以通过 db.killOp(opid) 直接干掉的操作</li><li>secs_running/microsecs_running： 这个值重点关注，代表请求运行的时间，如果这个值特别大，就得注意了，看看请求是否合理</li><li>query/ns: 这个能看出是对哪个集合正在执行什么操作</li><li>lock*：还有一些跟锁相关的参数，需要了解可以看官网文档，本文不做详细介绍</li></ul><p><a href="https://docs.mongodb.com/manual/reference/method/db.currentOp/" target="_blank" rel="noopener">db.currentOp 文档在这里，多看官网文档</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.currentOp()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/08/07/25KtQP8OVJC74rp.png" alt="25KtQP8OVJC74rp"></p><p>这里先要明确一下，通过 db.currentOp() 查看正在执行的操作，目的到底是什么？</p><p>并不是说我们要将正在执行的操作都列出来，然后通过 <code>killOp</code> 逐个干掉；这一步的目的是要看一下，是否有「意料之外」的耗时请求正在执行。</p><p>比如你的业务平时 CPU 利用率不高，运维管理人员连到数据库执行了一些需要全表扫描的操作，然后突然 CPU 利用率飙高，导致你的业务响应很慢，那么就要重点关注下那些执行时间很长的操作。</p><p>一旦找到罪魁祸首，拿到对应请求的 opid，执行 <code>db.killOp(opid)</code> 将对应的请求干掉。</p><p>如果你的应用一上线，cpu利用率就很高，而且一直持续，通过 <code>db.currentOp</code> 的结果也没发现什么异常请求，可以进入到 Step2 进行更深入的分析。</p><h1 id="Step2：分析数据库慢请求"><a href="#Step2：分析数据库慢请求" class="headerlink" title="Step2：分析数据库慢请求"></a>Step2：分析数据库慢请求</h1><h1 id="开启慢请求日志"><a href="#开启慢请求日志" class="headerlink" title="开启慢请求日志"></a>开启慢请求日志</h1><p>MongoDB 支持 profiling 功能，将请求的执行情况记录到同DB下的 <code>system.profile</code> 集合里，profiling 有3种模式</p><p><a href="https://docs.mongodb.com/manual/tutorial/manage-the-database-profiler/" target="_blank" rel="noopener">profiling 设置文档在这里，多看官网文档</a></p><ul><li>关闭 profiling</li><li>针对所有请求开启 profiling，将所有请求的执行都记录到 <code>system.profile</code> 集合</li><li>针对慢请求 profiling，将超过一定阈值的请求，记录到<code>system.profile</code> 集合</li></ul><p>默认请求下，MongoDB 的 profiling 功能是关闭，生产环境建议开启，慢请求阈值可根据需要定制，如不确定，直接使用默认值100ms。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">operationProfiling：</span><br><span class="line">  mode: slowOp</span><br><span class="line">  slowOpThresholdMs： 100</span><br></pre></td></tr></table></figure><p>基于上述配置，MongoDB 会将超过 100ms 的请求记录到对应DB 的 <code>system.profile</code> 集合里，<code>system.profile</code> 默认是一个最多占用 1MB 空间的 capped collection。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看慢请求记录</span></span><br><span class="line">db.system.profile.find().sort(&#123;$natrual: -1&#125;).limit(10)</span><br></pre></td></tr></table></figure><p>如果在日志中看到关键字<strong>COLLSCAN</strong>，说明该查询在进行全表扫描，通常这就是 CPU 异常飙高的主要原因。</p><p>system.profile 里 docsExamined 的值显示了本次查询的扫描文档数</p><p><a href="https://docs.mongodb.com/manual/reference/database-profiler/" target="_blank" rel="noopener">profiling的结果输出含义在这里，多看官网文档</a></p><h3 id="解决办法-添加索引"><a href="#解决办法-添加索引" class="headerlink" title="解决办法 - 添加索引"></a>解决办法 - 添加索引</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.createIndex(&#123;"title":1&#125;)</span><br></pre></td></tr></table></figure><p>我们也可以在添加索引时增加传入可选参数，例如，在生产环境我们通常不希望索引添加的操作阻塞其他数据库操作，这时就需要务必添加 background 参数：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.createIndex(&#123;"title":1&#125;, &#123;'background', true&#125;)</span><br></pre></td></tr></table></figure><h3 id="CPU杀手1：全表扫描"><a href="#CPU杀手1：全表扫描" class="headerlink" title="CPU杀手1：全表扫描"></a>CPU杀手1：全表扫描</h3><p>全集合（表）扫描 <code>COLLSCAN</code>，当一个查询（或更新、删除）请求需要全表扫描时，是非常耗CPU资源的，所以当你在 <code>system.profile</code> 集合 或者 日志文件发现 <code>COLLSCAN</code> 关键字时，就得注意了，很可能就是这些查询吃掉了你的 CPU 资源；确认一下，如果这种请求比较频繁，最好是针对查询的字段建立索引来优化。</p><p>一个查询扫描了多少文档，可查看 <code>system.profile</code> 里的 <code>docsExamined</code> 的值，该值越大，请求CPU开销越大。</p><p>> 关键字：COLLSCAN、 docsExamined</p><h3 id="CPU杀手2：不合理的索引"><a href="#CPU杀手2：不合理的索引" class="headerlink" title="CPU杀手2：不合理的索引"></a>CPU杀手2：不合理的索引</h3><p>有的时候，请求即使查询走了索引，执行也很慢，通常是因为合理建立不太合理（或者是匹配的结果本身就很多，这样即使走索引，请求开销也不会优化很多）。</p><p>如下所示，假设某个集合的数据，x字段的取值很少（假设只有1、2），而y字段的取值很丰富。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123; x: 1, y: 1 &#125;</span><br><span class="line">&#123; x: 1, y: 2 &#125;</span><br><span class="line">&#123; x: 1, y: 3 &#125;</span><br><span class="line">......</span><br><span class="line">&#123; x: 1, y: 100000&#125; </span><br><span class="line">&#123; x: 2, y: 1 &#125;</span><br><span class="line">&#123; x: 2, y: 2 &#125;</span><br><span class="line">&#123; x: 2, y: 3 &#125;</span><br><span class="line">......</span><br><span class="line">&#123; x: 1, y: 100000&#125;</span><br></pre></td></tr></table></figure><p>要服务 <code>{x: 1: y: 2}</code> 这样的查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.createIndex( &#123;x: 1&#125; )         效果不好，因为x相同取值太多</span><br><span class="line">db.createIndex( &#123;x: 1, y: 1&#125; )   效果不好，因为x相同取值太多</span><br><span class="line">db.createIndex( &#123;y: 1 &#125; )        效果好，因为y相同取值很少</span><br><span class="line">db.createIndex( &#123;y: 1, x: 1 &#125; )  效果好，因为y相同取值少</span><br></pre></td></tr></table></figure><p>至于{y: 1} 与 {y: 1, x: 1} 的区别，可参考<a href="https://yq.aliyun.com/articles/33726" target="_blank" rel="noopener">MongoDB索引原理</a> 及 <a href="https://docs.mongodb.com/manual/core/index-compound/" target="_blank" rel="noopener">复合索引官方文档</a> 自行理解。</p><p>一个走索引的查询，扫描了多少条索引，可查看 <code>system.profile</code> 里的 <code>keysExamined</code> 字段，该值越大，CPU 开销越大。</p><p>>关键字：IXSCAN、keysExamined</p><h3 id="CPU杀手3：大量数据排序"><a href="#CPU杀手3：大量数据排序" class="headerlink" title="CPU杀手3：大量数据排序"></a>CPU杀手3：大量数据排序</h3><p>当查询请求里包含排序的时候，如果排序无法通过索引满足，MongoDB 会在内存李结果进行排序，而排序这个动作本身是非常耗 CPU 资源的，优化的方法仍然是建立索引，对经常需要排序的字段，建立索引。</p><p>当你在 <code>system.profile</code> 集合 或者 日志文件发现 <code>SORT</code> 关键字时，就可以考虑通过索引来优化排序。当请求包含排序阶段时， <code>system.profile</code> 里的 <code>hasSortStage</code> 字段会为 true。</p><p>> 关键字：SORT、hasSortStage</p><p>其他还有诸如建索引，aggregationv等操作也可能非常耗 CPU 资源，但本质上也是上述几种场景；建索引需要全表扫描，而vaggeregation 也是遍历、查询、更新、排序等动作的组合。</p><h1 id="Step3-服务能力评估"><a href="#Step3-服务能力评估" class="headerlink" title="Step3: 服务能力评估"></a>Step3: 服务能力评估</h1><p>经过上述2步，你发现整个数据库的查询非常合理，所有的请求都是高效的走了索引，基本没有优化的空间了，那么很可能是你机器的服务能力已经达到上限了，应该升级配置了（或者通过 sharding 扩展）。</p><p>当然最好的情况时，提前对 MongoDB 进行测试，了解在你的场景下，对应的服务能力上限，以便及时扩容、升级，而不是到 CPU 资源用满，业务已经完全撑不住的时候才去做评估。</p>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-08</title>
      <link href="/posts/2ca5/"/>
      <url>/posts/2ca5/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring的multipartResolver和java后端获取的MultipartHttpServletRequest方法对比</title>
      <link href="/posts/4759/"/>
      <url>/posts/4759/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>首先先给A组提供了上传接口，<strong>并没有在spring的配置文件进行multipartResolver的配置</strong>，后台<strong>Controller</strong>的java的获取为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MultipartResolver resolver = <span class="keyword">new</span> CommonsMultipartResolver(request.getSession().getServletContext());</span><br><span class="line">MultipartHttpServletRequest multipartRequest = resolver.resolveMultipart(request);</span><br><span class="line">MultipartFile file = multipartRequest.getFile(<span class="string">"file"</span>);</span><br><span class="line">String a1 = multipartRequest.getParameter(<span class="string">"a1"</span>);</span><br></pre></td></tr></table></figure><p><strong>将request请求的上下文转换为MultipartResolver，然后转换为MultipartHttpServletRequest请求，通过multi请求就可以获取对应的file文件信息，这样的方法没有问题，后台能获取到相应的参数；</strong></p><p>稍后组里另一个同事也用到上传，基于网上查的资料，认为应该把配置文件给加上去了，于是问题出来了，也造成了我记录该博客的原因：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">        &lt;!-- 设定默认编码 --&gt;</span><br><span class="line">        &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!-- 设定文件上传的最大值5MB，5*1024*1024 --&gt;</span><br><span class="line">        &lt;property name=&quot;maxUploadSize&quot; value=&quot;20971520&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>进行该配置后，我在后台的该方法获取file为空造成了上传错误</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>在spring-config配置了<code>&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</code> 之后，后台的获取有两种方法：</p><ol><li><p>指定@RequestParam MultipartFile file 例如：<code>public Map&lt;String, Object&gt; logsUpload(@RequestParam MultipartFile file,@RequestParam(value=&quot;key&quot;) String key)</code>参数；</p></li><li><p>将request转化为<code>MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest)(request);</code></p></li></ol><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>使用spring的CommosMultipartResolver 配置MultipartResolver 用于文件上传，DispatcherServlet 将调用 MultipartResolver 的 isMultipart(request) 方法检查当前 Web 请求是否为 multipart类型。如果是，DispatcherServlet 将调用 MultipartResolver 的 resolveMultipart(request) 方法，对原始 request 进行装饰，并返回一个 MultipartHttpServletRequest 供后继处理流程使用(最初的 HttpServletRequest 被偷梁换柱成了 MultipartHttpServletRequest)，否则，直接返回最初的 HttpServletRequest。</p>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Problem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea调试技巧</title>
      <link href="/posts/5c17/"/>
      <url>/posts/5c17/</url>
      
        <content type="html"><![CDATA[<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><h3 id="F8"><a href="#F8" class="headerlink" title="F8"></a>F8</h3><p>进入下一步，如果当前行断点是一个方法，则不进入当前方法体内，跳到下一条执行语句。</p><h3 id="F7"><a href="#F7" class="headerlink" title="F7"></a>F7</h3><p>进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则会进入该内嵌的方法中 。</p><h3 id="Shift-F8"><a href="#Shift-F8" class="headerlink" title="Shift + F8"></a>Shift + F8</h3><p>跳出该方法，跳回原来地方。</p><h3 id="F9"><a href="#F9" class="headerlink" title="F9"></a>F9</h3><p>执行到下一个断电</p><a id="more"></a><h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><h3 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h3><p>循环中经常用到这个技巧，比如：遍历1个大[List]的过程中，想让断点停在某个特定值。</p><p><img src="https://i.loli.net/2020/07/16/NjevkbVCdGWUafX.jpg" alt="NjevkbVCdGWUafX"></p><p>参考上图，在断点的位置，右击断点旁边的小红点，会出来一个界面，在Condition这里填入断点条件即可，这样调试时，就会自动停在i=10的位置</p><p><img src="https://i.loli.net/2020/07/16/7mASvtFnoZWxCPe.jpg" alt="7mASvtFnoZWxCPe"></p><h3 id="回到”上一步”"><a href="#回到”上一步”" class="headerlink" title="回到”上一步”"></a>回到”上一步”</h3><p>该技巧最适合特别复杂的方法套方法的场景，好不容易跑起来，一不小心手一抖，断点过去了，想回过头看看刚才的变量值，如果不知道该技巧，只能再跑一遍。</p><p><img src="https://i.loli.net/2020/07/16/pV95rHGoZQRFSez.jpg" alt="pV95rHGoZQRFSez"></p><p>参考上图，method1方法调用method2，当前断点的位置j=100，点击上图红色箭头位置的Drop Frame图标后，时间穿越了</p><p><img src="https://i.loli.net/2020/07/16/cAXmbhy9P1DIwz4.jpg" alt="cAXmbhy9P1DIwz4"></p><p>回到了method1刚开始调用的时候，变量i变成了99，没毛病吧，老铁们，是不是很6 :)</p><p><strong>[注：好奇心是人类进步的阶梯，如果想知道为啥这个功能叫Drop Frame，而不是类似Back To Previous 之类的，可以去翻翻JVM的书，JVM内部以栈帧为单位保存线程的运行状态，drop frame即扔掉当前运行的栈帧，这样当前“指针”的位置，就自然到了上一帧的位置。]</strong></p><h3 id="多线程调试"><a href="#多线程调试" class="headerlink" title="多线程调试"></a>多线程调试</h3><p>多线程同时运行时，谁先执行，谁后执行，完全是看CPU心情的，无法控制先后，运行时可能没什么问题，但是调试时就比较麻烦了，最明显的就是断点乱跳，一会儿停这个线程，一会儿停在另一个线程</p><p><img src="https://i.loli.net/2020/07/16/NrZpgI76YFb18t9.jpg" alt="NrZpgI76YFb18t9"></p>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git push 报错error: remote unpack failed: unpack-objects abnormal exit</title>
      <link href="/posts/493e/"/>
      <url>/posts/493e/</url>
      
        <content type="html"><![CDATA[<p>远程仓库权限问题，进入到仓库目录控制台输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git XXXX.git</span><br></pre></td></tr></table></figure><p>问题即可解决</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab服务端文件损坏</title>
      <link href="/posts/b13f/"/>
      <url>/posts/b13f/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><pre><code>前一天晚上停电导致Git服务器关闭，停电的时候有push代码，导致服务器文件损坏。第二天push代码的时候提示**push mater to origin/master was rejected by remote**。查看控制台，显示</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">remote: error: object file ./objects/71/7d869c6b441db44debf43f794bbe75a62747bd is empty        </span><br><span class="line">remote: fatal: loose object 717d869c6b441db44debf43f794bbe75a62747bd (stored <span class="keyword">in</span> ./objects/71/7d869c6b441db44debf43f794bbe75a62747bd) is corrupt</span><br></pre></td></tr></table></figure><h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>由于网络波动，使用的是gitLab HTTP协议来提交的代码，在提交代码时会发生提交的文件在服务端损坏的情况，这个时候客户端应为这个文件损坏而无法pull代码</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol><li><p><strong>进入服务器跟目录（这一步很重要）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br></pre></td></tr></table></figure></li><li><p><strong>查出问题项目的仓库目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里举例为test.git，在知道目录的情况下这一步可以省略</span></span><br><span class="line">find -name hug_interview.git</span><br></pre></td></tr></table></figure></li><li><p><strong>修改gitlab目录下git-data的权限</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 git-data/（默认情况下这个是没有权限可写）</span><br></pre></td></tr></table></figure></li><li><p><strong>进入仓库目录报错的文件对应的文件夹</strong></p><p>在git目录下找到objects文件并进入(git提交的文件都会以一个hash值为名字的文件存储在objects目录下)</p></li><li><p><strong>文件替换</strong></p><p>找到最后提交代码的开发人员本地仓库找到对应的损坏的文件上传至服务器对应的覆盖文件即可，这里报错的文件目录为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./objects/71/7d869c6b441db44debf43f794bbe75a62747bd</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-07</title>
      <link href="/posts/28e5/"/>
      <url>/posts/28e5/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 把数字翻译成字符串</title>
      <link href="/posts/2eca/"/>
      <url>/posts/2eca/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 12258</span><br><span class="line">输出: 5</span><br><span class="line">解释: 12258有5种不同的翻译，分别是&quot;bccfi&quot;, &quot;bwfi&quot;, &quot;bczi&quot;, &quot;mcfi&quot;和&quot;mzi&quot;</span><br></pre></td></tr></table></figure><p>提示：</p><p><strong>0 &lt;= num &lt; 231</strong></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>根据题意，可按照下图的思路，总结出 “递推公式” （即转移方程）。<br>因此，此题可用动态规划解决，以下按照流程解题。</p><p><img src="https://i.loli.net/2020/06/10/XvrQb5t9PlkSA74.png" alt="XvrQb5t9PlkSA74"></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-06</title>
      <link href="/posts/e824/"/>
      <url>/posts/e824/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信订阅号、服务号区别</title>
      <link href="/posts/256b/"/>
      <url>/posts/256b/</url>
      
        <content type="html"><![CDATA[<h1 id="订阅号、服务号区别"><a href="#订阅号、服务号区别" class="headerlink" title="订阅号、服务号区别"></a>订阅号、服务号区别</h1><table><thead><tr><th></th><th>订阅号</th><th>服务号</th></tr></thead><tbody><tr><td>群发消息</td><td>1天只能群发1条消息</td><td>1个月内可发送4条群发消息</td></tr><tr><td>消息提示音</td><td>没有提示音的，在微信会话列表会有新消息提示（“红点”标志）</td><td>会收到提示音</td></tr><tr><td>模版消息</td><td>不支持</td><td>支持</td></tr><tr><td>一对一发送</td><td>粉丝给公众号发送消息，48小时以内是可以在消息对话中进行实时内容回复</td></tr></tbody></table><h1 id="随访消息推送使用场景"><a href="#随访消息推送使用场景" class="headerlink" title="随访消息推送使用场景"></a>随访消息推送使用场景</h1><p>不同的业务场景给患者推送表单、宣教、通知等。</p><p>每一次发送会生成一个唯一的端链接，所以要用模版消息推送功能实现。</p><h1 id="必须使用服务号的原因"><a href="#必须使用服务号的原因" class="headerlink" title="必须使用服务号的原因"></a>必须使用服务号的原因</h1><ol><li><p>服务号推送消息会有提示音，订阅号没有</p></li><li><p>订阅号1天只能主动给粉丝群发一条消息，无法给不同粉丝发送不同内容</p></li><li><p>订阅号客服回复功能只能给48小时内主动发送消息的粉丝回复</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Excel数据透视表</title>
      <link href="/posts/9696/"/>
      <url>/posts/9696/</url>
      
        <content type="html"><![CDATA[<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><p>将excel某一区域内的数据进行统计汇总分析</p><a id="more"></a><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><ol><li><p>选中要统计的数据</p></li><li><p>插入–&gt;数据透视表</p></li></ol><p><img src="https://i.loli.net/2020/05/20/jlDouEIRUg7fxZF.png" alt="jlDouEIRUg7fxZF"></p><p><img src="https://i.loli.net/2020/05/20/8MDuindbGjtVB6T.png" alt="8MDuindbGjtVB6T"></p>]]></content>
      
      
      <categories>
          
          <category> Excel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kibana可视化视图</title>
      <link href="/posts/b4f6/"/>
      <url>/posts/b4f6/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+mbCE+ly5uL1wiVt3WvItMZ2S4Y4ZHQfG7HjMl9soQ0Q274g4WSYX2XzWk74OvYYKxvF8Bd6loc9WgATuvYkfszsbDzJppRXTXfLwB3cp3ohqOqY2hMP94iDruIC+CG74dsDxJpImuf/bjqATJKQjqO1OL0w6R7huSngu82p4DKLNv43lnUu30oIZFrfTXd2x+cZqiRQUOZXn3O53XwsvOpf/IriCMO7prC4i8a0VLnII2irNmUAymC45PbYkBC+WAJMwfsWfwZfuOoKWq3N5zjZjfmTvVE93qiV6/4G0SMkqarIIpla9wI0eW1oEzOjtS3FqK86rAw7F4tz8hHy88XV6kRhjOSv+kkTw645Qcs02xsKdRgH2maj3vQ1lcsKOwjMwb0Q6am0u9W9Wd5xKiHfRNe44lKOKW6jVdDQPkgqNYRKTg1+l98jOLnndUJrn3+fFUs5XoLxj3OOKW42ek6enkRbhW4NcG0jJ9c72Hfdd92BmKfEpMRlCcE0d/IMkIrnewgDwmq+fJ0iuOZYvF1u3mNN5ohUolL5lDOIWYN9Zx50ea4mweX9/ClmcMt8NFH+GOtt9ph+o8Klui/Yl6TIOY6Y43dkwF/ZYGZjw9iEUZa+BATgQXdaVkb9E2CG7GBpiw8kUWbU+KTan8SyVYRKAQtvP2P29ji5Yh71zbLsB6nmcyi7ONt3dp6OytR1sG3Q/CSLum9IssL/hiZ3yNFuAZUlTkgDdFl5kN/v5ToTGD6NMsNopPuOxv83D9pFJCQowwexAJER3qz4/1B88YzbBNVH8sxyLQkp6Mq4bseqBQ0en7NX/16Sg7Z+KGW6Nh4gpLYd98/0NLuFYkfBiplUx8rEk4AXbHu4wjFgm+okuMpovv8/oMdpJF9idJD0NfEJuwEqggzwBT3Upd+1layAXo6yj3ZYXIzj16LV1yFYmXmSZl/3TuXzEn7zztVgM5hNM8l86p9FlSqMTPedoDeYxAb2v1BNuxR/og2m34wHqddNx8crU/DBNaE1GtUDWZ05Z4820hvCvAGLZOn9ZnG/1fPO9K6ci3Vr3HRiIjhRr+HXpgz0yzXAkJL/9fIDTezJq6Et+Twod6PNmDz6noW71nIEL1M3UF29K1EhdCWupXW4GUofuctW7YGZwDguniTF40vEiPMfi5md06V8/T/zd+C5rNmZ/8tcl0vmmKxQX06p1F/j86ZpOaqb/odwFXl4Y5lDWGTQaOMiwLUYiEcmmoKSFDhBkoD82EhBVcBywtNGFqJLojrJok2V4XR50RqpPZl4IKcOhC8y2FduikErgrct+1/a5TF896SkqXbT+5fO7I1bXu+QvVs+vqYd36tJK4kVZjc6fGiNxNjJUD/WpvjjllwRk+xw5NBL4c7abBJocFtF2G/mEbuIvWs8aMnT3HUmeAbYR+mSDlwytUapgJ4zekZo4l62DwIGbjXy0flW/+kT/LmaP3nt9/6B/+J8eBphSnghcKvEaajFIySKugyKWeKB1sD1+GKFJhjG6ewbmNE/dGB35eJSmMMTfXMmUsApSFZgsnbvqNGQzMLhjoCP0FOaG5QPqmG0bit5W45XD55lfLeg9MWPMj/aHx++rE9AQwZID4uUXiRZgjDUfUbs3ohoumkd4gnbIb/U209wkUaFopu8lf+qMs/QTnhEbSqUAdQQ== </div>]]></content>
      
      
      <categories>
          
          <category> Jh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat启动闪退Out of Memory Error</title>
      <link href="/posts/4d6f/"/>
      <url>/posts/4d6f/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>Tomcat启动到一半闪退，bin目录下生成了hs_err_pidXXXX.log文件</p><p>日志内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class="line"># Native memory allocation (malloc) failed to allocate 1660496 bytes for Chunk::new</span><br><span class="line"># Possible reasons:</span><br><span class="line">#   The system is out of physical RAM or swap space</span><br><span class="line">#   The process is running with CompressedOops enabled, and the Java Heap may be blocking the growth of the native heap</span><br><span class="line"># Possible solutions:</span><br><span class="line">#   Reduce memory load on the system</span><br><span class="line">#   Increase physical memory or swap space</span><br><span class="line">#   Check if swap backing store is full</span><br><span class="line">#   Decrease Java heap size (-Xmx/-Xms)</span><br><span class="line">#   Decrease number of Java threads</span><br><span class="line">#   Decrease Java thread stack sizes (-Xss)</span><br><span class="line">#   Set larger code cache with -XX:ReservedCodeCacheSize=</span><br><span class="line">#   JVM is running with Unscaled Compressed Oops mode in which the Java heap is</span><br><span class="line">#     placed in the first 4GB address space. The Java Heap base address is the</span><br><span class="line">#     maximum limit for the native heap growth. Please use -XX:HeapBaseMinAddress</span><br><span class="line">#     to set the Java Heap base and to place the Java Heap above 4GB virtual address.</span><br><span class="line"># This output file may be truncated or incomplete.</span><br><span class="line">#</span><br><span class="line">#  Out of Memory Error (allocation.cpp:390), pid=6684, tid=0x0000000000000df8</span><br><span class="line">#</span><br><span class="line"># JRE version: Java(TM) SE Runtime Environment (8.0_201-b09) (build 1.8.0_201-b09)</span><br><span class="line"># Java VM: Java HotSpot(TM) 64-Bit Server VM (25.201-b09 mixed mode windows-amd64 compressed oops)</span><br><span class="line"># Failed to write core dump. Call to MiniDumpWriteDump() failed (Error 0x800705af: 页面文件太小，无法完成操作。</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>翻译过来就是本地内存分配失败, 可能的原因有两种</p><ol><li>系统物理内存或虚拟内存不足</li><li>程序在压缩指针模式下运行, Java堆会阻塞本地堆的增长</li></ol><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>查看服务器，发现内存足够，尝试按第二个问题进行解决。</p><p>禁止使用压缩指针模式，在Catalina.bat中的<strong>JAVA_OPTS</strong>的值后面加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:-UseCompressedOops</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson对日期的序列化</title>
      <link href="/posts/edc1/"/>
      <url>/posts/edc1/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>fastjson默认对日期格式序列化，默认是使用时间戳</p><h1 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JSONField</span> (format=<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)  </span><br><span class="line"><span class="keyword">public</span> Date birthday;</span><br></pre></td></tr></table></figure><h1 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.toJSONStringWithDateFormat(Object, dateformat, SerializerFeature.WriteDateUseDateFormat)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java,Fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线上故障排查完整套路</title>
      <link href="/posts/3eac/"/>
      <url>/posts/3eac/</url>
      
        <content type="html"><![CDATA[<p>线上故障主要会包括 CPU、磁盘、内存以及网络问题，而大多数故障可能会包含不止一个层面的问题，所以进行排查时候尽量四个方面依次排查一遍。同时例如 jstack、jmap 等工具也是不囿于一个方面的问题的，基本上出问题就是 df、free、top 三连，然后依次 jstack、jmap 伺候，具体问题具体分析即可。</p><a id="more"></a><h1 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h1><p>一般来讲我们首先会排查 CPU 方面的问题。CPU 异常往往还是比较好定位的。原因包括业务逻辑问题(死循环)、频繁 gc 以及上下文切换过多。而最常见的往往是业务逻辑(或者框架逻辑)导致的，可以使用 jstack 来分析对应的堆栈情况。</p><p>使用 jstack 分析 CPU 问题</p><p>我们先用 ps 命令找到对应进程的 pid(如果你有好几个目标进程，可以先用 top 看一下哪个占用比较高)。</p><p>接着用top -H -p pid来找到 CPU 使用率比较高的一些线程</p><p><img src="https://i.loli.net/2020/05/09/NECIo8zLF2BbdG9.jpg" alt="NECIo8zLF2BbdG9"></p><p>然后将占用最高的 pid 转换为 16 进制printf ‘%x\n’ pid得到 nid</p><p><img src="https://i.loli.net/2020/05/09/Vxm7FPDsYodB5eK.jpg" alt="Vxm7FPDsYodB5eK"></p><p>接着直接在 jstack 中找到相应的堆栈信息jstack pid |grep ‘nid’ -C5 –color</p><p><img src="https://i.loli.net/2020/05/09/ZtbM1TCXqhJudgk.jpg" alt="ZtbM1TCXqhJudgk"></p><p>可以看到我们已经找到了 nid 为 0x42 的堆栈信息，接着只要仔细分析一番即可。</p><p>当然更常见的是我们对整个 jstack 文件进行分析，通常我们会比较关注 WAITING 和 TIMED_WAITING 的部分，BLOCKED 就不用说了。我们可以使用命令cat jstack.log | grep “java.lang.Thread.State” | sort -nr | uniq -c来对 jstack 的状态有一个整体的把握，如果 WAITING 之类的特别多，那么多半是有问题啦。</p><p><img src="https://i.loli.net/2020/05/09/T1RIPyNQ6O5deHD.jpg" alt="T1RIPyNQ6O5deHD"></p><p>频繁 gc</p><p>当然我们还是会使用 jstack 来分析问题，但有时候我们可以先确定下 gc 是不是太频繁，使用jstat -gc pid 1000命令来对 gc 分代变化情况进行观察，1000 表示采样间隔(ms)，S0C/S1C、S0U/S1U、EC/EU、OC/OU、MC/MU 分别代表两个 Survivor 区、Eden 区、老年代、元数据区的容量和使用量。YGC/YGT、FGC/FGCT、GCT 则代表 YoungGc、FullGc 的耗时和次数以及总耗时。如果看到 gc 比较频繁，再针对 gc 方面做进一步分析，具体可以参考一下 gc 章节的描述。</p><p><img src="https://i.loli.net/2020/05/09/yd1BDOLQJE6I5Aq.jpg" alt="yd1BDOLQJE6I5Aq"></p><p>上下文切换</p><p>针对频繁上下文问题，我们可以使用vmstat命令来进行查看</p><p><img src="https://i.loli.net/2020/05/09/tcy6FdeGxjAhJ3Z.jpg" alt="tcy6FdeGxjAhJ3Z"></p><p>cs(context switch)一列则代表了上下文切换的次数。</p><p>如果我们希望对特定的 pid 进行监控那么可以使用 pidstat -w pid命令，cswch 和 nvcswch 表示自愿及非自愿切换。</p><p><img src="https://i.loli.net/2020/05/09/1PV4HKOtzlMLDU8.jpg" alt="1PV4HKOtzlMLDU8"></p><h1 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h1><p>磁盘问题和 CPU 一样是属于比较基础的。首先是磁盘空间方面，我们直接使用df -hl来查看文件系统状态</p><p><img src="https://i.loli.net/2020/05/09/loiAmNBR4GPzYf7.jpg" alt="loiAmNBR4GPzYf7"></p><p>更多时候，磁盘问题还是性能上的问题。我们可以通过 iostatiostat -d -k -x来进行分析</p><p><img src="https://i.loli.net/2020/05/09/D5iAhEZYrKHGOxu.jpg" alt="D5iAhEZYrKHGOxu"></p><p>最后一列%util可以看到每块磁盘写入的程度，而rrqpm/s以及wrqm/s分别表示读写速度，一般就能帮助定位到具体哪块磁盘出现问题了。</p><p>另外我们还需要知道是哪个进程在进行读写，一般来说开发自己心里有数，或者用 iotop 命令来进行定位文件读写的来源。</p><p><img src="https://i.loli.net/2020/05/09/DdOLFSwnjWc3M4a.jpg" alt="DdOLFSwnjWc3M4a"></p><p>不过这边拿到的是 tid，我们要转换成 pid，可以通过 readlink 来找到 pidreadlink -f /proc/*/task/tid/../..。</p><p><img src="https://i.loli.net/2020/05/09/ap8VxmZGdPDeOBr.jpg" alt="ap8VxmZGdPDeOBr"></p><p>找到 pid 之后就可以看这个进程具体的读写情况cat /proc/pid/io</p><p><img src="https://i.loli.net/2020/05/09/yWJnXNvLTHMCEYr.jpg" alt="yWJnXNvLTHMCEYr"></p><p>我们还可以通过 lsof 命令来确定具体的文件读写情况lsof -p pid</p><p><img src="https://i.loli.net/2020/05/09/12N8JMc6KOBniW5.jpg" alt="12N8JMc6KOBniW5"></p><h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a><strong>内存</strong></h1><p>内存问题排查起来相对比 CPU 麻烦一些，场景也比较多。主要包括 OOM、GC 问题和堆外内存。一般来讲，我们会先用free命令先来检查一发内存的各种情况。</p><p><img src="https://i.loli.net/2020/05/09/4WPvkwlBxgiapjG.jpg" alt="4WPvkwlBxgiapjG"></p><p>堆内内存</p><p>内存问题大多还都是堆内内存问题。表象上主要分为 OOM 和 Stack Overflo。</p><p>OOM</p><p>JMV 中的内存不足，OOM 大致可以分为以下几种：</p><p>Exception in thread “main” java.lang.OutOfMemoryError: unable to create new native thread</p><p>这个意思是没有足够的内存空间给线程分配 Java 栈，基本上还是线程池代码写的有问题，比如说忘记 shutdown，所以说应该首先从代码层面来寻找问题，使用 jstack 或者 jmap。如果一切都正常，JVM 方面可以通过指定Xss来减少单个 thread stack 的大小。另外也可以在系统层面，可以通过修改/etc/security/limits.confnofile 和 nproc 来增大 os 对线程的限制</p><p><img src="https://i.loli.net/2020/05/09/EVjYegKbAH7W63x.jpg" alt="EVjYegKbAH7W63x"></p><p>Exception in thread “main” java.lang.OutOfMemoryError: Java heap space</p><p>这个意思是堆的内存占用已经达到-Xmx 设置的最大值，应该是最常见的 OOM 错误了。解决思路仍然是先应该在代码中找，怀疑存在内存泄漏，通过 jstack 和 jmap 去定位问题。如果说一切都正常，才需要通过调整Xmx的值来扩大内存。</p><p>Caused by: java.lang.OutOfMemoryError: Meta space</p><p>这个意思是元数据区的内存占用已经达到XX:MaxMetaspaceSize设置的最大值，排查思路和上面的一致，参数方面可以通过XX:MaxPermSize来进行调整(这里就不说 1.8 以前的永久代了)。</p><p>Stack Overflow</p><p>栈内存溢出，这个大家见到也比较多。</p><p>Exception in thread “main” java.lang.StackOverflowError</p><p>表示线程栈需要的内存大于 Xss 值，同样也是先进行排查，参数方面通过Xss来调整，但调整的太大可能又会引起 OOM。</p><p>使用 JMAP 定位代码内存泄漏</p><p>上述关于 OOM 和 Stack Overflo 的代码排查方面，我们一般使用 JMAPjmap -dump:format=b,file=filename pid来导出 dump 文件</p><p><img src="https://i.loli.net/2020/05/09/qbZPpCMABlf4EWL.jpg" alt="qbZPpCMABlf4EWL"></p><p>通过 mat(Eclipse Memory Analysis Tools)导入 dump 文件进行分析，内存泄漏问题一般我们直接选 Leak Suspects 即可，mat 给出了内存泄漏的建议。另外也可以选择 Top Consumers 来查看最大对象报告。和线程相关的问题可以选择 thread overview 进行分析。除此之外就是选择 Histogram 类概览来自己慢慢分析，大家可以搜搜 mat 的相关教程。</p><p><img src="https://i.loli.net/2020/05/09/qkIbper7fwm3G5W.jpg" alt="qkIbper7fwm3G5W"></p><p>日常开发中，代码产生内存泄漏是比较常见的事，并且比较隐蔽，需要开发者更加关注细节。比如说每次请求都 new 对象，导致大量重复创建对象；进行文件流操作但未正确关闭；手动不当触发 gc；ByteBuffer 缓存分配不合理等都会造成代码 OOM。</p><p>另一方面，我们可以在启动参数中指定-XX:+HeapDumpOnOutOfMemoryError来保存 OOM 时的 dump 文件。</p><p>gc 问题和线程</p><p>gc 问题除了影响 CPU 也会影响内存，排查思路也是一致的。一般先使用 jstat 来查看分代变化情况，比如 youngGC 或者 fullGC 次数是不是太多呀；EU、OU 等指标增长是不是异常呀等。</p><p>线程的话太多而且不被及时 gc 也会引发 oom，大部分就是之前说的unable to create new native thread。除了 jstack 细细分析 dump 文件外，我们一般先会看下总体线程，通过pstreee -p pid |wc -l。</p><p><img src="https://i.loli.net/2020/05/09/DkcJy23NTzf5BCb.jpg" alt="DkcJy23NTzf5BCb"></p><p>或者直接通过查看/proc/pid/task的数量即为线程数量。</p><p><img src="/Users/linjian/Library/Application Support/marktext/images/2020-05-09-09-05-51-image.png" alt></p><p>堆外内存</p><p>如果碰到堆外内存溢出，那可真是太不幸了。首先堆外内存溢出表现就是物理常驻内存增长快，报错的话视使用方式都不确定，如果由于使用 Netty 导致的，那错误日志里可能会出现OutOfDirectMemoryError错误，如果直接是 DirectByteBuffer，那会报OutOfMemoryError: Direct buffer memory。</p><p>堆外内存溢出往往是和 NIO 的使用相关，一般我们先通过 pmap 来查看下进程占用的内存情况pmap -x pid | sort -rn -k3 | head -30，这段意思是查看对应 pid 倒序前 30 大的内存段。这边可以再一段时间后再跑一次命令看看内存增长情况，或者和正常机器比较可疑的内存段在哪里。</p><p><img src="https://i.loli.net/2020/05/09/ebfIvTZwHgF4Aux.jpg" alt="ebfIvTZwHgF4Aux"></p><p>我们如果确定有可疑的内存端，需要通过 gdb 来分析gdb –batch –pid {pid} -ex “dump memory filename.dump {内存起始地址} {内存起始地址+内存块大小}”</p><p><img src="https://i.loli.net/2020/05/09/Zf4v83RJsgnuXEN.jpg" alt="Zf4v83RJsgnuXEN"></p><p>获取 dump 文件后可用 heaxdump 进行查看hexdump -C filename | less，不过大多数看到的都是二进制乱码。</p><p>NMT 是 Java7U40 引入的 HotSpot 新特性，配合 jcmd 命令我们就可以看到具体内存组成了。需要在启动参数中加入 -XX:NativeMemoryTracking=summary 或者 -XX:NativeMemoryTracking=detail，会有略微性能损耗。</p><p>一般对于堆外内存缓慢增长直到爆炸的情况来说，可以先设一个基线jcmd pid VM.native_memory baseline。</p><p><img src="https://i.loli.net/2020/05/09/kogQpHcLM5BUaXj.jpg" alt="kogQpHcLM5BUaXj"></p><p>然后等放一段时间后再去看看内存增长的情况，通过jcmd pid VM.native_memory detail.diff(summary.diff)做一下 summary 或者 detail 级别的 diff。</p><p><img src="https://i.loli.net/2020/05/09/4sYI5cHFy6BXLZN.jpg" alt="4sYI5cHFy6BXLZN"></p><p><img src="https://i.loli.net/2020/05/09/Hd6ysTQK8IpF9Jm.jpg" alt="Hd6ysTQK8IpF9Jm"></p><p>可以看到 jcmd 分析出来的内存十分详细，包括堆内、线程以及 gc(所以上述其他内存异常其实都可以用 nmt 来分析)，这边堆外内存我们重点关注 Internal 的内存增长，如果增长十分明显的话那就是有问题了。</p><p>detail 级别的话还会有具体内存段的增长情况，如下图。</p><p><img src="https://i.loli.net/2020/05/09/xNOSVDYXWlQKn2G.jpg" alt="xNOSVDYXWlQKn2G"></p><p>此外在系统层面，我们还可以使用 strace 命令来监控内存分配 strace -f -e “brk,mmap,munmap” -p pid</p><p>这边内存分配信息主要包括了 pid 和内存地址。</p><p><img src="/Users/linjian/Library/Application Support/marktext/images/2020-05-09-09-08-43-image.png" alt></p><p>不过其实上面那些操作也很难定位到具体的问题点，关键还是要看错误日志栈，找到可疑的对象，搞清楚它的回收机制，然后去分析对应的对象。比如 DirectByteBuffer 分配内存的话，是需要 full GC 或者手动 system.gc 来进行回收的(所以最好不要使用-XX:+DisableExplicitGC)。那么其实我们可以跟踪一下 DirectByteBuffer 对象的内存情况，通过jmap -histo:live pid手动触发 fullGC 来看看堆外内存有没有被回收。如果被回收了，那么大概率是堆外内存本身分配的太小了，通过-XX:MaxDirectMemorySize进行调整。如果没有什么变化，那就要使用 jmap 去分析那些不能被 gc 的对象，以及和 DirectByteBuffer 之间的引用关系了。</p><h1 id="GC-问题"><a href="#GC-问题" class="headerlink" title="GC 问题"></a><strong>GC 问题</strong></h1><p>堆内内存泄漏总是和 GC 异常相伴。不过 GC 问题不只是和内存问题相关，还有可能引起 CPU 负载、网络问题等系列并发症，只是相对来说和内存联系紧密些，所以我们在此单独总结一下 GC 相关问题。</p><p>我们在 CPU 章介绍了使用 jstat 来获取当前 GC 分代变化信息。而更多时候，我们是通过 GC 日志来排查问题的，在启动参数中加上-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps来开启 GC 日志。</p><p>常见的 Young GC、Full GC 日志含义在此就不做赘述了。</p><p>针对 gc 日志，我们就能大致推断出 youngGC 与 fullGC 是否过于频繁或者耗时过长，从而对症下药。我们下面将对 G1 垃圾收集器来做分析，这边也建议大家使用 G1-XX:+UseG1GC。</p><p>youngGC 过频繁</p><p>youngGC 频繁一般是短周期小对象较多，先考虑是不是 Eden 区/新生代设置的太小了，看能否通过调整-Xmn、-XX:SurvivorRatio 等参数设置来解决问题。如果参数正常，但是 young gc 频率还是太高，就需要使用 Jmap 和 MAT 对 dump 文件进行进一步排查了。</p><p>youngGC 耗时过长</p><p>耗时过长问题就要看 GC 日志里耗时耗在哪一块了。以 G1 日志为例，可以关注 Root Scanning、Object Copy、Ref Proc 等阶段。Ref Proc 耗时长，就要注意引用相关的对象。Root Scanning 耗时长，就要注意线程数、跨代引用。Object Copy 则需要关注对象生存周期。而且耗时分析它需要横向比较，就是和其他项目或者正常时间段的耗时比较。比如说图中的 Root Scanning 和正常时间段比增长较多，那就是起的线程太多了。</p><p><img src="/Users/linjian/Library/Application Support/marktext/images/2020-05-09-09-08-54-image.png" alt></p><p>触发 fullGC</p><p>G1 中更多的还是 mixedGC，但 mixedGC 可以和 youngGC 思路一样去排查。触发 fullGC 了一般都会有问题，G1 会退化使用 Serial 收集器来完成垃圾的清理工作，暂停时长达到秒级别，可以说是半跪了。</p><p>fullGC 的原因可能包括以下这些，以及参数调整方面的一些思路：</p><ul><li><p>并发阶段失败：在并发标记阶段，MixGC 之前老年代就被填满了，那么这时候 G1 就会放弃标记周期。这种情况，可能就需要增加堆大小，或者调整并发标记线程数-XX:ConcGCThreads。</p></li><li><p>晋升失败：在 GC 的时候没有足够的内存供存活/晋升对象使用，所以触发了 Full GC。这时候可以通过-XX:G1ReservePercent来增加预留内存百分比，减少-XX:InitiatingHeapOccupancyPercent来提前启动标记，-XX:ConcGCThreads来增加标记线程数也是可以的。</p></li><li><p>大对象分配失败：大对象找不到合适的 region 空间进行分配，就会进行 fullGC，这种情况下可以增大内存或者增大-XX:G1HeapRegionSize。</p></li><li><p>程序主动执行 System.gc()：不要随便写就对了。</p></li></ul><p>另外，我们可以在启动参数中配置-XX:HeapDumpPath=/xxx/dump.hprof来 dump fullGC 相关的文件，并通过 jinfo 来进行 gc 前后的 dump</p><p>jinfo -flag +HeapDumpBeforeFullGC pid</p><p>jinfo -flag +HeapDumpAfterFullGC pid</p><p>jinfo -flag +HeapDumpBeforeFullGC pid</p><p>jinfo -flag +HeapDumpAfterFullGC pid</p><p>这样得到 2 份 dump 文件，对比后主要关注被 gc 掉的问题对象来定位问题。</p><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><p>涉及到网络层面的问题一般都比较复杂，场景多，定位难，成为了大多数开发的噩梦，应该是最复杂的了。这里会举一些例子，并从 tcp 层、应用层以及工具的使用等方面进行阐述。</p><p>超时</p><p>超时错误大部分处在应用层面，所以这块着重理解概念。超时大体可以分为连接超时和读写超时，某些使用连接池的客户端框架还会存在获取连接超时和空闲连接清理超时。</p><ul><li><p>读写超时。readTimeout/writeTimeout，有些框架叫做 so_timeout 或者 socketTimeout，均指的是数据读写超时。注意这边的超时大部分是指逻辑上的超时。soa 的超时指的也是读超时。读写超时一般都只针对客户端设置。</p></li><li><p>连接超时。connectionTimeout，客户端通常指与服务端建立连接的最大时间。服务端这边 connectionTimeout 就有些五花八门了，Jetty 中表示空闲连接清理时间，Tomcat 则表示连接维持的最大时间。</p></li><li><p>其他。包括连接获取超时 connectionAcquireTimeout 和空闲连接清理超时 idleConnectionTimeout。多用于使用连接池或队列的客户端或服务端框架。</p></li></ul><p>我们在设置各种超时时间中，需要确认的是尽量保持客户端的超时小于服务端的超时，以保证连接正常结束。</p><p>在实际开发中，我们关心最多的应该是接口的读写超时了。</p><p>如何设置合理的接口超时是一个问题。如果接口超时设置的过长，那么有可能会过多地占用服务端的 tcp 连接。而如果接口设置的过短，那么接口超时就会非常频繁。</p><p>服务端接口明明 rt 降低，但客户端仍然一直超时又是另一个问题。这个问题其实很简单，客户端到服务端的链路包括网络传输、排队以及服务处理等，每一个环节都可能是耗时的原因。</p><p>TCP 队列溢出</p><p>tcp 队列溢出是个相对底层的错误，它可能会造成超时、rst 等更表层的错误。因此错误也更隐蔽，所以我们单独说一说。</p><p><img src="https://i.loli.net/2020/05/09/KxGXsebPNkCDRpf.jpg" alt="KxGXsebPNkCDRpf"></p><p>如上图所示，这里有两个队列：syns queue(半连接队列）、accept queue（全连接队列）。三次握手，在 server 收到 client 的 syn 后，把消息放到 syns queue，回复 syn+ack 给 client，server 收到 client 的 ack，如果这时 accept queue 没满，那就从 syns queue 拿出暂存的信息放入 accept queue 中，否则按 tcp_abort_on_overflow 指示的执行。</p><p>tcp_abort_on_overflow 0 表示如果三次握手第三步的时候 accept queue 满了那么 server 扔掉 client 发过来的 ack。tcp_abort_on_overflow 1 则表示第三步的时候如果全连接队列满了，server 发送一个 rst 包给 client，表示废掉这个握手过程和这个连接，意味着日志里可能会有很多connection reset / connection reset by peer。</p><p>那么在实际开发中，我们怎么能快速定位到 tcp 队列溢出呢？</p><p>netstat 命令，执行 netstat -s | egrep “listen|LISTEN”</p><p><img src="/Users/linjian/Library/Application Support/marktext/images/2020-05-09-09-09-17-image.png" alt></p><p>如上图所示，overflowed 表示全连接队列溢出的次数，sockets dropped 表示半连接队列溢出的次数。</p><p>ss 命令，执行 ss -lnt</p><p><img src="/Users/linjian/Library/Application Support/marktext/images/2020-05-09-09-09-28-image.png" alt></p><p>上面看到 Send-Q 表示第三列的 listen 端口上的全连接队列最大为 5，第一列 Recv-Q 为全连接队列当前使用了多少。</p><p>接着我们看看怎么设置全连接、半连接队列大小吧：</p><p>全连接队列的大小取决于 min(backlog, somaxconn)。backlog 是在 socket 创建的时候传入的，somaxconn 是一个 os 级别的系统参数。而半连接队列的大小取决于 max(64, /proc/sys/net/ipv4/tcp_max_syn_backlog)。</p><p>在日常开发中，我们往往使用 servlet 容器作为服务端，所以我们有时候也需要关注容器的连接队列大小。在 Tomcat 中 backlog 叫做acceptCount，在 Jetty 里面则是acceptQueueSize。</p><p>RST 异常</p><p>RST 包表示连接重置，用于关闭一些无用的连接，通常表示异常关闭，区别于四次挥手。</p><p>在实际开发中，我们往往会看到connection reset / connection reset by peer错误，这种情况就是 RST 包导致的。</p><p>端口不存在</p><p>如果像不存在的端口发出建立连接 SYN 请求，那么服务端发现自己并没有这个端口则会直接返回一个 RST 报文，用于中断连接。</p><p>主动代替 FIN 终止连接</p><p>一般来说，正常的连接关闭都是需要通过 FIN 报文实现，然而我们也可以用 RST 报文来代替 FIN，表示直接终止连接。实际开发中，可设置 SO_LINGER 数值来控制，这种往往是故意的，来跳过 TIMED_WAIT，提供交互效率，不闲就慎用。</p><p>客户端或服务端有一边发生了异常，该方向对端发送 RST 以告知关闭连接</p><p>我们上面讲的 tcp 队列溢出发送 RST 包其实也是属于这一种。这种往往是由于某些原因，一方无法再能正常处理请求连接了(比如程序崩了，队列满了)，从而告知另一方关闭连接。</p><p>接收到的 TCP 报文不在已知的 TCP 连接内</p><p>比如，一方机器由于网络实在太差 TCP 报文失踪了，另一方关闭了该连接，然后过了许久收到了之前失踪的 TCP 报文，但由于对应的 TCP 连接已不存在，那么会直接发一个 RST 包以便开启新的连接。</p><p>一方长期未收到另一方的确认报文，在一定时间或重传次数后发出 RST 报文</p><p>这种大多也和网络环境相关了，网络环境差可能会导致更多的 RST 报文。</p><p>之前说过 RST 报文多会导致程序报错，在一个已关闭的连接上读操作会报connection reset，而在一个已关闭的连接上写操作则会报connection reset by peer。通常我们可能还会看到broken pipe错误，这是管道层面的错误，表示对已关闭的管道进行读写，往往是在收到 RST，报出connection reset错后继续读写数据报的错，这个在 glibc 源码注释中也有介绍。</p><p>我们在排查故障时候怎么确定有 RST 包的存在呢？当然是使用 tcpdump 命令进行抓包，并使用 wireshark 进行简单分析了。tcpdump -i en0 tcp -w xxx.cap，en0 表示监听的网卡。</p><p><img src="https://i.loli.net/2020/05/09/wUmoJuzFfBXQc63.jpg" alt="wUmoJuzFfBXQc63"></p><p>接下来我们通过 wireshark 打开抓到的包，可能就能看到如下图所示，红色的就表示 RST 包了。</p><p><img src="https://i.loli.net/2020/05/09/gRvGnlJOoQF3XDz.jpg" alt="gRvGnlJOoQF3XDz"></p><p>TIME_WAIT 和 CLOSE_WAIT</p><p>TIME_WAIT 和 CLOSE_WAIT 是啥意思相信大家都知道。</p><p>在线上时，我们可以直接用命令netstat -n | awk ‘/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}’来查看 time-wait 和 close_wait 的数量</p><p>用 ss 命令会更快ss -ant | awk ‘{++S[$1]} END {for(a in S) print a, S[a]}’</p><p><img src="https://i.loli.net/2020/05/09/lcDi5Jvh6sySG9Q.jpg" alt="lcDi5Jvh6sySG9Q"></p><p>TIME_WAIT</p><p>time_wait 的存在一是为了丢失的数据包被后面连接复用，二是为了在 2MSL 的时间范围内正常关闭连接。它的存在其实会大大减少 RST 包的出现。</p><p>过多的 time_wait 在短连接频繁的场景比较容易出现。这种情况可以在服务端做一些内核参数调优:</p><p>#表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭</p><p>net.ipv4.tcp_tw_reuse = 1</p><p>#表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭</p><p>net.ipv4.tcp_tw_recycle = 1</p><p>#表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭</p><p>net.ipv4.tcp_tw_reuse = 1</p><p>#表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭</p><p>net.ipv4.tcp_tw_recycle = 1</p><p>当然我们不要忘记在 NAT 环境下因为时间戳错乱导致数据包被拒绝的坑了，另外的办法就是改小tcp_max_tw_buckets，超过这个数的 time_wait 都会被干掉，不过这也会导致报time wait bucket table overflow的错。</p><p>CLOSE_WAIT</p><p>close_wait 往往都是因为应用程序写的有问题，没有在 ACK 后再次发起 FIN 报文。close_wait 出现的概率甚至比 time_wait 要更高，后果也更严重。往往是由于某个地方阻塞住了，没有正常关闭连接，从而渐渐地消耗完所有的线程。</p><p>想要定位这类问题，最好是通过 jstack 来分析线程堆栈来排查问题，具体可参考上述章节。这里仅举一个例子。</p><p>开发同学说应用上线后 CLOSE_WAIT 就一直增多，直到挂掉为止，jstack 后找到比较可疑的堆栈是大部分线程都卡在了countdownlatch.await方法，找开发同学了解后得知使用了多线程但是确没有 catch 异常，修改后发现异常仅仅是最简单的升级 sdk 后常出现的class not found。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql配置文件路径</title>
      <link href="/posts/6c95/"/>
      <url>/posts/6c95/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p><code>/etc/my.cnf</code></p><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><ol><li>运行–&gt;services.msc打开服务列表，找到Mysql服务</li></ol><p><img src="https://i.loli.net/2020/05/08/8YaPhmr2HuqQgkc.jpg" alt="8YaPhmr2HuqQgkc"></p><ol start="2"><li>右键选择属性，弹出窗口：</li></ol><p><img src="https://i.loli.net/2020/05/08/EhpVCFmvDrAYPOT.jpg" alt="EhpVCFmvDrAYPOT"></p><p>可以看到在可执行文件的路径是C:\ProgramData\MySQL\MySQL Server 5.7\my.ini，即mysql的配置文件在该目录下。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql设置字符编码</title>
      <link href="/posts/22a5/"/>
      <url>/posts/22a5/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux配置文件路径-etc-my-cnf"><a href="#Linux配置文件路径-etc-my-cnf" class="headerlink" title="Linux配置文件路径 /etc/my.cnf"></a>Linux配置文件路径 /etc/my.cnf</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">character-set-server=utf8 </span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line"></span><br><span class="line">default-character-set=utf8 </span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"></span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><h1 id="查看字符编码"><a href="#查看字符编码" class="headerlink" title="查看字符编码"></a>查看字符编码</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%character%'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-05</title>
      <link href="/posts/e964/"/>
      <url>/posts/e964/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译OpenJDK8</title>
      <link href="/posts/b0dd/"/>
      <url>/posts/b0dd/</url>
      
        <content type="html"><![CDATA[<h1 id="下载openJDK源码"><a href="#下载openJDK源码" class="headerlink" title="下载openJDK源码"></a>下载openJDK源码</h1><p>openJDK项目地址：<a href="http://hg.openjdk.java.net/" target="_blank" rel="noopener">http://hg.openjdk.java.net/</a></p><h3 id="点击jdk8u60下面的jdk链接"><a href="#点击jdk8u60下面的jdk链接" class="headerlink" title="点击jdk8u60下面的jdk链接"></a>点击jdk8u60下面的jdk链接</h3><p><img src="https://i.loli.net/2020/04/30/davR2yMhpAuYVe6.png" alt="davR2yMhpAuYVe6"></p><p><img src="https://i.loli.net/2020/04/30/P3tKMvZzSmXn2Rr.png" alt="P3tKMvZzSmXn2Rr"></p><h3 id="点击”browse”链接，如下图所示"><a href="#点击”browse”链接，如下图所示" class="headerlink" title="点击”browse”链接，如下图所示"></a>点击”browse”链接，如下图所示</h3><p><img src="https://i.loli.net/2020/04/30/6LXbSE5BQkV7cCl.png" alt="6LXbSE5BQkV7cCl"></p><h3 id="点击下图中的”zip”链接"><a href="#点击下图中的”zip”链接" class="headerlink" title="点击下图中的”zip”链接"></a>点击下图中的”zip”链接</h3><p><img src="https://i.loli.net/2020/04/30/uE4bVXGoihq1AJH.png" alt="uE4bVXGoihq1AJH"></p><h2 id="解压下载得到的zip压缩包"><a href="#解压下载得到的zip压缩包" class="headerlink" title="解压下载得到的zip压缩包"></a>解压下载得到的zip压缩包</h2><p><img src="https://i.loli.net/2020/04/30/KaXLkBsOte1Mrqb.png" alt="KaXLkBsOte1Mrqb"></p><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>操作流程按照  <a href="http://hg.openjdk.java.net/jdk8/jdk8/raw-file/tip/README-builds.html#macosx" target="_blank" rel="noopener">README-builds.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机笔记</title>
      <link href="/posts/c9a2/"/>
      <url>/posts/c9a2/</url>
      
        <content type="html"><![CDATA[<p>HotSpot VM的热点代码探测能力可以通过执行计数器找出最具有编译价值的代 码，然后通知JIT编译器以方法为单位进行编译。如果一个方法被频繁调用，或方法中有效 循环次数很多，将会分别触发标准编译和OSR（栈上替换）编译动作。通过编译器与解释器 恰当地协同工作，可以在最优化的程序响应时间与最佳执行性能中取得平衡，而且无须等待 本地代码输出才能执行程序，即时编译的时间压力也相对减小，这样有助于引入更多的代码 优化技术，输出质量更高的本地代码。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雪花算法SnowFlake</title>
      <link href="/posts/59bf/"/>
      <url>/posts/59bf/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>SnowFlake算法生成id的结果是一个64bit大小的整数，它的结构如下图：</p><p><img src="https://i.loli.net/2020/04/25/WXJabvMGsuF9NrD.jpg" alt="WXJabvMGsuF9NrD"></p><ul><li><p><code>1位</code>，不用。二进制中最高位为1的都是负数，但是我们生成的id一般都使用整数，所以这个最高位固定是0</p></li><li><p><code>41位</code>，用来记录时间戳（毫秒）。</p><ul><li>41位可以表示个数字，</li><li>如果只用来表示正整数（计算机中正数包含0），可以表示的数值范围是：0 至 ，减1是因为可表示的数值范围是从0开始算的，而不是1。</li><li>也就是说41位可以表示个毫秒的值，转化成单位年则是年</li></ul></li><li><p><code>10位</code>，用来记录工作机器id。</p><ul><li>可以部署在个节点，包括<code>5位datacenterId</code>和<code>5位workerId</code></li><li><code>5位（bit）</code>可以表示的最大正整数是，即可以用0、1、2、3、….31这32个数字，来表示不同的datecenterId或workerId</li></ul></li><li><p><code>12位</code>，序列号，用来记录同毫秒内产生的不同id。</p><ul><li><code>12位（bit）</code>可以表示的最大正整数是，即可以用0、1、2、3、….4094这4095个数字，来表示同一机器同一时间截（毫秒)内产生的4095个ID序号</li></ul></li></ul><p>由于在Java中64bit的整数是long类型，所以在Java中SnowFlake算法生成的id就是long来存储的。</p><p>SnowFlake可以保证：</p><ul><li>所有生成的id按时间趋势递增</li><li>整个分布式系统内不会产生重复id（因为有datacenterId和workerId来做区分）</li></ul><a id="more"></a><h1 id="Talk-is-cheap-show-you-the-code"><a href="#Talk-is-cheap-show-you-the-code" class="headerlink" title="Talk is cheap, show you the code"></a>Talk is cheap, show you the code</h1><p><strong>以下是<a href="https://github.com/twitter/snowflake/blob/snowflake-2010/src/main/scala/com/twitter/service/snowflake/IdWorker.scala" target="_blank" rel="noopener">Twitter官方原版</a>的，用Scala写的</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Copyright 2010-2012 Twitter, Inc.*/</span></span><br><span class="line"><span class="keyword">package</span> com.twitter.service.snowflake</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.twitter.ostrich.stats.<span class="type">Stats</span></span><br><span class="line"><span class="keyword">import</span> com.twitter.service.snowflake.gen._</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Random</span></span><br><span class="line"><span class="keyword">import</span> com.twitter.logging.<span class="type">Logger</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An object that generates IDs.</span></span><br><span class="line"><span class="comment"> * This is broken into a separate class in case</span></span><br><span class="line"><span class="comment"> * we ever want to support multiple worker threads</span></span><br><span class="line"><span class="comment"> * per process</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IdWorker</span>(<span class="params"></span></span></span><br><span class="line"><span class="class"><span class="params">    val workerId: <span class="type">Long</span>, </span></span></span><br><span class="line"><span class="class"><span class="params">    val datacenterId: <span class="type">Long</span>, </span></span></span><br><span class="line"><span class="class"><span class="params">    private val reporter: <span class="type">Reporter</span>, </span></span></span><br><span class="line"><span class="class"><span class="params">    var sequence: <span class="type">Long</span> = 0L</span>) <span class="keyword">extends</span> <span class="title">Snowflake</span>.<span class="title">Iface</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="function"><span class="keyword">def</span> <span class="title">genCounter</span></span>(agent: <span class="type">String</span>) = &#123;</span><br><span class="line">    <span class="type">Stats</span>.incr(<span class="string">"ids_generated"</span>)</span><br><span class="line">    <span class="type">Stats</span>.incr(<span class="string">"ids_generated_%s"</span>.format(agent))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> exceptionCounter = <span class="type">Stats</span>.getCounter(<span class="string">"exceptions"</span>)</span><br><span class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> log = <span class="type">Logger</span>.get</span><br><span class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> rand = <span class="keyword">new</span> <span class="type">Random</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> twepoch = <span class="number">1288834974657</span>L</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> workerIdBits = <span class="number">5</span>L</span><br><span class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> datacenterIdBits = <span class="number">5</span>L</span><br><span class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> maxWorkerId = <span class="number">-1</span>L ^ (<span class="number">-1</span>L &lt;&lt; workerIdBits)</span><br><span class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> maxDatacenterId = <span class="number">-1</span>L ^ (<span class="number">-1</span>L &lt;&lt; datacenterIdBits)</span><br><span class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> sequenceBits = <span class="number">12</span>L</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> workerIdShift = sequenceBits</span><br><span class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> datacenterIdShift = sequenceBits + workerIdBits</span><br><span class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits</span><br><span class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">val</span> sequenceMask = <span class="number">-1</span>L ^ (<span class="number">-1</span>L &lt;&lt; sequenceBits)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>[<span class="keyword">this</span>] <span class="keyword">var</span> lastTimestamp = <span class="number">-1</span>L</span><br><span class="line"></span><br><span class="line">  <span class="comment">// sanity check for workerId</span></span><br><span class="line">  <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    exceptionCounter.incr(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalArgumentException</span>(<span class="string">"worker Id can't be greater than %d or less than 0"</span>.format(maxWorkerId))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    exceptionCounter.incr(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalArgumentException</span>(<span class="string">"datacenter Id can't be greater than %d or less than 0"</span>.format(maxDatacenterId))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  log.info(<span class="string">"worker starting. timestamp left shift %d, datacenter id bits %d, worker id bits %d, sequence bits %d, workerid %d"</span>,</span><br><span class="line">    timestampLeftShift, datacenterIdBits, workerIdBits, sequenceBits, workerId)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_id</span></span>(useragent: <span class="type">String</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (!validUseragent(useragent)) &#123;</span><br><span class="line">      exceptionCounter.incr(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">InvalidUserAgentError</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> id = nextId()</span><br><span class="line">    genCounter(useragent)</span><br><span class="line"></span><br><span class="line">    reporter.report(<span class="keyword">new</span> <span class="type">AuditLogEntry</span>(id, useragent, rand.nextLong))</span><br><span class="line">    id</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_worker_id</span></span>(): <span class="type">Long</span> = workerId</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_datacenter_id</span></span>(): <span class="type">Long</span> = datacenterId</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_timestamp</span></span>() = <span class="type">System</span>.currentTimeMillis</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span>[snowflake] <span class="function"><span class="keyword">def</span> <span class="title">nextId</span></span>(): <span class="type">Long</span> = synchronized &#123;</span><br><span class="line">    <span class="keyword">var</span> timestamp = timeGen()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">      exceptionCounter.incr(<span class="number">1</span>)</span><br><span class="line">      log.error(<span class="string">"clock is moving backwards.  Rejecting requests until %d."</span>, lastTimestamp);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">InvalidSystemClock</span>(<span class="string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span>.format(</span><br><span class="line">        lastTimestamp - timestamp))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class="line">      sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask</span><br><span class="line">      <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">        timestamp = tilNextMillis(lastTimestamp)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sequence = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lastTimestamp = timestamp</span><br><span class="line">    ((timestamp - twepoch) &lt;&lt; timestampLeftShift) |</span><br><span class="line">      (datacenterId &lt;&lt; datacenterIdShift) |</span><br><span class="line">      (workerId &lt;&lt; workerIdShift) | </span><br><span class="line">      sequence</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="function"><span class="keyword">def</span> <span class="title">tilNextMillis</span></span>(lastTimestamp: <span class="type">Long</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> timestamp = timeGen()</span><br><span class="line">    <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">      timestamp = timeGen()</span><br><span class="line">    &#125;</span><br><span class="line">    timestamp</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="function"><span class="keyword">def</span> <span class="title">timeGen</span></span>(): <span class="type">Long</span> = <span class="type">System</span>.currentTimeMillis()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> <span class="type">AgentParser</span> = <span class="string">""</span><span class="string">"([a-zA-Z][a-zA-Z\-0-9]*)"</span><span class="string">""</span>.r</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">validUseragent</span></span>(useragent: <span class="type">String</span>): <span class="type">Boolean</span> = useragent <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">AgentParser</span>(_) =&gt; <span class="literal">true</span></span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java版</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdWorker</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> workerId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> datacenterId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequence;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdWorker</span><span class="params">(<span class="keyword">long</span> workerId, <span class="keyword">long</span> datacenterId, <span class="keyword">long</span> sequence)</span></span>&#123;</span><br><span class="line">        <span class="comment">// sanity check for workerId</span></span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"worker Id can't be greater than %d or less than 0"</span>,maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"datacenter Id can't be greater than %d or less than 0"</span>,maxDatacenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">"worker starting. timestamp left shift %d, datacenter id bits %d, worker id bits %d, sequence bits %d, workerid %d"</span>,</span><br><span class="line">                timestampLeftShift, datacenterIdBits, workerIdBits, sequenceBits, workerId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.workerId = workerId;</span><br><span class="line">        <span class="keyword">this</span>.datacenterId = datacenterId;</span><br><span class="line">        <span class="keyword">this</span>.sequence = sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> twepoch = <span class="number">1288834974657L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> workerIdBits = <span class="number">5L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> datacenterIdBits = <span class="number">5L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> maxWorkerId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; workerIdBits);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> maxDatacenterId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; datacenterIdBits);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequenceBits = <span class="number">12L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> workerIdShift = sequenceBits;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> datacenterIdShift = sequenceBits + workerIdBits;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequenceMask = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; sequenceBits);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastTimestamp = -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getWorkerId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> workerId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDatacenterId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> datacenterId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTimestamp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            System.err.printf(<span class="string">"clock is moving backwards.  Rejecting requests until %d."</span>, lastTimestamp);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(String.format(<span class="string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span>,</span><br><span class="line">                    lastTimestamp - timestamp));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line">        <span class="keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) |</span><br><span class="line">                (datacenterId &lt;&lt; datacenterIdShift) |</span><br><span class="line">                (workerId &lt;&lt; workerIdShift) |</span><br><span class="line">                sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">tilNextMillis</span><span class="params">(<span class="keyword">long</span> lastTimestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = timeGen();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">timeGen</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//---------------测试---------------</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IdWorker worker = <span class="keyword">new</span> IdWorker(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            System.out.println(worker.nextId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>算法中大量使用位运算，这里不对位运算做过多解释，代码的详细解释参考<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000011282426" target="_blank" rel="noopener">煲煲菜的博客</a></p><p>文章主要摘抄自<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000011282426" target="_blank" rel="noopener">煲煲菜的博客</a><br>如有侵权之处请留言告知，会立即删除。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>动态定义登陆页</title>
      <link href="/posts/c09a/"/>
      <url>/posts/c09a/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>不同用户需要展示不同的登陆页</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>修改web.xml欢迎页，跳转到index.mvc动态页面中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;welcome-file-list&gt;</span><br><span class="line">    &lt;welcome-file&gt;index.mvc&lt;/welcome-file&gt;</span><br><span class="line">&lt;/welcome-file-list&gt;</span><br></pre></td></tr></table></figure><p>创建controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面跳转</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/index"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(@RequestParam Map map, Model model)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">            model.addAllAttributes(map);</span><br><span class="line">            <span class="keyword">return</span> (String) map.get(<span class="string">"custom"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><em><a href="http://localhost:8080/hug_interview/?custom=ibd" target="_blank" rel="noopener">http://localhost:8080/hug_interview/?custom=ibd</a></em></p><p><em><a href="http://localhost:8080/hug_interview/" target="_blank" rel="noopener">http://localhost:8080/hug_interview/</a></em></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat虚拟目录映射</title>
      <link href="/posts/8880/"/>
      <url>/posts/8880/</url>
      
        <content type="html"><![CDATA[<h1 id="修改service-xml文件"><a href="#修改service-xml文件" class="headerlink" title="修改service.xml文件"></a>修改service.xml文件</h1><p>在tomcat安装目录下找到conf目录（tomcat/conf/service.xml）</p><p>path：虚拟路径，以 / 开头；</p><p>docBase：磁盘路径（绝对路径），Windows环境以盘符（D:/template）开始，linux环境如下；</p><p>reloadable：为 true 时 当web.xml或者class有改动的时候都会自动重新加载不需要从新启动服务；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Context path=&quot;/hug_interview/informedConsent&quot; docBase=&quot;/home/fllow/cloudFollowupImage/informedConsent&quot; reloadable=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/04/16/PARQHTlYsId2u95.png" alt="PARQHTlYsId2u95"></p>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java List的remove()方法陷阱</title>
      <link href="/posts/607a/"/>
      <url>/posts/607a/</url>
      
        <content type="html"><![CDATA[<p>Java的List在删除元素时，一般会用list.remove(o)/remove(i)方法。在使用时，容易触碰陷阱，得到意想不到的结果。总结以往经验，记录下来与大家分享。</p><a id="more"></a><p>首先初始化List，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        list.add(<span class="number">4</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为[1, 2, 3, 3, 4]</p><h1 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h1><h3 id="普通for循环遍历List删除指定元素–错误！！！"><a href="#普通for循环遍历List删除指定元素–错误！！！" class="headerlink" title="普通for循环遍历List删除指定元素–错误！！！"></a>普通for循环遍历List删除指定元素–错误！！！</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (list.get(i) == <span class="number">3</span>) &#123;</span><br><span class="line">        list.remove(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><p>输出结果：[1, 2, 3, 4]</p><p>  为什么元素3只删除了一个？本以为这代码再简单不过，可还是掉入了陷阱里，上面的代码这样写的话，元素3是过滤不完的。只要list中有相邻2个相同的元素，就过滤不完。List调用remove(index)方法后，会移除index位置上的元素，index之后的元素就全部依次左移，即索引依次-1要保证能操作所有的数据，需要把index-1，否则原来索引为index+1的元素就无法遍历到(因为原来索引为index+1的数据，在执行移除操作后，索引变成index了，如果没有index-1的操作，就不会遍历到该元素，而是遍历该元素的下一个元素)。</p><p>  如果这样，删除元素后同步调整索引或者倒序遍历删除元素，是否可行呢？</p><h3 id="for循环遍历List删除元素时，让索引同步调整–正确！"><a href="#for循环遍历List删除元素时，让索引同步调整–正确！" class="headerlink" title="for循环遍历List删除元素时，让索引同步调整–正确！"></a>for循环遍历List删除元素时，让索引同步调整–正确！</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (list.get(i) == <span class="number">3</span>) &#123;</span><br><span class="line">        list.remove(i--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><p>输出结果：[1, 2, 4]</p><h3 id="倒序遍历List删除元素–正确！"><a href="#倒序遍历List删除元素–正确！" class="headerlink" title="倒序遍历List删除元素–正确！"></a>倒序遍历List删除元素–正确！</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = list.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (list.get(i) == <span class="number">3</span>) &#123;</span><br><span class="line">        list.remove(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><p>输出结果：[1, 2, 4]</p><h3 id="foreach遍历List删除元素–错误！！！"><a href="#foreach遍历List删除元素–错误！！！" class="headerlink" title="foreach遍历List删除元素–错误！！！"></a>foreach遍历List删除元素–错误！！！</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Integer i : list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">        list.remove(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><p>抛出异常：java.util.ConcurrentModificationException<br> foreach 写法实际上是对的 Iterable、hasNext、next方法的简写。因此从List.iterator()源码着手分析，跟踪iterator()方法，该方法返回了 Itr 迭代器对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Itr 类定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cursor; <span class="comment">// index of next element to return</span></span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">            cursor = lastRet;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过代码我们发现 Itr 是 ArrayList 中定义的一个私有内部类，在 next、remove方法中都会调用checkForComodification 方法，该方法的作用是判断 modCount != expectedModCount是否相等，如果不相等则抛出ConcurrentModificationException异常。每次正常执行remove 方法后，都会对执行expectedModCount = modCount赋值，保证两个值相等，那么问题基本上已经清晰了，在 foreach 循环中<br>执行 list.remove(item);，对 list 对象的 modCount 值进行了修改，而 list 对象的迭代器的 expectedModCount 值未进行修改，因此抛出了ConcurrentModificationException异常。</p><h3 id="迭代删除List元素–正确！"><a href="#迭代删除List元素–正确！" class="headerlink" title="迭代删除List元素–正确！"></a>迭代删除List元素–正确！</h3><p>java中所有的集合对象类型都实现了Iterator接口，遍历时都可以进行迭代：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Integer&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (it.next() == <span class="number">3</span>) &#123;</span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><p>输出结果：[1, 2, 4]</p><p>Iterator.remove() 方法会在删除当前迭代对象的同时，会保留原来元素的索引。所以用迭代删除元素是最保险的方法，建议大家使用List过程中需要删除元素时，使用这种方式。</p><h3 id="迭代遍历-用list-remove-i-方法删除元素–错误！！！"><a href="#迭代遍历-用list-remove-i-方法删除元素–错误！！！" class="headerlink" title="迭代遍历,用list.remove(i)方法删除元素–错误！！！"></a>迭代遍历,用list.remove(i)方法删除元素–错误！！！</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Integer&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    Integer value = it.next();</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="number">3</span>) &#123;</span><br><span class="line">        list.remove(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><p>抛出异常：java.util.ConcurrentModificationException，原理同上述foreach方法</p><h3 id="List删除元素时，注意Integer类型和int类型的区别"><a href="#List删除元素时，注意Integer类型和int类型的区别" class="headerlink" title="List删除元素时，注意Integer类型和int类型的区别"></a>List删除元素时，注意Integer类型和int类型的区别</h3><p>上述Integer的list,直接删除元素2，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.remove(<span class="number">2</span>);</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><p>输出结果：[1, 2, 3, 4]</p><p>可以看出,List删除元素时传入数字时，默认按索引删除。如果需要删除Integer对象，调用remove(object)方法，需要传入Integer类型，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.remove(<span class="keyword">new</span> Integer(<span class="number">2</span>));</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><p>输出结果：[1, 3, 3, 4]</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p>用for循环遍历List删除元素时，需要注意索引会左移的问题。</p></li><li><p>List删除元素时，为避免陷阱，建议使用迭代器iterator的remove方式。</p></li><li><p>List删除元素时，默认按索引删除，而不是对象删除。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>痛点</title>
      <link href="/posts/b5c/"/>
      <url>/posts/b5c/</url>
      
        <content type="html"><![CDATA[<h1 id="医院就诊凭条太多"><a href="#医院就诊凭条太多" class="headerlink" title="医院就诊凭条太多"></a>医院就诊凭条太多</h1><p>挂号、抽血、B超、缴费等各个环节都能在自助机上完成操作，会产生很多凭条，凭条太多不方便，而且容易丢失。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>合理配置线程池</title>
      <link href="/posts/ce63/"/>
      <url>/posts/ce63/</url>
      
        <content type="html"><![CDATA[<h1 id="CPU密集"><a href="#CPU密集" class="headerlink" title="CPU密集"></a>CPU密集</h1><p>CPU密集的意思是该任务需要大量的运算，而没有阻塞，CPU一直全速运行。</p><p>CPU密集任务只有在真正的多核CPU上才可能得到加速(通过多线程)，而在单核CPU上，无论你开几个模拟的多线程，该任务都不可能得到加速，因为CPU总的运算能力就那些。</p><h1 id="IO密集"><a href="#IO密集" class="headerlink" title="IO密集"></a>IO密集</h1><p>IO密集型，即该任务需要大量的IO，即大量的阻塞。在单线程上运行IO密集型的任务会导致浪费大量的CPU运算能力浪费在等待。所以在IO密集型任务中使用多线程可以大大的加速程序运行，即时在单核CPU上，这种加速主要就是利用了被浪费掉的阻塞时间。</p><p>接着上一篇探讨线程池留下的尾巴，如何合理的设置线程池大小。</p><p>要想合理的配置线程池的大小，首先得分析任务的特性，可以从以下几个角度分析：</p><ol><li><p>任务的性质：CPU密集型任务、IO密集型任务、混合型任务。</p></li><li><p>任务的优先级：高、中、低。</p></li><li><p>任务的执行时间：长、中、短。</p></li><li><p>任务的依赖性：是否依赖其他系统资源，如数据库连接等。</p></li></ol><p>性质不同的任务可以交给不同规模的线程池执行。</p><p>对于不同性质的任务来说，CPU密集型任务应配置尽可能小的线程，如配置CPU个数+1的线程数，IO密集型任务应配置尽可能多的线程，因为IO操作不占用CPU，不要让CPU闲下来，应加大线程数量，如配置两倍CPU个数+1，而对于混合型的任务，如果可以拆分，拆分成IO密集型和CPU密集型分别处理，前提是两者运行的时间是差不多的，如果处理时间相差很大，则没必要拆分了。</p><p>若任务对其他系统资源有依赖，如某个任务依赖数据库的连接返回的结果，这时候等待的时间越长，则CPU空闲的时间越长，那么线程数量应设置得越大，才能更好的利用CPU。</p><p>当然具体合理线程池值大小，需要结合系统实际情况，在大量的尝试下比较才能得出，以上只是前人总结的规律。</p><p><strong>最佳线程数目 = （（线程等待时间+线程CPU时间）/线程CPU时间 ）* CPU数目</strong></p><p>比如平均每个线程CPU运行时间为0.5s，而线程等待时间（非CPU运行时间，比如IO）为1.5s，CPU核心数为8，那么根据上面这个公式估算得到：((0.5+1.5)/0.5)*8=32。这个公式进一步转化为：</p><p><strong>最佳线程数目 = （线程等待时间与线程CPU时间之比 + 1）* CPU数目</strong></p><p>可以得出一个结论：  </p><p>线程等待时间所占比例越高，需要越多线程。线程CPU时间所占比例越高，需要越少线程。   </p><p>以上公式与之前的CPU和IO密集型任务设置线程数基本吻合。</p><p>CPU密集型时，任务可以少配置线程数，大概和机器的cpu核数相当，这样可以使得每个线程都在执行任务</p><p>IO密集型时，大部分线程都阻塞，故需要多配置线程数，2*cpu核数</p><p>操作系统之名称解释：</p><p>某些进程花费了绝大多数时间在计算上，而其他则在等待I/O上花费了大多是时间，</p><p>前者称为计算密集型（CPU密集型）computer-bound，后者称为I/O密集型，I/O-bound。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql修改用户权限</title>
      <link href="/posts/7df6/"/>
      <url>/posts/7df6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> root@<span class="string">"%"</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo-admin安装</title>
      <link href="/posts/bc00/"/>
      <url>/posts/bc00/</url>
      
        <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/apache/dubbo.git</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 2.5.x</span><br></pre></td></tr></table></figure><h1 id="切换路径"><a href="#切换路径" class="headerlink" title="切换路径"></a>切换路径</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> dubbo-admin</span><br></pre></td></tr></table></figure><h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package -Dmaven.skip.test=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="将war包复制到tomcat下"><a href="#将war包复制到tomcat下" class="headerlink" title="将war包复制到tomcat下"></a>将war包复制到tomcat下</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv dubbo-admin-2.5.10.war /Volumes/Macintosh\ HD/Library/Tomcat-7.0.85/webapps</span><br></pre></td></tr></table></figure><h1 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h1>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爱肺康研发计划</title>
      <link href="/posts/94af/"/>
      <url>/posts/94af/</url>
      
        <content type="html"><![CDATA[<h1 id="分工"><a href="#分工" class="headerlink" title="分工"></a>分工</h1><h3 id="健海："><a href="#健海：" class="headerlink" title="健海："></a>健海：</h3><ul><li><p>健康打卡</p></li><li><p>健康评测</p></li><li><p>量表评估</p></li><li><p>急性事件</p></li><li><p>管理计划</p></li></ul><h3 id="亿联康"><a href="#亿联康" class="headerlink" title="亿联康"></a>亿联康</h3><ul><li><p>首页</p></li><li><p>患者注册</p></li><li><p>肺功能检查</p></li><li><p>上传报告（暂缓）</p></li></ul><h1 id="研发计划"><a href="#研发计划" class="headerlink" title="研发计划"></a>研发计划</h1><table><thead><tr><th>任务</th><th>开始时间</th><th>结束时间</th></tr></thead><tbody><tr><td>接口文档</td><td>2020.4.1</td><td>2020.4.1</td></tr><tr><td>各自开发</td><td></td><td></td></tr><tr><td>对接</td><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h1 id="健海需提供接口"><a href="#健海需提供接口" class="headerlink" title="健海需提供接口"></a>健海需提供接口</h1><ul><li><p>患者信息查询（入参：手机号+姓名，返回：List）</p></li><li><p>患者信息保存（入参：患者信息，返回：是否成功）</p></li><li><p>患者信息修改（入参：患者信息，返回：是否成功）</p></li><li><p>首页任务状态查询（入参：患者id，返回：任务状态集合）</p></li><li><p>健康打卡、健康评测、量表评估、急性事件嵌入url</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git Commit Message &amp; Change log</title>
      <link href="/posts/2047/"/>
      <url>/posts/2047/</url>
      
        <content type="html"><![CDATA[<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><ul><li>统一团队Git commit日志标准，便于后续代码review，版本发布以及日志自动化生成等等。</li><li>统一团队的Git工作流，包括分支使用、tag规范、issue等</li></ul><a id="more"></a><h1 id="Git-commit日志参考案例"><a href="#Git-commit日志参考案例" class="headerlink" title="Git commit日志参考案例"></a>Git commit日志参考案例</h1><ul><li><a href="https://github.com/angular/angular" target="_blank" rel="noopener">angular</a></li><li><a href="https://github.com/cpselvis/commit-message-test-project" target="_blank" rel="noopener">commit-message-test-project</a></li><li><a href="https://github.com/istanbuljs/babel-plugin-istanbul" target="_blank" rel="noopener">babel-plugin-istanbul</a></li><li><a href="https://github.com/conventional-changelog/conventional-changelog" target="_blank" rel="noopener">conventional-changelog</a></li></ul><h1 id="总体方案"><a href="#总体方案" class="headerlink" title="总体方案"></a>总体方案</h1><p><img src="https://i.loli.net/2020/03/27/glkw5aqRE8UKhy1.png" alt="image.png"></p><h1 id="Git-commit日志基本规范"><a href="#Git-commit日志基本规范" class="headerlink" title="Git commit日志基本规范"></a>Git commit日志基本规范</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><p>对格式的说明如下：</p><ul><li>type代表某次提交的类型，比如是修复一个bug还是增加一个新的feature。所有的type类型如下：</li><li>feat： 新增feature</li><li>fix: 修复bug</li><li>docs: 仅仅修改了文档，比如README, CHANGELOG, CONTRIBUTE等等</li><li>style: 仅仅修改了空格、格式缩进、都好等等，不改变代码逻辑</li><li>refactor: 代码重构，没有加新功能或者修复bug</li><li>perf: 优化相关，比如提升性能、体验</li><li>test: 测试用例，包括单元测试、集成测试等</li><li>chore: 改变构建流程、或者增加依赖库、工具等</li><li>revert: 回滚到上一个版本</li></ul><p>格式要求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 标题行：50个字符以内，描述主要变更内容</span><br><span class="line">#</span><br><span class="line"># 主体内容：更详细的说明文本，建议72个字符以内。 需要描述的信息包括:</span><br><span class="line">#</span><br><span class="line"># * 为什么这个变更是必须的? 它可能是用来修复一个bug，增加一个feature，提升性能、可靠性、稳定性等等</span><br><span class="line"># * 他如何解决这个问题? 具体描述解决问题的步骤</span><br><span class="line"># * 是否存在副作用、风险? </span><br><span class="line">#</span><br><span class="line"># 尾部：如果需要的化可以添加一个链接到issue地址或者其它文档，或者关闭某个issue。</span><br></pre></td></tr></table></figure><h1 id="Git分支与版本发布规范"><a href="#Git分支与版本发布规范" class="headerlink" title="Git分支与版本发布规范"></a>Git分支与版本发布规范</h1><ul><li>基本原则：master为保护分支，不直接在master上进行代码修改和提交。</li><li>开发日常需求或者项目时，从master分支上checkout一个feature分支进行开发或者bugfix分支进行bug修复，功能测试完毕并且项目发布上线后，<code>将feature分支合并到主干master，并且打Tag发布，最后删除开发分支</code>。分支命名规范：<ul><li>分支版本命名规则：分支类型 _ 分支发布时间 _ 分支功能。比如：feature_20170401_fairy_flower</li><li>分支类型包括：feature、 bugfix、refactor三种类型，即新功能开发、bug修复和代码重构</li><li>时间使用年月日进行命名，不足2位补0</li><li>分支功能命名使用snake case命名法，即下划线命名。</li></ul></li><li>Tag包括3位版本，前缀使用v。比如v1.2.31。Tag命名规范：<ul><li>新功能开发使用第2位版本号，bug修复使用第3位版本号</li><li>核心基础库或者Node中间价可以在大版本发布请使用灰度版本号，在版本后面加上后缀，用中划线分隔。alpha或者belta后面加上次数，即第几次alpha：<ul><li>v2.0.0-alpha-1</li><li>v2.0.0-belta-1</li></ul></li></ul></li><li>版本正式发布前需要生成changelog文档，然后再发布上线。</li></ul><h1 id="生成-Change-log"><a href="#生成-Change-log" class="headerlink" title="生成 Change log"></a>生成 Change log</h1><p>如果你的所有<code>Commit</code>都符合<code>Angular</code>格式，那么发布新版本时，<code>Change log</code>就可以用脚本自动生成。生成的文档包括以下三个部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">New features</span><br><span class="line">Bug fixes</span><br><span class="line">Breaking changes</span><br></pre></td></tr></table></figure><p><a href="https://github.com/conventional-changelog-archived-repos/conventional-changelog-cli" target="_blank" rel="noopener">conventional-changelog-cli</a>就是生成<code>Change log</code>的工具，运行下面的命令即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g conventional-changelog-cli</span><br><span class="line">$ <span class="built_in">cd</span> my-project</span><br></pre></td></tr></table></figure><p>打印到屏幕</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conventional-changelog -p angular -i CHANGELOG.md -w</span><br></pre></td></tr></table></figure><p>输出到文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conventional-changelog -p angular -i CHANGELOG.md -s</span><br></pre></td></tr></table></figure><p>上面命令不会覆盖以前的<code>Change log</code>，只会在<code>CHANGELOG.md</code>的头部加上自从上次发布以来的变动。</p><p>如果你想生成所有发布的<code>Change log</code>，要改为运行下面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conventional-changelog -p angular -i CHANGELOG.md -s -r 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPN账号开通</title>
      <link href="/posts/a08f/"/>
      <url>/posts/a08f/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      
      
      <categories>
          
          <category> Jh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-04</title>
      <link href="/posts/29a5/"/>
      <url>/posts/29a5/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql多表关联删除</title>
      <link href="/posts/610c/"/>
      <url>/posts/610c/</url>
      
        <content type="html"><![CDATA[<p>t2和t3数据表中存有他t1表中数据的id</p><p>选择删除t1表中的数据以及t2和t3表中相关（task_id）的数据</p><p>SQL语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> t1, t2, t3</span><br><span class="line"><span class="keyword">FROM</span> t_satisfaction_followup_patients t1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_hospital_followup_record t2 <span class="keyword">ON</span> t1.id = t2.relation_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_manage_call t3 <span class="keyword">ON</span> t1.id = t3.task_id</span><br><span class="line"><span class="keyword">WHERE</span> t1.id = <span class="string">'8aa5eeb2529d46d5962d561d3a9beedc'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql表历史数据转移备份</title>
      <link href="/posts/dd29/"/>
      <url>/posts/dd29/</url>
      
        <content type="html"><![CDATA[<p>每天4点将4天前的数据转移到历史表，减少业务表的压力。</p><h1 id="确认MySQL计划任务是否开启"><a href="#确认MySQL计划任务是否开启" class="headerlink" title="确认MySQL计划任务是否开启"></a>确认MySQL计划任务是否开启</h1><ul><li><p>查看定时任务状态 </p><p> <code>show variables like &#39;%event_sche%&#39;</code></p></li><li><p>开启定时任务  </p><p><code>set global event_scheduler = 1</code></p></li><li><p>关闭定时任务 </p><p><code>set global event_scheduler = 1</code></p></li></ul><h1 id="创建存储过程（即：函数）"><a href="#创建存储过程（即：函数）" class="headerlink" title="创建存储过程（即：函数）"></a>创建存储过程（即：函数）</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER=<span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">PROCEDURE</span> <span class="string">`dtl_move_his`</span>( )</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/*备份4天之前的数据*/</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`dtl_his`</span> <span class="keyword">SELECT</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="string">`dtl`</span> <span class="keyword">AS</span> d </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="built_in">DATE</span>( d.create_time ) &lt;= <span class="keyword">DATE_SUB</span>( <span class="keyword">CURDATE</span>(), <span class="built_in">INTERVAL</span> + <span class="number">4</span> <span class="keyword">DAY</span> );</span><br><span class="line"><span class="comment">/*删除4天之前的数据*/</span></span><br><span class="line"><span class="keyword">DELETE</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="string">`dtl`</span> <span class="keyword">AS</span> d</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="built_in">DATE</span>( d.create_time ) &lt;= <span class="keyword">DATE_SUB</span>( <span class="keyword">CURDATE</span>(), <span class="built_in">INTERVAL</span> + <span class="number">4</span> <span class="keyword">DAY</span> );</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h1 id="创建计划任务（即：事件）"><a href="#创建计划任务（即：事件）" class="headerlink" title="创建计划任务（即：事件）"></a>创建计划任务（即：事件）</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql自定义排序</title>
      <link href="/posts/1b25/"/>
      <url>/posts/1b25/</url>
      
        <content type="html"><![CDATA[<p>在 SQL 查询中可能有时需要使用 ASC 或 DESC 或使用特殊排序字段才能完成的特定顺序. MySQL 有一个 ORDER BY FIELD 函数可以用来做这个.  </p><h1 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h1><p>本文中的示例数据使用我的示例 <a href="https://www.electrictoolbox.com/mysql-example-table/" target="_blank" rel="noopener">fruit</a> 表. 这是一个有点简单的表, 但它可以用来很好地说明这篇文章中的观点.</p><h1 id="按特定字段值排序"><a href="#按特定字段值排序" class="headerlink" title="按特定字段值排序"></a>按特定字段值排序</h1><p>fruit 表有一个 name 字段, 具有以下特定的值: 苹果(Apple), 香蕉(Banana), 橘子(Orange), 梨(Pear). 每个特定的值都有一系列的品种.</p><p>比方说, 为了论证的缘故, 我们要按香蕉, 苹果, 梨, 橘子等特定的顺序排列数据, 然后再按品种排序. 使用普通的 ORDER BY 子句不可能这样做, 因为这个字段的升序或降序排序不起作用. 我们要么需要某种形式的排序列或进行其他选择.</p><p>在 ORDER BY 子句中使用 FIELD 函数可以实现这一点. 它的工作方式是指定要排序的列, 然后按顺序排序它们的值. 例如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> fruit</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">FIELD</span>(<span class="keyword">name</span>, <span class="string">'Banana'</span>, <span class="string">'Apple'</span>, <span class="string">'Pear'</span>, <span class="string">'Orange'</span>), variety;</span><br></pre></td></tr></table></figure><p>来自示例表的结果数据如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+----------+--------+---------------------+</span><br><span class="line">| fruit_id | name   | variety             |</span><br><span class="line">+----------+--------+---------------------+</span><br><span class="line">|       11 | Banana | Burro               |</span><br><span class="line">|       12 | Banana | Cavendish           |</span><br><span class="line">|       10 | Banana | Plantain            |</span><br><span class="line">|        6 | Apple  | Cox&apos;s Orange Pippin |</span><br><span class="line">|        7 | Apple  | Granny Smith        |</span><br><span class="line">|        1 | Apple  | Red Delicious       |</span><br><span class="line">|        8 | Pear   | Anjou               |</span><br><span class="line">|        4 | Pear   | Bartlett            |</span><br><span class="line">|        2 | Pear   | Comice              |</span><br><span class="line">|        5 | Orange | Blood               |</span><br><span class="line">|        3 | Orange | Navel               |</span><br><span class="line">|        9 | Orange | Valencia            |</span><br><span class="line">+----------+--------+---------------------+</span><br></pre></td></tr></table></figure><h1 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h1><p>使用此功能时有一个小小的疑难杂症. 列中不在 FIELD 函数中的任何值将在指定的值之前或多或少随机出现. 例如, 只指定苹果和香蕉:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> fruit</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">FIELD</span>(<span class="keyword">name</span>, <span class="string">'Banana'</span>, <span class="string">'Apple'</span>) <span class="keyword">DESC</span>, variety;</span><br></pre></td></tr></table></figure><p>这导致:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+----------+--------+---------------------+</span><br><span class="line">| fruit_id | name   | variety             |</span><br><span class="line">+----------+--------+---------------------+</span><br><span class="line">|        6 | Apple  | Cox&apos;s Orange Pippin |</span><br><span class="line">|        7 | Apple  | Granny Smith        |</span><br><span class="line">|        1 | Apple  | Red Delicious       |</span><br><span class="line">|       11 | Banana | Burro               |</span><br><span class="line">|       12 | Banana | Cavendish           |</span><br><span class="line">|       10 | Banana | Plantain            |</span><br><span class="line">|        8 | Pear   | Anjou               |</span><br><span class="line">|        4 | Pear   | Bartlett            |</span><br><span class="line">|        5 | Orange | Blood               |</span><br><span class="line">|        2 | Pear   | Comice              |</span><br><span class="line">|        3 | Orange | Navel               |</span><br><span class="line">|        9 | Orange | Valencia            |</span><br><span class="line">+----------+--------+---------------------+</span><br></pre></td></tr></table></figure><h1 id="解决问题的方法"><a href="#解决问题的方法" class="headerlink" title="解决问题的方法"></a>解决问题的方法</h1><p>虽然通常只有在确切的列已知的情况下才使用此函数, 但解决方法是颠倒指定字段的顺序并按降序对其排序, 然后在同一个字段上进行第二次排序.</p><p>下面的例子, 不管它看起来如何，实际上按照香蕉, 苹果, 然后按照升序排列:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> fruit</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">FIELD</span>(<span class="keyword">name</span>, <span class="string">'Apple'</span>, <span class="string">'Banana'</span>) <span class="keyword">DESC</span>, <span class="keyword">name</span>, variety;</span><br></pre></td></tr></table></figure><p>这导致:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+----------+--------+---------------------+</span><br><span class="line">| fruit_id | name   | variety             |</span><br><span class="line">+----------+--------+---------------------+</span><br><span class="line">|       11 | Banana | Burro               |</span><br><span class="line">|       12 | Banana | Cavendish           |</span><br><span class="line">|       10 | Banana | Plantain            |</span><br><span class="line">|        6 | Apple  | Cox&apos;s Orange Pippin |</span><br><span class="line">|        7 | Apple  | Granny Smith        |</span><br><span class="line">|        1 | Apple  | Red Delicious       |</span><br><span class="line">|        5 | Orange | Blood               |</span><br><span class="line">|        3 | Orange | Navel               |</span><br><span class="line">|        9 | Orange | Valencia            |</span><br><span class="line">|        8 | Pear   | Anjou               |</span><br><span class="line">|        4 | Pear   | Bartlett            |</span><br><span class="line">|        2 | Pear   | Comice              |</span><br><span class="line">+----------+--------+---------------------+</span><br></pre></td></tr></table></figure><p>如果一组特定的行需要显示在结果集中的其他行之前, 这可能是一个有用的解决方案, 但是当使用 ASC 或 DESC 排序顺序时, 通常不会出现在第一行.</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat的HTTPS配置及HTTP自动跳转配置</title>
      <link href="/posts/11e7/"/>
      <url>/posts/11e7/</url>
      
        <content type="html"><![CDATA[<h1 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h1><h3 id="在jdk的安装目录-bin-keytool-exe下打开keytool-exe"><a href="#在jdk的安装目录-bin-keytool-exe下打开keytool-exe" class="headerlink" title="在jdk的安装目录\bin\keytool.exe下打开keytool.exe"></a>在jdk的安装目录\bin\keytool.exe下打开keytool.exe</h3><p><img src="https://i.loli.net/2020/03/10/2UqTcAbXYkwHROB.png" alt="image.png"></p><a id="more"></a><h3 id="在命令行中输入以下命令"><a href="#在命令行中输入以下命令" class="headerlink" title="在命令行中输入以下命令"></a>在命令行中输入以下命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkeypair -<span class="built_in">alias</span> <span class="string">"tomcat"</span> -keyalg <span class="string">"RSA"</span> -keystore <span class="string">"E:\tomcat.keystore"</span> -validity 36500</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/10/wKZS1N2zbmTL9Q3.png" alt="image.png"></p><p>以上命令将生产一对非对称密钥和自我签名的证书E:\tomcat.keystore</p><p>注意：“名字与姓氏”应该是域名，输成了姓名，和真正运行的时候域名不符，会出问题</p><p>这里我输入的密码是123456,  域名是以tomcat为例,  省市以广东深圳为例</p><h1 id="配置tomcat服务器"><a href="#配置tomcat服务器" class="headerlink" title="配置tomcat服务器"></a>配置tomcat服务器</h1><p>定位到tomcat服务器的安装目录, 找到conf下的server.xml文件</p><p><img src="https://i.loli.net/2020/03/10/WDCBNjSzT28IuG1.png" alt="image.png"></p><p>找到如下已经被注释的代码：</p><p><img src="https://i.loli.net/2020/03/10/frMPqgDHKWVsybd.png" alt="image.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true"   maxThreads="150" scheme="https" secure="true"     clientAuth="false" sslProtocol="TLS" /&gt;   </span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure><p>去掉注释，修改为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"443"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">SSLEnabled</span>=<span class="string">"true"</span>  <span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">scheme</span>=<span class="string">"https"</span> <span class="attr">secure</span>=<span class="string">"true"</span> <span class="attr">clientAuth</span>=<span class="string">"false"</span> <span class="attr">sslProtocol</span>=<span class="string">"TLS"</span> <span class="attr">keystoreFile</span>=<span class="string">"E:\tomcat.keystore"</span>            <span class="attr">keystorePass</span>=<span class="string">"123456"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTTP自动跳转配置"><a href="#HTTP自动跳转配置" class="headerlink" title="HTTP自动跳转配置"></a>HTTP自动跳转配置</h1><p>配置Tomcat，打开$CATALINA_HOME/conf/server.xml，修改如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"80"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">redirectPort</span>=<span class="string">"443"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   &lt;Connector port="8009" enableLookups="false" protocol="AJP/1.3" redirectPort="8443" /&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> <span class="attr">enableLookups</span>=<span class="string">"false"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"443"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>在tomcat\conf\web.xml中的后面加上这样一段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">login-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Authorization setting for SSL --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">auth-method</span>&gt;</span>CLIENT-CERT<span class="tag">&lt;/<span class="name">auth-method</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">realm-name</span>&gt;</span>Client Cert Users-only Area<span class="tag">&lt;/<span class="name">realm-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">login-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security-constraint</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Authorization setting for SSL --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">web-resource-collection</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">web-resource-name</span> &gt;</span>SSL<span class="tag">&lt;/<span class="name">web-resource-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user-data-constraint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transport-guarantee</span>&gt;</span>CONFIDENTIAL<span class="tag">&lt;/<span class="name">transport-guarantee</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user-data-constraint</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">security-constraint</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/10/gpSTn7do5COkYcL.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专科专病上线步骤</title>
      <link href="/posts/202e/"/>
      <url>/posts/202e/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      
      
      <categories>
          
          <category> Jh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-03</title>
      <link href="/posts/ebe4/"/>
      <url>/posts/ebe4/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何防止网站短信验证码被攻击</title>
      <link href="/posts/3503/"/>
      <url>/posts/3503/</url>
      
        <content type="html"><![CDATA[<p>现在手机已经成为了人们必不可少的东西，手机号几乎成了我们身份ID，当前在互联网各大网站、APP等注册几乎都是通过手机号验证短信来完成注册，短信验证码发送一般我们都调用的第三方接口，当然这个是收费的。一般我们在调用第三方短信发送接口时，如果防御没做好，很有可能就成为了黑客攻击的点，可能会在几分钟内就能把你几条短信给耗光，所以做好短信验证码防御是十分重要的，下面我们分享几个方法，本人也是结合了其它网友的方法再加上自己的实践做个完善和补充，希望能帮到需要的人。</p><h3 id="（1）单个手机号发送次数限制"><a href="#（1）单个手机号发送次数限制" class="headerlink" title="（1）单个手机号发送次数限制"></a><strong>（1）单个手机号发送次数限制</strong></h3><p>比喻每个手机号一天最多只允许收到5条等，这个一般不需要自己在程序里设置，因为一般短信接口商那边可以设置，只需跟客服说一下就可以实现。当然一般黑客攻击其实是用了成千上万个手机号的，重复一个手机号去攻击很少。</p><h3 id="（2）发送时间间隔限制"><a href="#（2）发送时间间隔限制" class="headerlink" title="（2）发送时间间隔限制"></a><strong>（2）发送时间间隔限制</strong></h3><p>比喻设置60秒或120秒后可再发送，这里注意一点，这个限制要做两面，不仅前端html上对按钮进行失效设置，同时后端也需要验证这个时间限制间隔，只做前端只能防小白。</p><h3 id="（3）增加其它字段的验证"><a href="#（3）增加其它字段的验证" class="headerlink" title="（3）增加其它字段的验证"></a><strong>（3）增加其它字段的验证</strong></h3><p>在发送手机验证码前，先让用户把如用户名、邮箱、密码等字段填写完整并验证可行性，再允许用户发送手机验证码。</p><h3 id="（4）增加图形验证码"><a href="#（4）增加图形验证码" class="headerlink" title="（4）增加图形验证码"></a><strong>（4）增加图形验证码</strong></h3><p>图形验证码需要保存在Session里面，并且使用完了一个图形验证码后需立即让这个图形验证码失效，防止黑客一直用一个图形验证码通过。</p><h3 id="（5）同一个IP限制发送次数"><a href="#（5）同一个IP限制发送次数" class="headerlink" title="（5）同一个IP限制发送次数"></a><strong>（5）同一个IP限制发送次数</strong></h3><p>这里需要开发者先能获取到客户端的真实IP地址，在我的博客上一篇文章《<a href="https://www.cnblogs.com/sky6699/p/11320260.html" target="_blank" rel="noopener">JS和C#.NET获取客户端IP</a>》中有说到如需获取客户端IP的方法。这个限制只能产生一定的限制，作用有限，因为黑客往往都是切换IP的</p><h3 id="（6）判断用户发送验证码的页面入口是否是你的注册页面"><a href="#（6）判断用户发送验证码的页面入口是否是你的注册页面" class="headerlink" title="（6）判断用户发送验证码的页面入口是否是你的注册页面"></a><strong>（6）判断用户发送验证码的页面入口是否是你的注册页面</strong></h3><p>这一点很重要，黑客在攻击的时候都是直接调用你发送验证的那个中间页面，可能直接跳过了你的注册页面入口，他会按照你的方法拼好要传输的参数字段直接去调用方法，这个时候我只要在后台判断一下用户进来的入口是否是注册页面的地址就行。迫使黑客通过注册页面入口进行入侵，但是这显然加大了攻击的成本。</p><h3 id="（7）记录下验证码发送的日志，根据日志分析制定防范方法"><a href="#（7）记录下验证码发送的日志，根据日志分析制定防范方法" class="headerlink" title="（7）记录下验证码发送的日志，根据日志分析制定防范方法"></a><strong>（7）记录下验证码发送的日志，根据日志分析制定防范方法</strong></h3><p>如果上面6点做完还是发现攻击存在，那么就需要根据记录下的验证码发送日志分析来制定相应的防范措施了，例如下面就是我截取的一段日志：</p><p><img src="https://img2018.cnblogs.com/blog/262571/201909/262571-20190924145434147-1273921116.png" alt></p><p>这是一段大概3分钟内攻击日志的截图，大家可以看一下手机栏和IP栏，基本IP是一直在换，所以很难去限制，但是仔细分析手机号，发现手机号前6位甚至是前7位重复的概率很高，那么这时候就要对手机号段（前6或前7）来制定防范方案了，根据这些，我这里是做的两点供参考：</p><p><strong>a.同一个手机号码段（手机号前6位）120秒内最多发送一次</strong></p><p><strong>b.同一个号码段（手机号前6位）当天最多发送10条</strong></p><p><strong>c.同一个号码段</strong>（手机号前6位）当天发送3次以上且还没有注册的话，不再发送。<em>**</em></p><p><strong>一般情况下，我们只需要做到以上几点基本上可以有效防止短信验证码的攻击。</strong></p><p>综上，所谓“道高一尺魔高一丈”，我们很难完全限制住黑客的入侵攻击，我们只能想办法去增加黑客的攻击成本，迫使他们放弃攻击。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java实现验证码的产生</title>
      <link href="/posts/d2b/"/>
      <url>/posts/d2b/</url>
      
        <content type="html"><![CDATA[<p>大家都知道为了防止我们的网站被有些人和黑客恶意攻击，比如我们网站的注册页面，如果我们在用户注册的时候不加上一个验证码框的话，别人就可以写一个脚本对你的网站进行恶意的注册，比如每分钟对你的网站进行n次的注册，那么你的网站就会被攻击而崩溃。当我们增加了验证码之后，别人再写脚本的时候就必须先识别你的验证码，而要识别图片验证码中的内容，却不是那么的容易，这样就能够有效的防止我们的网站被恶意的注册攻击。废话不多说，直接上代码。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.joinhealth.pneumonia.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.RenderedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> width = <span class="number">90</span>;<span class="comment">// 定义图片的width</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> height = <span class="number">20</span>;<span class="comment">// 定义图片的height</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> codeCount = <span class="number">4</span>;<span class="comment">// 定义图片上显示验证码的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> xx = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> fontHeight = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> codeY = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span>[] codeSequence = &#123;<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>,</span><br><span class="line">            <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>, <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 27      * 生成一个map集合</span></span><br><span class="line"><span class="comment">     * 28      * code为生成的验证码</span></span><br><span class="line"><span class="comment">     * 29      * codePic为生成的验证码BufferedImage对象</span></span><br><span class="line"><span class="comment">     * 30      * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * 31</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">generateCodeAndPic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义图像buffer</span></span><br><span class="line">        BufferedImage buffImg = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="comment">// Graphics2D gd = buffImg.createGraphics();</span></span><br><span class="line">        <span class="comment">// Graphics2D gd = (Graphics2D) buffImg.getGraphics();</span></span><br><span class="line">        Graphics gd = buffImg.getGraphics();</span><br><span class="line">        <span class="comment">// 创建一个随机数生成器类</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">// 将图像填充为白色</span></span><br><span class="line">        gd.setColor(Color.WHITE);</span><br><span class="line">        gd.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建字体，字体的大小应该根据图片的高度来定。</span></span><br><span class="line">        Font font = <span class="keyword">new</span> Font(<span class="string">"Fixedsys"</span>, Font.BOLD, fontHeight);</span><br><span class="line">        <span class="comment">// 设置字体。</span></span><br><span class="line">        gd.setFont(font);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 画边框。</span></span><br><span class="line">        gd.setColor(Color.BLACK);</span><br><span class="line">        gd.drawRect(<span class="number">0</span>, <span class="number">0</span>, width - <span class="number">1</span>, height - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 随机产生40条干扰线，使图象中的认证码不易被其它程序探测到。</span></span><br><span class="line">        gd.setColor(Color.BLACK);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = random.nextInt(width);</span><br><span class="line">            <span class="keyword">int</span> y = random.nextInt(height);</span><br><span class="line">            <span class="keyword">int</span> xl = random.nextInt(<span class="number">12</span>);</span><br><span class="line">            <span class="keyword">int</span> yl = random.nextInt(<span class="number">12</span>);</span><br><span class="line">            gd.drawLine(x, y, x + xl, y + yl);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// randomCode用于保存随机产生的验证码，以便用户登录后进行验证。</span></span><br><span class="line">        StringBuffer randomCode = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">int</span> red = <span class="number">0</span>, green = <span class="number">0</span>, blue = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 随机产生codeCount数字的验证码。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; codeCount; i++) &#123;</span><br><span class="line">            <span class="comment">// 得到随机产生的验证码数字。</span></span><br><span class="line">            String code = String.valueOf(codeSequence[random.nextInt(<span class="number">36</span>)]);</span><br><span class="line">            <span class="comment">// 产生随机的颜色分量来构造颜色值，这样输出的每位数字的颜色值都将不同。</span></span><br><span class="line">            red = random.nextInt(<span class="number">255</span>);</span><br><span class="line">            green = random.nextInt(<span class="number">255</span>);</span><br><span class="line">            blue = random.nextInt(<span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 用随机产生的颜色将验证码绘制到图像中。</span></span><br><span class="line">            gd.setColor(<span class="keyword">new</span> Color(red, green, blue));</span><br><span class="line">            gd.drawString(code, (i + <span class="number">1</span>) * xx, codeY);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将产生的四个随机数组合在一起。</span></span><br><span class="line">            randomCode.append(code);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        <span class="comment">//存放验证码</span></span><br><span class="line">        map.put(<span class="string">"code"</span>, randomCode);</span><br><span class="line">        <span class="comment">//存放生成的验证码BufferedImage对象</span></span><br><span class="line">        map.put(<span class="string">"codePic"</span>, buffImg);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建文件输出流对象</span></span><br><span class="line">        OutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">"/Users/linjian/Downloads/"</span> + System.currentTimeMillis() + <span class="string">".jpg"</span>);</span><br><span class="line">        Map&lt;String, Object&gt; map = CodeUtil.generateCodeAndPic();</span><br><span class="line">        ImageIO.write((RenderedImage) map.get(<span class="string">"codePic"</span>), <span class="string">"jpeg"</span>, out);</span><br><span class="line">        System.out.println(<span class="string">"验证码的值为："</span> + map.get(<span class="string">"code"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven dependency中scope与type的用法</title>
      <link href="/posts/98ff/"/>
      <url>/posts/98ff/</url>
      
        <content type="html"><![CDATA[<h1 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h1><p>scope定义了类包在项目的使用阶段。项目阶段包括： 编译，运行，测试和发布。</p><table><thead><tr><th>scope</th><th>描述</th></tr></thead><tbody><tr><td>compile</td><td>默认scope为compile，表示为当前依赖参与项目的编译、测试和运行阶段，属于强依赖。打包之时，会达到包里去。</td></tr><tr><td>test</td><td>该依赖仅仅参与测试相关的内容，包括测试用例的编译和执行，比如定性的Junit。</td></tr><tr><td>runtime</td><td>依赖仅参与运行周期中的使用。一般这种类库都是接口与实现相分离的类库，比如JDBC类库，在编译之时仅依赖相关的接口，在具体的运行之时，才需要具体的mysql、oracle等等数据的驱动程序。<br>此类的驱动都是为runtime的类库。</td></tr><tr><td>provided</td><td>该依赖在打包过程中，不需要打进去，这个由运行的环境来提供，比如tomcat或者基础类库等等，事实上，该依赖可以参与编译、测试和运行等周期，与compile等同。区别在于打包阶段进行了exclude操作。</td></tr><tr><td>system</td><td>使用上与provided相同，不同之处在于该依赖不从maven仓库中提取，而是从本地文件系统中提取，其会参照systemPath的属性进行提取依赖。</td></tr><tr><td>import</td><td>这个是maven2.0.9版本后出的属性，import只能在dependencyManagement的中使用，能解决maven单继承问题，import依赖关系实际上并不参与限制依赖关系的传递性。</td></tr></tbody></table><h1 id="type"><a href="#type" class="headerlink" title="type"></a>type</h1><p>引入某一个依赖时，必须指定type，这是因为用于匹配dependency引用和dependencyManagement部分的最小信息集实际上是{groupId，artifactId，type，classifier}。在很多情况下，这些依赖关系将引用没有classifier的jar依赖。这允许我们将标识设置为{groupId，artifactId}，因为type的默认值是jar，并且默认classifier为null。</p><p>type的值一般有jar、war、pom等，声明引入的依赖的类型。</p><p>dependency中type默认为jar即引入一个特定的jar包。那么为什么还会有type为pom呢?当我们需要引入很多jar包的时候会导致pom.xml过大，我们可以想到的一种解决方案是定义一个父项目，但是父项目只有一个，也有可能导致父项目的pom.xml文件过大。这个时候我们引进来一个type为pom，意味着我们可以将所有的jar包打包成一个pom，然后我们依赖了pom，即可以下载下来所有依赖的jar包</p>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo升级到2.7.5</title>
      <link href="/posts/832a/"/>
      <url>/posts/832a/</url>
      
        <content type="html"><![CDATA[<h1 id="Dubbo从2-5-3升级到2-7-5"><a href="#Dubbo从2-5-3升级到2-7-5" class="headerlink" title="Dubbo从2.5.3升级到2.7.5"></a>Dubbo从2.5.3升级到2.7.5</h1><p>因为Apache Dubbo框架存在远程代码执行高危漏洞，所以需要升级版本到2.7.5，在升级过程中遇到问题，特此记录。</p><h1 id="依赖修改"><a href="#依赖修改" class="headerlink" title="依赖修改"></a>依赖修改</h1><p>原来依赖为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.5.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.7.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="import-包修改"><a href="#import-包修改" class="headerlink" title="import 包修改"></a>import 包修改</h1><p>如果有使用dubbo包中的一些工具类：StringUtils、CollectionUtils等，需要修改import包路径</p><h1 id="启动报错"><a href="#启动报错" class="headerlink" title="启动报错"></a>启动报错</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NoClassDefFoundError: org/apache/curator/RetryPolicy</span><br></pre></td></tr></table></figure><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dubbo-dependencies-zookeeper&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;dubbo.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="xml配置修改"><a href="#xml配置修改" class="headerlink" title="xml配置修改"></a>xml配置修改</h1><p>原来</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:dubbo=&quot;http://dubbo.apache.org/schema/dubbo&quot;</span><br><span class="line">       xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-02</title>
      <link href="/posts/2b25/"/>
      <url>/posts/2b25/</url>
      
        <content type="html"><![CDATA[<h1 id="2-7"><a href="#2-7" class="headerlink" title="2.7"></a>2.7</h1><ol><li><p>浙二新冠风险人群追踪平台微信对接开发+接口文档产出</p></li><li><p>浙二新冠风险人群追踪查询接口定义，任务分配（金翔、张成汉）</p></li><li><p>余杭第一web.xml泄漏处理 – location ~ ^/WEB-INF/* { deny all; }</p></li></ol><h1 id="2-8"><a href="#2-8" class="headerlink" title="2.8"></a>2.8</h1><ol><li><p>例会（10点）</p><ul><li><p>迭代（陈孝伟、毛子杰（华西二院部分））</p></li><li><p>新冠（吴森、汪佳美）</p></li><li><p>专科随访（高翔、金翔）– 已完成</p></li><li><p>新冠医院开通、现场问题处理–高翔 – 持续</p></li><li><p>新冠查询接口（金翔、张成汉）– 对接测试</p></li><li><p>浙二新冠微信对接（林剑、张琳）– 后台已完成，预计今天完成</p></li></ul></li><li><p>浙二新冠风险人群追踪平台微信对接上线</p></li><li><p>南京中医院新冠风险人群同步患者管理分组</p></li></ol><h1 id="2-9"><a href="#2-9" class="headerlink" title="2.9"></a>2.9</h1><ol><li>新冠患者、评估、打卡查询接口发布</li></ol><h1 id="2-10"><a href="#2-10" class="headerlink" title="2.10"></a>2.10</h1><ol><li><p>后端2.10例会</p><ul><li><p>新冠查询接口文档–金翔</p></li><li><p>新冠1.6 – 金翔、吴森</p></li><li><p>2.3.1b27对接，2.3.2b02 – 毛子杰</p></li><li><p>邵逸夫日间手术检查推送，随访计划excel导入 –  陈孝伟</p></li><li><p>邵逸夫日间手术检查报告接口、门诊接口加字段 、丽水宣教微信特殊处理– 徐贤</p></li><li><p>现场问题，专科随访，账号开通 – 高翔</p></li><li><p>接口任务 – 张成汉、徐贤</p></li></ul></li><li><p>齐齐哈尔医学院附属第一医院、梅里斯区人民医院、上海新华医院 新冠患者管理同步</p></li><li><p>邵逸夫随访手动添加失败（患者管理来源，引用云端规则异常）</p></li></ol><h1 id="2-11"><a href="#2-11" class="headerlink" title="2.11"></a>2.11</h1><ol><li><p>后端2.11例会</p><ul><li><p>新冠查询接口文档–金翔 ( 已完成)</p></li><li><p>新冠1.6 – 金翔、吴森 （后台差不多都完成，剩埋点）</p></li><li><p>2.3.1b27提测，2.3.2b01 对接 – 毛子杰</p></li><li><p>邵逸夫日间手术检查推送，其他已完成，和前端对接 – 陈孝伟</p></li><li><p>邵逸夫日间手术检查报告接口 – 徐贤</p></li><li><p>现场问题，专科随访，账号开通 – 高翔</p></li><li><p>接口任务 – 张成汉、徐贤</p></li></ul></li><li><p>2.3.2b02部分提测</p></li><li><p>广妇儿新建宣教加载科室、疾病问题（医院网络原因）– 已解决</p></li><li><p>新冠新账号注册异常（验证码校验报错）– 已解决</p></li></ol><h1 id="2-12"><a href="#2-12" class="headerlink" title="2.12"></a>2.12</h1><ol><li><p>后端2.12例会</p><p>2.11</p><ul><li><p>新冠打卡逻辑上线 – 吴森</p></li><li><p>邵逸夫日间手术发送 – 陈孝伟</p></li><li><p>saas环境账号开通 – 高翔</p></li><li><p>新冠1.6  –  金翔</p></li><li><p>接口任务  –  徐贤、张成汉</p></li></ul><p>2.12</p><ul><li><p>新冠首页数据对接、1.6补充宣讲内容 –吴森</p></li><li><p>2.3.2b01 4个任务对接  –  陈孝伟</p></li><li><p>2.5.0 优化内容处理  –  高翔</p></li><li><p>新冠1.6 补充宣讲内容 – 金翔</p></li><li><p>接口任务 – 徐贤、张成汉</p></li></ul></li><li><p>新冠工程重新搭建</p></li></ol><h1 id="2-13"><a href="#2-13" class="headerlink" title="2.13"></a>2.13</h1><ol><li><p>后端2.13例会</p><p>2.12</p><ul><li><p>首页评估数字，风险评估建议已完成 – 吴森</p></li><li><p>重庆永川手术接口，东莞八院接口问题 – 张成汉</p></li><li><p>2.3.2b01对接 – 陈孝伟（excel导入前端对接还有点问题）</p></li><li><p>2.3.1b01对接 – 毛子杰（除分娩名单外已完成）</p></li><li><p>新冠1.6对接完成 – 金翔 （除日报外）</p></li><li><p>省儿保新冠接口调整、cdr配合、邵逸夫检查接口修改 – 徐贤</p></li><li><p>迭代专科测试问题，现场问题处理，saas账号开通  – 高翔</p></li></ul><p>2.13</p><ul><li><p>当前状态 – 吴森</p></li><li><p>华西二院接口（分娩名单） – 张成汉</p></li><li><p>excel导入配合调试 – 陈孝伟</p></li><li><p>2.3.1b01对接 （分娩名单）– 毛子杰</p></li><li><p>新冠1.6日报 – 金翔</p></li><li><p>新附一新冠接口，南阳第一微信接口 – 徐贤</p></li><li><p>2.5.0优化，现场问题处理，saas账号开通 –  高翔</p></li></ul></li><li><p>新冠代码迁移</p></li><li><p>2.3.2b02宣讲</p></li><li><p>上海瑞金高干需求确认</p></li><li><p>新附一在院宣教统计问题（出院人次取的入院时间在搜索范围内的出院人数，发送人次取的入院时间在搜索范围内的发送记录，两个数据均有可能变，会影响医院绩效考核）</p></li></ol><h1 id="2-14"><a href="#2-14" class="headerlink" title="2.14"></a>2.14</h1><ol><li><p>后端2.14例会</p><p>2.13</p><ul><li><p>2.3.1b01迭代全部提测 – 陈孝伟、毛子杰</p></li><li><p>新冠1.6全部提测 – 吴森、金翔</p></li><li><p>华西二院接口（分娩名单）已发包 –  张成汉</p></li><li><p>2.5优化后台代码完成，现场问题处理，saas环境医院开通（4家） – 高翔</p></li><li><p>新附一新冠接口  – 徐贤</p></li></ul><p>2.14</p><ul><li><p>2.3.1b02迭代 – 陈孝伟、毛子杰</p></li><li><p>现场问题处理，saas环境医院开通 – 高翔</p></li><li><p>配合测试改bug – 吴森、金翔</p></li><li><p>2.3.1b02迭代开始开发，今天给接口文档，2.3.1b01配合测试改bug – 陈孝伟、毛子杰</p></li><li><p>测试环境邵逸夫配合测试造数据 – 徐贤</p></li></ul></li><li><p>绩效考核指标制定</p></li><li><p>北京广安门二维码表单问题处理</p></li><li><p>西安国际投诉表扬链接处理</p></li></ol><h1 id="2-15"><a href="#2-15" class="headerlink" title="2.15"></a>2.15</h1><ol><li><p>后端2.15例会</p><p>2.14</p><ul><li><p>2.3.2b02接口文档  –  陈孝伟、毛子杰</p></li><li><p>1.6新冠首页改版调整接口，新冠测试bug修改 –  吴森</p></li><li><p>新冠测试bug修改 – 金翔</p></li><li><p>江苏人民病理检查上线，省妇保接口问题处理，测试环境邵逸夫配合测试造数据 – 徐贤</p></li><li><p>返杭 –  张成汉</p></li><li><p>saas医院开通、现场问题处理  –  高翔</p></li></ul><p>2.15</p><ul><li><p>2.3.2b02开发，配合测试修改b01bug – 毛子杰5个，陈孝伟6个</p></li><li><p>新冠测试bug修改 – 吴森、金翔</p></li><li><p>西安国际预约挂号，南阳第一的微信 – 徐贤</p></li><li><p>上海瑞金高干接口 –  张成汉</p></li><li><p>saas医院开通、现场问题处理，专科随访规则 – 高翔</p></li></ul></li><li><p>新冠1.6上线</p></li><li><p>新冠开通医院，登记总数、每日新增登记人数统计</p></li></ol><h1 id="2-17"><a href="#2-17" class="headerlink" title="2.17"></a>2.17</h1><ol><li><p>后端2.17例会</p><p>2.15</p><ul><li><p>2.3.2b02(2/4) – 陈孝伟</p></li><li><p>2.3.2b02(2/5) – 毛子杰</p></li><li><p>新冠1.6配合测试、上线  – 金翔、吴森</p></li><li><p>接口任务 – 徐贤、张成汉</p></li></ul><p>2.17</p><ul><li><p>新冠1.7宣讲+开发 – 金翔、吴森</p></li><li><p>saas医院开通、现场问题处理，专科随访规则（暂时不开发） – 高翔</p></li><li><p>2.3.2b02剩下2个需求开发– 陈孝伟</p></li><li><p>2.3.2b02剩下3个需求开发– 毛子杰</p></li><li><p>接口任务 – 徐贤、张成汉</p></li></ul></li><li><p>saas新冠同步患者管理维护</p></li><li><p>saas医院字典表维护</p></li><li><p>新冠1.7宣讲</p></li></ol><h1 id="2-18"><a href="#2-18" class="headerlink" title="2.18"></a>2.18</h1><ol><li><p>后端2.18例会</p><p>2.17</p><ul><li><p>新冠1.7（除统计外均已完成） – 金翔</p></li><li><p>新冠1.7后台开发完成  –  吴森</p></li><li><p>2.3.2b02（3/4） – 陈孝伟</p></li><li><p>2.3.2b02（4/5）– 毛子杰</p></li><li><p>saas医院开通、现场问题处理 – 高翔</p></li><li><p>接口任务 – 徐贤、张成汉</p></li></ul><p>2.18</p><ul><li><p>新冠1.7统计 – 金翔</p></li><li><p>新冠1.7对接  –  吴森</p></li><li><p>2.3.2b02后台开发完成 – 陈孝伟、毛子杰</p></li><li><p>专科随访规则设计、开发 – 高翔</p></li><li><p>接口任务 – 徐贤、张成汉</p></li></ul></li><li><p>专科随访规则复诊任务实现</p></li></ol><h1 id="2-19"><a href="#2-19" class="headerlink" title="2.19"></a>2.19</h1><ol><li><p>接口2月份任务规划安排</p></li><li><p>2月份计划任务跟踪（新冠、迭代进度正常，专科转病医学部资料未提供给产品，会影响进度）</p></li><li><p>重庆市垫江县人民医院 患者管理同步（已完成）</p></li><li><p>zookeeper 版本升级 2.5.3 –&gt; 2.7.5（已打包成功，程序跑不起来）</p></li></ol><h1 id="2-20"><a href="#2-20" class="headerlink" title="2.20"></a>2.20</h1><ol><li>zookeeper 版本升级 2.5.3 –&gt; 2.7.5（已完成）</li><li>国科大AI满意度方案讨论（敲定方案：表单拆分成两个，第一个表单用短信调查用户是否满意，第二个表单用ai调查用户不满意的具体内容）</li><li>海军军医大附第一附属院部署方案讨论（医院内网隔离）</li><li>2.3.2b03宣讲</li></ol><h1 id="2-21"><a href="#2-21" class="headerlink" title="2.21"></a>2.21</h1><ol><li><p>身份证识别api</p><ul><li><p>百度智能云 免费 500次/天  <a href="https://cloud.baidu.com/doc/OCR/s/fk3h7xune" target="_blank" rel="noopener">https://cloud.baidu.com/doc/OCR/s/fk3h7xune</a></p></li><li><p>腾讯云 免费 1000次/月 <a href="https://cloud.tencent.com/document/product/866/17619" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/866/17619</a></p></li><li><p>讯飞开放平台 免费  3000有效期90天 <a href="https://www.xfyun.cn/services/idCardRecg?target=price" target="_blank" rel="noopener">https://www.xfyun.cn/services/idCardRecg?target=price</a></p></li></ul></li><li><p>saas重庆市长寿区人民医院 新冠风险人群自动入组（已完成）</p></li><li><p>迭代版本增加接口（esb添加患者入计划）– 上海红房子（已发包）</p></li><li><p>静脉曲张专科统计宣讲</p></li></ol><h1 id="2-24"><a href="#2-24" class="headerlink" title="2.24"></a>2.24</h1><ol><li><p>二维码缓存方案确定，画流程图（已完成）</p></li><li><p>广妇儿1型糖尿病上线前期准备工作 – CDR部署（黄潇枫、张成汉）</p></li><li><p>邵逸夫智慧医院评级自助满意度技术方案 – 接口文档（已完成）</p></li><li><p>重庆大足医院 蓝牛医护APP发送宣教问题：微信收不到，APP上显示记录不对（跟踪处理中）</p></li><li><p>厦门心血管复诊管理需求讨论（明确需要改造的功能点）</p></li><li><p>广妇儿内网编辑宣教打不开（应用服务器nginx没开）– 已处理</p></li></ol><h1 id="2-25"><a href="#2-25" class="headerlink" title="2.25"></a>2.25</h1><ol><li><p>重庆大足医院 蓝牛医护APP发送宣教问题：微信收不到，APP上显示记录不对（已处理）</p></li><li><p>专利申请资料查询</p></li><li><p>厦门心血管满意度统计不包含二维码问题，bug（已处理）</p></li><li><p>浙二新冠筛查表个性化定制方案讨论及工作量评估</p></li></ol><h1 id="2-26"><a href="#2-26" class="headerlink" title="2.26"></a>2.26</h1><ol><li><p>检索同行已经授权的专利，看专利的内容、声明的权益（未完成）</p></li><li><p>思考专利技术方向（未完成）</p></li><li><p>丽水中医院2.5.0版本随访计划列表卡（前端问题）</p></li><li><p>广安门二维码表单信息录入中看不到（院内门诊数据大部分无手机号导致）</p></li></ol><h1 id="2-27"><a href="#2-27" class="headerlink" title="2.27"></a>2.27</h1><ol><li><p>广安门二维码随访增加身份证（已发补丁包，自测正常，待明天观察）</p></li><li><p>2.3.2b04宣讲</p></li><li><p>广妇儿需求沟通（需要修改接口）</p></li></ol><h1 id="2-28"><a href="#2-28" class="headerlink" title="2.28"></a>2.28</h1><ol><li>专科合并迭代版本，准备广妇儿上线使用</li><li>南京鼓楼随访小结、表单自动填充合并迭代分支</li><li>AI辅助会议</li><li>浙二钉钉随访管理问题处理</li></ol><h1 id="2-29"><a href="#2-29" class="headerlink" title="2.29"></a>2.29</h1><ol><li><p>专科上线流程整理，广妇儿1型糖尿病上线准备</p></li><li><p>检索同行已经授权的专利，看专利的内容、声明的权益</p></li><li><p>思考专利技术方向</p></li></ol><p>2月份验收5家：临安卫健局、瑞金医院、厦门心血管、浙大四院、梅城卫生院；<br>视疫情验收3家：临安卫健局、瑞金医院、梅城卫生院 评审：月底看验收报告 曹沈栋<br>21 项目二部 2月计划验收5家：东莞八院-张庆忠、重庆永川-张文平、海南现代妇婴/妇儿-宋呈表、南京鼓楼-赵田宇<br>视疫情验收4家</p>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新冠风险人群AI追踪平台查询接口</title>
      <link href="/posts/ab45/"/>
      <url>/posts/ab45/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> Jh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新冠感染评估表结构设计</title>
      <link href="/posts/e611/"/>
      <url>/posts/e611/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> jh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRT跳板机配置</title>
      <link href="/posts/6c99/"/>
      <url>/posts/6c99/</url>
      
        <content type="html"><![CDATA[<p>记录下如何通过跳板机登陆服务器</p><p><img src="https://i.loli.net/2020/09/03/1fIGauN4r5zUodm.png" alt="image-20200903083633383"></p><p><img src="/Users/linjian/Library/Application Support/typora-user-images/image-20200903083557353.png" alt="image-20200903083557353"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql Delete</title>
      <link href="/posts/507c/"/>
      <url>/posts/507c/</url>
      
        <content type="html"><![CDATA[<h1 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h1><p>delete使用别名的时候，要在delete和from间加上删除表的别名，这样才是正确的写法。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> p,r <span class="keyword">from</span> t_satisfaction_followup_patients p,t_hospital_followup_record r </span><br><span class="line"><span class="keyword">where</span> p.plan_id = <span class="string">'7421aed79a77494d8b2f54c33f62dd2c'</span></span><br><span class="line"><span class="keyword">AND</span> r.plan_id = <span class="string">'7421aed79a77494d8b2f54c33f62dd2c'</span></span><br><span class="line"><span class="keyword">AND</span> r.submit_status = <span class="number">0</span></span><br><span class="line"><span class="keyword">AND</span> p.id = r.relation_id</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="多表删除"><a href="#多表删除" class="headerlink" title="多表删除"></a>多表删除</h1><p>您可以在<a href="https://dev.mysql.com/doc/refman/5.7/en/delete.html" title="13.2.2 DELETE语句" target="_blank" rel="noopener"><code>DELETE</code></a>语句中指定多个表，以 根据<code>WHERE</code>子句中的条件从一个或多个表中删除行 。不能使用<code>ORDER BY</code>或<code>LIMIT</code>在多台 <code>DELETE</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> t1, t2 <span class="keyword">FROM</span> t1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t2 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t3</span><br><span class="line"><span class="keyword">WHERE</span> t1.id=t2.id <span class="keyword">AND</span> t2.id=t3.id;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> t1, t2 <span class="keyword">FROM</span> t1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t2 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t3</span><br><span class="line"><span class="keyword">WHERE</span> t1.id=t2.id <span class="keyword">AND</span> t2.id=t3.id;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> t1 <span class="keyword">FROM</span> t1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t2 <span class="keyword">ON</span> t1.id=t2.id <span class="keyword">WHERE</span> t2.id <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>celina-page院内配置</title>
      <link href="/posts/a250/"/>
      <url>/posts/a250/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      
      
      <categories>
          
          <category> Jh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电话盒子问题</title>
      <link href="/posts/5fc4/"/>
      <url>/posts/5fc4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Idea的流调试器</title>
      <link href="/posts/9793/"/>
      <url>/posts/9793/</url>
      
        <content type="html"><![CDATA[<p>Java 8引入的流（Stream）是我最喜欢的功能，没有之一，它极大地提高了数据处理的效率，几乎等于延长了程序员的生命。不过，说起JB官方为IDEA开发的<a href="https://link.zhihu.com/?target=https%3A//plugins.jetbrains.com/plugin/9696-java-stream-debugger" target="_blank" rel="noopener">流调试器（Stream Debugger）</a>插件，就鲜为人知了。流调试器能够让你的程序中的流以一种极端精美的方式可视化地展现出来——它是第一个让我惊叹“卧槽原来还可以这么玩”的IDEA插件。</p><p>它的安装方法和其他IDEA插件一样，在Plugin仓库中搜索<code>Stream Debugger</code>即可（最新版已经把这个插件内置，无需安装了）。</p><a id="more"></a><p><img src="https://i.loli.net/2020/07/16/lda3eB95rXqTEYF.jpg" alt="lda3eB95rXqTEYF"></p><p>在安装之后，调试器的工具栏上最右侧会出现一个小图标，点击它，相信我，你一定会被震撼到的。</p><p>例如，对于下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList(<span class="string">"How are you"</span>, <span class="string">"Hello"</span>, <span class="string">"Tom"</span>, <span class="string">"Hi"</span>, <span class="string">"Hell"</span>, <span class="string">"Jerry"</span>)</span><br><span class="line">                .stream()</span><br><span class="line">                .filter(s -&gt; s.startsWith(<span class="string">"H"</span>))</span><br><span class="line">                .map(s -&gt; s.substring(<span class="number">2</span>))</span><br><span class="line">                .distinct()</span><br><span class="line">                .sorted()</span><br><span class="line">                .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/07/16/q74GCy85mQEiXIc.gif" alt="q74GCy85mQEiXIc"></p>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提取手机号</title>
      <link href="/posts/c71f/"/>
      <url>/posts/c71f/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19aXhjUQ+/eaCJr5vi2m+xjQI6RpTmim/T2mCrcyYU2pXm1IwnkOMDBV4QBfFYJISkJNEw7T7hj1cuRoXowlmPO2HYSaa8eGwhC0hYF65jgMhEtemlfL3YZ+2Uj7ZbyChyVlE1uGfD2nxi1AG2e+gi7VNi3MMvio852jsE8DPKYmHuh0AAWyXCvWmM8MEPF/aLcGy6BreEY3hoXet6S+Bpy6KGDxnnmhiYMpQCISioH8VmeHlQLd/byMegHtxEGhLq77DIix3UxegIjpVScTjwZXmQOHVUcAWRND2CFeDKy+t8HaqXQX0s6Yys37wqzROexcKFZBqMEIxo9jlYsUN4qPpixRHDHRJFutt+z9zGDk8d5taGlzxqW1Wzvx8exi7C/nl5GcJEdbwYxo5zrQXJVMCmjcpu4vlUfmF4UG0n5d2CaaIKrg/6ZpZ9DCjul2MPvAxJ6WFEp8koQRtbyP3Y5qoq3DzpYbrOz5j9X24trsa0nqzw6ZpYrkgZJWWtSjKt6e2fRr/xQh9P938srLP5hEN2V+JmcE0ZOiwFb9sh7KRIGj6e9O5tISZxnTss8JAFA44sjYNIO2+h5HGJrnvu4WByLy9qPiliIQ1x0YQdAkJi1nzks7lCP3gdt8Ks0Tv19MYqHmVbuLgPvX1ks8SfGpNLOD6pUgEOzZoywEc0VUl5BPyk1QsdXfu4jnOKs58QvOYG3PWH7ACQQrep1y/rtYOAyf5t3ARnOlmuSyWPdEscWJcdhvaSz8uOX3t47UL5se/wzv2y85VL5RUctdFvKCNZCJ7k9q0Jj8eDEJOQEyyHxK2CU6TEqYF7bwarLCVf9DrF+ZTA481zmeUiH8WOXigMY1fXmRdkI7n/iaKuOYHdSnFR6LExfXDk3lx7lL2DpHNaGW6Li2EolIx29FLLDxwRnU9oQ3yA+LnpOzP82fpfHcbZXmzPT3hONlS//pJ2drNk32zaps8T1s2emZWtsG1Mapi5UoWaoDHCJ8rqs8LHa+/ieZa+EQH1WH4UNUj/9eRlWwhEnNzrSpbxhzkYVFw7MEtLJpR3c4osopBN9R0AvcuUX2ItA8ghVmjgmAeUeyxh2BzzFikEIP3dtcuV91aEcTE0zc/oOXw1zondVjh1oFeeiRi1fu+DlpKqH/A3QpF84mr6k8hHeR3S/rzSRZy4wZZAd1E0z+2uHjXbRCKHd7PdsKQH4dKhZLwVDMG/RdeB+8ZEZGHjgJnygsNAmw6hnAfoxQDHlu0nsR3bWbixqsALAaxpYCWb5Y5q1mYtisfudKa69buTgCpQ4BVFbEv7jU/4xDBv05q/61zfgVTHPjUqPkBM9hgs0SU7xm1qCIQf4D8zCrz2zi7FyTyXhx0IwMz3tUnkdvV+GLWB3S87eI9LmuAbHCt2z6vbh29BUxDPST3PMo/rV2kLfQIE/0jOXTDj7X4TOVeSpSjBtlVxvjp385OpRNQQm1Xw2Tqdku00VEMCXb6IWycuFhbyxgep38pgDhF8P04XaqI+Hq7k4lyBbH497i8/Jevi72GXuP9fMHL44fpAYRP90O3e2igbSzpDk0IsCiWm9c4Sphnl6psoyQU8fSZFhttpu5euhNTUA6juuCuK0/Q11Sai5jh8HyOR1esCfQIgrf4/fQhqEBOklM72IoWDZQzr31xaTettQqTFZdXRThSK0gV7vr8ki6JQVABaH/IKYuVUSSoZVgUqSVVhaQgNJcg70YOYZATxda/QkV38BxFr+KFo/0wJcnZjZTLSjMO4ppj4WXwmm0e/99JcbpDm/NABh5Qea86BmMQPjOHsplq/Jcq1Y7hB45vEQ2gLyEZ8TTSomOHfSghoTYE1gIqDatLadkjIPzXgG7gpnGLYCGUiM2D2oCofERWkQKYtSZOd4cmjGlrQyBKpriEzoqissjEXjM2W2K4+f0Xev2y3u2483HHuDXexgRMtPWm/cZ1M2nfcHaQGcUKn5ZUZg+rDWrI2aSGEZU4u3ULtp0Nv6bwqRgIPvygcMxkpaZwC2qn11qillKhMeKxVUI0CkHe2poxUGksMzJUVLZDLS6TJBAFEipgRPwNxJLfcLvpKFuiARxgzNhf3S+8gqUdrZkx14NDEvjwj1Y2Jv82JwnoxzjNIYaG1aUpT/64QJvEBfTTyK6Bpc5QYiGBaKr23ra7OqKQBkbHLnOSIkAXXS1rIYo1M15g66JDfOe7VbaiJmafOAMZy9ZB8iololumkD4QO1NApwIWBRCBCGOGIQ0IKGEezHBhH3IJcTe02RWizu5+Id4KBBuXfK93IavuSIK98yOfFMf7I90QpovAG/Mkyz72osx28A6WNT0Qon8nMxaeRB8J8Ola95lHJLOfPD33tg87MTR6vIQAhF7CdM19qZpS9tVYY+m07EIQ7Bj/MkSc7D2mUp/Jh0wxIjwkedcyeqIqimUHniiM8hPdUz32hosmSTm96rm6gDgfInpT4l+yojTlZc2G/gE8wFTZ7ursoxmy/4C7W/xLQxLpujWfVF44gtNzunVKsMYkyb1m28gkM5F63cig9QThkwPMJwvVaJ2RV6WoHgv+2rSGrFXlFa1RmRfEZIdFIlsLOo712LFYDr4IREZU8AvPiL24B3mAp+e1qUPTLaYwugzxTGghTL8PTgBp4qggqpSc2Y5ygh7OEHS+oqp7noDp+ljsIh9fj1UCs4oUQ+1PvY+qU22AD7yx4Sx3gf69zS6RYDs+1iGkEqb5yUTKL7a0gvqf6TxUTva7Cdql79GdPcTQY+M8J5mTd7nneAL4SGFmJ5SQe2MIHSxoZcu+osJyVBsr5NnRFVG92CWHz6ogY1VNg/0N3kKs3Yy/aV9Oo9cuYCDMWfHZwwAvETTIl/Ps+ZvykFm28tXCYKxIluNezT8zEfSVs/fOZ5qcjV3ZdBL9Y6KF7t37dZxi9waDaJ8Iek12jb3ZhmARrwSZOMrc0aQVepyLLAqgf37cJfNdf61yun/Diz3sys/oiZQI1WElLVBDZJMIVpuAr5nTokBdVeKfUZ2zi2xV1HLEC4x+pNL+EKNESuvjcQhwdKs6m7rI0Va2JzXJGnHHRPNVzHLINV1NCLysQKdVfq47gnKzoUb55xJLLrlDeZ1p9n6GgF5BsCjbC2cd6Ra4wH+xUjmr5owmPCXv2GUczrC5DasH8WirD/SVRA68B7RweB5qj3UDT7l0cz+ZYiicL30jlLGj+gbdIvtgC8tz8QGN9gmluIpIvjP2paOUQm59W9JsX7C6OFLyqoHOORAsNJ4wCLIFSC2Nv3CikRjIS4MrRbBCTULDDOMYGFvgli2xkYYjrTB00vGKtvlBaI2WwbqclmUooMZF81EfavFJdjVOS2uVd5GhdwXMzgnbEQbgZHrMBeOmuFC2bqI+I22zNUUg5UtsZZa7RoiyW3sBAo+wEk8lzVmYA4wdumrzANAnIdHr9xvei7HUd3hRUK6PzsFv+XFj/lt0SEewEW27mScMyGuJrWs6ChN/z9egjSg6cA9zhC4MxeOxJxVuzpHMugPH5TAE6PCna03oaeD3zP8EpO7LKLjnQrfUSa//wyqbeLnVizEZQl+8KzQJO9gDn+kWlOOah24bDdf/xKs4LicCxW6scLRAtWexSvXSL7XV48Dr6wdJKRZmUaKIrFcjqhRo3z7dZNeG8Rt+5VNzgZLLO1HHQucf1N1KhQvELKgjeIY9CYXoFrNgCheFjNQxncjNkJdRkaudQ0QHneE4zhgH4L4j58QyjdIIcWcw0ERp465G+p14EAP/2PeK50cbzn8slitgmn4qvCKY+uJ7Ahcfx+2DDv15AF+TtJ+vtBFM3IuXPlb2fzQ89dRst9QCQ3aoyFtjXcLCOUT8v4R4yIZWDigLQ3loIlP0JfW93r8xWZZJSjAaqRjPEIVxAtz97GMFnfE+IfhKBdgxdSn4c6ZrFKfG76i81ibI7KMBhkylPbSq4K3abd6VwQ6fU9dz3Rx7Fcdvlm5sPTSnmrXqMeP8kSwmqJR4R3Qs3FtzzMzh4w9f+kfQgaAXH5nl/Zxn8kSSxmrc19UpKAgAZoD8C784Ac1Z25qnZGkqllS6Mtq+unKcu3Tb5vOcie+UAm3Jv4/nsb5cTNbP4wqAH+9LkzG0stKTku+EJsQ77D8e8Oulu6sUygBjLiICuKVDmTbiVYJ9HmBV4/QFQkSASe2zy00ccwuRJDwZJccJ+NkMacl7a8BJiTWKX/mIs8kOhtcjKqRlpy23gud/HVYdOpu0RiwF/pPTumro9R4I6eC6y1Mj4h3mjTc/gaYlTjfQa8v2ftG5jjGhlTAUyGgDo+/nfFDXhZDrdgqe5zf8Z+sy8XipknGVkZ5oNATFgD7pWQ7Y1wR1urDKrVnSsIpYDWd9mhhKXKMB/mp2qEb+IdCizPgCyaFl/oJtfxk4xtlRnTpaz1KhvGW6VEhk1D4Jm09lMhuBt7GDxNPvnwZFBXgwapOUxDgbArIAMQJRcVig7Omhyoktm0aPPNLPH4dqE+XLmB//DkwprGGY3s0Is7r/0cN4q9rpC360x322PKyHUKiP9T4ALN2E0IJvH3tfKAW0x8+HsZbyicl9O1wpcqbFtUHPKX6F8lxBAbZGN5BKhYYnq+uvDWeaIGfURKTSTOK9NLV6E3hlQ0+epduWDfg2e96sOZdsXxKXtpuJGLFkQXhUGOkEupf82theU88CzycTbvAp8BIByYvUrEsEc5JETY9otiVbiD2EiPHOPv7TM60Ge/RYmF6wi/8s5+AYwAZ4/RNBEmGToXsAEdtK1mlOJcU75q9aRkRrwXsk3ZsysevYtsGTn9yeDONn9f21XPUp9YVkp1VRMn19JoN5cd9XNEu3HXE+CZZrFNgjMnrDvt8IRS13G8gCaojYuySF6vcmDUpgh+Joolo9Vb3emY5ucCbfDXwIjW0Z0DkpikYzej+W0wnvASGFYIoUktcqqs4a/slrAZUjvgeKPWlaNuw+i9gg7qdxw0w00kXyMZ7KaeCXlONy3XtKt9WYyJZIB/qKpyWDRiTU1xztFRd5Aehe9DjdS1c3B0FL3YIXrU </div>]]></content>
      
      
      <categories>
          
          <category> Jh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绩效</title>
      <link href="/posts/915c/"/>
      <url>/posts/915c/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+qp2OQ0Pv0mDNuBT9WXmovZnZHwYTt6x83yxvMn8y2jRDkLf5BOCbZ/d6n6P4YT64hRDGUlFacifPk6FoHWC9FDpCq+83kIdKlILxHrOr8TLaNgab8YxAwkNEz1+ihAYfY3laIHKdP7FF2X4pdH2dv/Ff2xOsawnXmQdttRCbS6pipAsm6eo9se9wgW9PNtkyASSO1XCYp0aRGOAz8cOfaTSr0eX6rsYWcxFLDnwvQQkprjNjjANdyDg8BgnNWbl9vjxnI5Bd0htk24PA0J+uhcrzgsr7BH/RGPLi/km0P+RSh8/5iSlUjCx2SD+wpxmNgA7rbFSpTVw2IWZgL9SRZKZyNtz0wXBG45qzk2Bs4mSjbLuz6t7TAUnSiA095y1lWjga6V1YBewTylSmHP/NJQPmp+69PTAi/W/fVfxTukT8CKIihduc9IS2enA5mTNGxTpP7FGIiXo88fqy2CES0/sp3sm2wTeE2zhUrAqpQ2FmO7qhwTBo7ELv9t2hNdHJvKHQjbMySR7zNr9H44NsjT7tIUIB384IZv5Ii4EZIpPnJ5WNp/TiDSma7GGHvCeI6KOTm1Pl7IMLK6PxQRN//nbbmdhVfZ+THSSCHbnAHiptnL/hevhqonh5Dfie03lQ3PYGq6uRLhJv8JoMNulYUe442kEBcVsTu7SkrpZH26lT0jEkukT8gilzvz01+OjqdrCIWDOE2esvuo1NktElczubntkR0UTADExxd4zOM+d439HEHIiFS15lauRnIFkwLC6E5m7ssLR8dY/0WHpY91AQVcPACC96s+s7TH+q2iFjJlcAYz5PKwUpnsD4zZUQqqgpMpasP0d9JSVC/iMlZDBFHbhlmhYXYNCRQTerW88xftJLHgwcNGUbHR87/LzhT4FshAQsIgxbtQbIdQ1iF18MQsSS/V9g9nFwqQ5hByqLhCyDjVg1HyVvIPe4EDZEUTFX0sFVxo0NuCifXyq8VZQpdK9UF81WW0p83IPRxZFJOa5N4MOoDi0uQmvzHYhZM5w2lx1cpzolKkeISDjo1cYLGxkbrkA4boXWclhnVkY/ov2Kec54N2AfnXrL4VY53NROJ7PG42b7LNZi9kLPipYJAZULJEvsroy9KljEndVtrjIwpkWwtIFFomZJoSejhIkSpESeh2YAGCkGDia+sjHmOw/2CuMwqJLl4jlDDNDfrukBY1ezUiLjP0Usm/Q31JbcTA0icgJG/SHFWTcaIjhcTxf4zWJ6UDIBzH9/mo9WkUVPPIUsr/PMjfEGEL9bHcR64+XymjWD2wCxwM0JQqfeesqGvO5UB3JPgTTtq1ckHbCUifOxDAxN9Au8TiAyZJ49drMZY8qjrMnm+EmCKVzQSPQvJdAFKwtCMvveJybGACn8pFtKBhKRRC+ShtqyoZDWhZoaPuZpUUTnn6hsk8AmXxkG7Bd3Dl972+UzTvcXfePkIdZXl5KLLnVCvdfmV4XIeRHKu9avNXVsKM0fPTfDtzjC2rPxTdxNZ1D3ICC9mjpc4U8hwdhtA571oWvSB9+1eR2cVYTD6ccaqS78U428fZirRUyIyAz3lf4fHeSzXmPDMmRVZnPGKVkJ3vRjpBKopHxe/w0GM69NwrklK82GJPEjOwLCjPzmWQdcMih+/I65Bbky5TwGAF4688AYJZ3ByNx7vedNny7DQtL8GT1+Th7a3nMufgLZAIJYLRThxOWuL2SmbnLWOETj7l0QPzILm061AK4Vu4lnpiNCpt6o5/N79GE0jNhqnShQUGBT9Cr/dqliyZ+FbzgrrH9+GeO4YHC6kvFiNZ4E6gZQHSkAsHoYqimof0DLdpdKdIdhiQukx94WesofbLoxJcUrQmG8TLkS+x285jVKQYXLdmBlNIjpvoa8f50KX6GH3reWNszGW+HJRFlQmTrbvaA1Dovo7ZNAzztcOg4HTsEpXfBOImZ7UPkwKut9vZNqUMjkxcJ6p/btuVvvUR57zK0DCv2EOErO9Y/LQ9b6SgOkC1BogPxTfWbkCRELLmzgAWQPpqhZYY92PCMp6dcuZDTJfFCxShWjbNlyvpplqFRUOI6tySpfPW2P3nCM8Uk4M/vFzHDqG3Md4 </div>]]></content>
      
      
      <categories>
          
          <category> Jh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01</title>
      <link href="/posts/2a65/"/>
      <url>/posts/2a65/</url>
      
        <content type="html"><![CDATA[<h1 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h1><ol><li>吉大一绑卡接口问题（绑定失败，未复现）</li><li>厦门心血管APP嵌入满意度二维码页面报错（APP里写死地址）</li></ol><h1 id="1-6"><a href="#1-6" class="headerlink" title="1.6"></a>1.6</h1><ol><li>开放设置默认手机号第三方接口</li><li>吉大一卡号绑定对接测试</li><li>华西二院需求梳理</li><li>b27迭代需求</li></ol><h1 id="1-7"><a href="#1-7" class="headerlink" title="1.7"></a>1.7</h1><ol><li><p>2.5.0患者管理构思</p></li><li><p>吉大一绑卡接口问题处理</p></li><li><p>2.3.1b25插需求（重庆大足微信公众号绑定用户信息直接跳过信息录入页）</p></li><li><p>2.3.1b26插需求（厦门心血管满意度二维码支持匿名调查）</p></li></ol><h3 id="患者管理现有功能"><a href="#患者管理现有功能" class="headerlink" title="患者管理现有功能"></a>患者管理现有功能</h3><ul><li><p>分组（新增、编辑、删除、共管，导入excel、查询导入、手动添加）</p></li><li><p>患者（分组、移除、标记死亡、导出、发短信、发宣教、发表单、标记/取消特别关注、添加计划、导出表单记录、导出检验检查、新建短信主题、基线时间、留言板、所在分组）</p></li><li><p>推介患者</p></li><li><p>在院患者出院自动入组</p></li><li><p>录入表单/人员</p></li><li><p>标签</p></li></ul><h1 id="1-8"><a href="#1-8" class="headerlink" title="1.8"></a>1.8</h1><ol><li><p>南京鼓楼满意度数据删除（提供SQL)</p></li><li><p>厦门心血管动态药品宣教线上环境处理</p></li><li><p>广妇儿蓝牛医护APP在院患者宣教记录查看（换调用接口）</p></li><li><p>山东齐鲁微信收不到消息推送（未能提供日志，明天看）</p></li><li><p>邵逸夫满意度表单编辑责任科室下拉渲染卡（换操作方式，单个题目编辑保存）</p></li></ol><h1 id="1-9"><a href="#1-9" class="headerlink" title="1.9"></a>1.9</h1><ol><li><p>山东齐鲁微信收不到消息推送（esb没启动）</p></li><li><p>邵逸夫表单编辑失败问题</p></li><li><p>吉大一第三方设置默认手机号接口</p></li></ol><h1 id="1-10"><a href="#1-10" class="headerlink" title="1.10"></a>1.10</h1><ol><li><p>专科随访代码重写评估</p></li><li><p>xxl-job 任务调度</p></li></ol><h3 id="1-13"><a href="#1-13" class="headerlink" title="1.13"></a>1.13</h3><ol><li><p>随访、宣教疾病精确/模糊搜索bug</p></li><li><p>北京潞河2.5.0版本新建用户自动创建计划bug</p></li></ol><h3 id="1-14"><a href="#1-14" class="headerlink" title="1.14"></a>1.14</h3><ol><li><p>xxl-job优劣势分析</p><ul><li><p>优势：</p><ul><li><p>可视化界面，可查看任务执行情况</p></li><li><p>可根据医院个性化配置Cron</p></li><li><p>邮件警报    </p></li></ul></li><li><p>劣势：</p><ul><li><p>需要多部署一个程序，增加部署维护成本</p></li><li><p>定时器可个性化配置，不可控因素变高</p></li></ul></li></ul></li><li><p>广妇儿院级随访漏筛问题（年龄没有结束年龄bug，已出补丁包）</p></li><li><p>丽水中医院网络环境问题</p></li><li><p>中山六院cdr数据填充</p></li></ol><h1 id="1-15"><a href="#1-15" class="headerlink" title="1.15"></a>1.15</h1><ol><li><p>mongoDB java-driver-sync 驱动使用</p></li><li><p>代码审核</p></li></ol><h1 id="1-16"><a href="#1-16" class="headerlink" title="1.16"></a>1.16</h1><ol><li>北仑卫计局售前</li></ol><h1 id="1-17"><a href="#1-17" class="headerlink" title="1.17"></a>1.17</h1><ol><li>APP在院宣教宣教记录查看</li><li>随访竞品分析</li><li></li></ol><h1 id="1-18"><a href="#1-18" class="headerlink" title="1.18"></a>1.18</h1><ol><li><p>医联体、医共体区别</p></li><li><p>智随访产品优势</p></li></ol><h3 id="智随访"><a href="#智随访" class="headerlink" title="智随访"></a>智随访</h3><p>公立医院绩效评估</p><p>延续性护理</p><h3 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h3><p>医院智慧服务评级</p><p>医院降本增效</p><p>慢病平台及疾病管理服务</p><h1 id="医共体技术问题："><a href="#医共体技术问题：" class="headerlink" title="医共体技术问题："></a>医共体技术问题：</h1><ol><li><p>网络：医共体和卫计局之间网络是否互通</p></li><li><p>数据：卫计局是否有数据中心，没有的话患者数据需要和医共体医院对接，各家医院的his、lis、pacs厂商是否相同。数据接口通过何种形式开放</p></li><li><p>微信、短信</p></li><li><p>3个医共体13家医院</p></li></ol><p>AI收费体系</p>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode--寻找两个有序数组的中位数</title>
      <link href="/posts/6ecc/"/>
      <url>/posts/6ecc/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。</p><p>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</p><p>你可以假设 nums1 和 nums2 不会同时为空。</p><a id="more"></a><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [1, 3]</span><br><span class="line">nums2 = [2]</span><br><span class="line"></span><br><span class="line">则中位数是 2.0</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [1, 2]</span><br><span class="line">nums2 = [3, 4]</span><br><span class="line"></span><br><span class="line">则中位数是 (2 + 3)/2 = 2.5</span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><pre><code>中位数是指将数据按大小顺序排列起来，形成一个数列，居于数列中间位置的那个数据。中位数用Me表示。题目中给定的是两个有序数组，可以将两个数组重新排序组合成一个新的有序数组，这样中位数就可以很方便求出来了。</code></pre><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l1 = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> l2 = nums2.length;</span><br><span class="line">        <span class="keyword">int</span> length = l1 + l2;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, a = <span class="number">0</span>, b = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="comment">//nums1 数组取完</span></span><br><span class="line">            <span class="keyword">if</span> (a == l1) &#123;</span><br><span class="line">                nums[i] = nums2[b];</span><br><span class="line">                b++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//nums2 数组取完</span></span><br><span class="line">            <span class="keyword">if</span> (b == l2) &#123;</span><br><span class="line">                nums[i] = nums1[a];</span><br><span class="line">                a++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums1[a] &lt;= nums2[b]) &#123;</span><br><span class="line">                nums[i] = nums1[a];</span><br><span class="line">                a++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums[i] = nums2[b];</span><br><span class="line">                b++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length % <span class="number">2</span> != <span class="number">0</span> ? nums[length / <span class="number">2</span>] : ((nums[length / <span class="number">2</span> - <span class="number">1</span>] + nums[length / <span class="number">2</span>])) / <span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端交互Map排序问题</title>
      <link href="/posts/8d58/"/>
      <url>/posts/8d58/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>后台返回前端是一个map对象，后台使用的是LinkedHashMap，根据一定规则排过序，但是前端接收到的数据并未按照后台的顺序排序。</p><h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>前端接收到的数据是JSON格式，JSON没有Map这种数据结构。JSON 定义的 object 的键值对是无序的。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>想要有序使用List</p>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Problem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 整数反转</title>
      <link href="/posts/943f/"/>
      <url>/posts/943f/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><a id="more"></a><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 123</span><br><span class="line">输出: 321</span><br></pre></td></tr></table></figure><p> 示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: -123</span><br><span class="line">输出: -321</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 120</span><br><span class="line">输出: 21</span><br><span class="line">注意:</span><br></pre></td></tr></table></figure><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li><p>本题如果不考虑溢出问题，是非常简单的。解决溢出问题有两个思路，第一个思路是通过字符串转换加<code>try catch</code>的方式来解决，第二个思路就是通过数学计算来解决。</p></li><li><p>由于字符串转换的效率较低且使用较多库函数，所以解题方案不考虑该方法，而是通过数学计算来解决。</p></li><li><p>通过循环将数字<code>x</code>的每一位拆开，在计算新值时每一步都判断是否溢出。</p></li><li><p>溢出条件有两个，一个是大于整数最大值<code>MAX_VALUE</code>，另一个是小于整数最小值<code>MIN_VALUE</code>，设当前计算结果为<code>ans</code>，下一位为<code>pop</code>。</p></li><li><p>从<code>ans * 10 + pop &gt; MAX_VALUE</code>这个溢出条件来看</p><ul><li><p>当出现 <code>ans &gt; MAX_VALUE / 10</code> 且 <code>还有pop需要添加</code> 时，则一定溢出</p></li><li><p>当出现 <code>ans == MAX_VALUE / 10</code> 且 <code>pop &gt; 7</code> 时，则一定溢出，<code>7</code>是<code>2^31 - 1</code>的个位数</p></li></ul></li><li><p>从<code>ans * 10 + pop &lt; MIN_VALUE</code>这个溢出条件来看</p><ul><li><p>当出现 <code>ans &lt; MIN_VALUE / 10</code> 且 <code>还有pop需要添加</code> 时，则一定溢出</p></li><li><p>当出现 <code>ans == MIN_VALUE / 10</code> 且 <code>pop &lt; -8</code> 时，则一定溢出，<code>8</code>是<code>-2^31</code>的个位数</p></li></ul></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最优解</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> pop = x % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (ans &gt; Integer.MAX_VALUE / <span class="number">10</span> || (ans == Integer.MAX_VALUE / <span class="number">10</span> &amp;&amp; pop &gt; <span class="number">7</span>)) </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (ans &lt; Integer.MIN_VALUE / <span class="number">10</span> || (ans == Integer.MIN_VALUE / <span class="number">10</span> &amp;&amp; pop &lt; -<span class="number">8</span>)) </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            ans = ans * <span class="number">10</span> + pop;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串转换方式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        StringBuilder str = <span class="keyword">new</span> StringBuilder().append(x);</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(str.reverse().toString());</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        StringBuilder str = <span class="keyword">new</span> StringBuilder().append(-x);</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(str.reverse().toString())*(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>凌晨自动发送问题处理</title>
      <link href="/posts/9ba5/"/>
      <url>/posts/9ba5/</url>
      
        <content type="html"><![CDATA[<h1 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h1><p>更新随访系统至最新版本</p><h1 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h1><p>找到配置文件quartz.xml，路径为<code>/⁨resources⁩/⁨spring/quartz.xml⁩</code></p><p>将</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cronExpression"</span> <span class="attr">value</span>=<span class="string">"0 50 * * * ?"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>替换为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cronExpression"</span> <span class="attr">value</span>=<span class="string">"0 50 6-22 * * ?"</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux定时任务</title>
      <link href="/posts/1ca3/"/>
      <url>/posts/1ca3/</url>
      
        <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>每天凌晨一点执行一次脚本</p><a id="more"></a><h1 id="1-systemd-timer"><a href="#1-systemd-timer" class="headerlink" title="1.systemd.timer"></a>1.systemd.timer</h1><p>定时器可以放在/usr/lib/systemd/system目录下，方便管理。</p><h3 id="mytimer-service"><a href="#mytimer-service" class="headerlink" title="mytimer.service"></a>mytimer.service</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=备份tomcat前一天的<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/root/sliceCatalina.sh</span><br></pre></td></tr></table></figure><h3 id="mytimer-timer"><a href="#mytimer-timer" class="headerlink" title="mytimer.timer"></a>mytimer.timer</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=每天凌晨一点备份tomcat前一天的<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">[Timer]</span><br><span class="line">OnCalendar=*-*-* 01:00:00</span><br><span class="line">Unit=mytimer.service</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="启动定时任务"><a href="#启动定时任务" class="headerlink" title="启动定时任务"></a>启动定时任务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload  <span class="comment"># 重新加载服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mytimer.service</span><br><span class="line">systemctl <span class="built_in">enable</span> mytimer.timer</span><br><span class="line">systemctl start mytimer.timer</span><br></pre></td></tr></table></figure><h3 id="查看timer运行状态"><a href="#查看timer运行状态" class="headerlink" title="查看timer运行状态"></a>查看timer运行状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mytimer.timer</span><br><span class="line">journalctl -f -u mytimer.timer <span class="comment"># 查看定时器运行日志</span></span><br></pre></td></tr></table></figure><h3 id="关闭定时任务"><a href="#关闭定时任务" class="headerlink" title="关闭定时任务"></a>关闭定时任务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> mytimer.timer <span class="comment">#关闭开机启动（即删除目录链接）</span></span><br><span class="line">systemctl stop mytimer.timer <span class="comment"># 关闭单元</span></span><br><span class="line">systemctl stop mytimer.service</span><br></pre></td></tr></table></figure><p>之后删除timer 和Service文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload <span class="comment"># 重新加载配置</span></span><br></pre></td></tr></table></figure><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OnBootSec=         表示相对于机器被启动的时间点</span><br><span class="line">OnStartupSec=      表示相对于systemd被首次启动的时间点</span><br><span class="line">OnUnitActiveSec=   表示相对于匹配单元(本标签下Unit=指定的单元)最后一次被启动的时间点</span><br><span class="line">OnUnitInactiveSec= 表示相对于匹配单元(本标签下Unit=指定的单元)最后一次被停止的时间点</span><br><span class="line">时间单位可以是：us(微秒), ms(毫秒), s(秒), m(分), h(时), d(天), w(周), month(月), y(年)</span><br></pre></td></tr></table></figure><h1 id="2-cronbab"><a href="#2-cronbab" class="headerlink" title="2.cronbab"></a>2.cronbab</h1><h3 id="创建一个新的crontab文件-davecron"><a href="#创建一个新的crontab文件-davecron" class="headerlink" title="创建一个新的crontab文件 davecron"></a>创建一个新的crontab文件 davecron</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1 * * * /root/sliceCatalina.sh</span><br></pre></td></tr></table></figure><h3 id="把文件已经提交给cron进程"><a href="#把文件已经提交给cron进程" class="headerlink" title="把文件已经提交给cron进程"></a>把文件已经提交给cron进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab davecron</span><br></pre></td></tr></table></figure><h3 id="安装crontab"><a href="#安装crontab" class="headerlink" title="安装crontab"></a>安装crontab</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install crontabs</span><br></pre></td></tr></table></figure><h3 id="crontab服务操作"><a href="#crontab服务操作" class="headerlink" title="crontab服务操作"></a>crontab服务操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">/sbin/service crond start </span><br><span class="line"><span class="comment">#关闭服务</span></span><br><span class="line">/sbin/service crond stop</span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">/sbin/service crond restart </span><br><span class="line"><span class="comment">#重新载入配置</span></span><br><span class="line">/sbin/service crond reload </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看crontab服务状态：</span></span><br><span class="line">service crond status</span><br><span class="line"><span class="comment">#手动启动crontab服务：</span></span><br><span class="line">service crond start</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看crontab服务是否已设置为开机启动，执行命令：</span></span><br><span class="line">ntsysv</span><br><span class="line"></span><br><span class="line"><span class="comment">#加入开机自动启动：</span></span><br><span class="line">chkconfig –level 35 crond on</span><br></pre></td></tr></table></figure><h3 id="crontab命令操作"><a href="#crontab命令操作" class="headerlink" title="crontab命令操作"></a>crontab命令操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">crontab [-u user] file</span><br><span class="line"></span><br><span class="line">crontab [-u user] [ -e | -l | -r ]</span><br><span class="line"></span><br><span class="line">-u user：用来设定某个用户的crontab服务，例如，“-u ixdba”表示设定ixdba用户的crontab服务，此参数一般有root用户来运行。</span><br><span class="line"></span><br><span class="line">file：file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab。</span><br><span class="line"></span><br><span class="line">-e：编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件。</span><br><span class="line"></span><br><span class="line">-l：显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容。</span><br><span class="line"></span><br><span class="line">-r：从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件。</span><br><span class="line"></span><br><span class="line">-i：在删除用户的crontab文件时给确认提示。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RAP2安装和部署</title>
      <link href="/posts/f655/"/>
      <url>/posts/f655/</url>
      
        <content type="html"><![CDATA[<h2 id="一-RAP2"><a href="#一-RAP2" class="headerlink" title="一 RAP2"></a>一 RAP2</h2><p>RAP2是在RAP1基础上重做的新项目，它包含两个组件(对应两个Github Repository)。</p><ul><li>rap2-delos: 后端数据API服务器，基于Koa + MySQLlink</li><li>rap2-dolores: 前端静态资源，基于React link</li></ul><a id="more"></a><p>什么是RAP？</p><p>rap是一款API 文档管理工具，在 RAP 中，可以定义接口的 URL、请求 &amp; 响应细节格式等等。同时 RAP 还提供 MOCK 服务、测试服务等自动化工等工具，帮助开发团队高效开发。</p><p>git 地址：</p><p><a href="https://github.com/thx/rap2-dolores" target="_blank" rel="noopener">https://github.com/thx/rap2-dolores</a></p><p><a href="https://github.com/thx/rap2-delos" target="_blank" rel="noopener">https://github.com/thx/rap2-delos</a></p><p>特点</p><ul><li>强大的 GUI 界面工具 ，完全可视化可编辑的管理工具。</li><li>完善的 MOCK 服务，文档定义好后接口就已准备就绪，可方便的 mock 调用接口</li><li>庞大的用户群 ，RAP 在阿里巴巴广泛使用，也有许多著名的公司在用。</li></ul><p>界面截图：</p><p><img src="https://djxblog.oss-cn-shenzhen.aliyuncs.com/picture/tomcat%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/rap0.png" alt="image"></p><h2 id="二-RAP2-安装需要的环境"><a href="#二-RAP2-安装需要的环境" class="headerlink" title="二 RAP2 安装需要的环境"></a>二 RAP2 安装需要的环境</h2><ul><li>Node.js 8.9.4+</li><li>MySQL 5.7+</li><li>Redis 4.0+</li></ul><p>以下的安装步骤都是基于Centos 7 进行安装</p><h3 id="2-1-Node-js-安装："><a href="#2-1-Node-js-安装：" class="headerlink" title="2. 1 Node.js 安装："></a>2. 1 Node.js 安装：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#centos：</span><br><span class="line">curl -sL https://rpm.nodesource.com/setup_8.x | bash -</span><br><span class="line">yum  install  -y nodejs</span><br><span class="line"># Using Ubuntu</span><br><span class="line">curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line"></span><br><span class="line"># Using Debian, as root</span><br><span class="line">curl -sL https://deb.nodesource.com/setup_8.x | bash -</span><br><span class="line">apt-get install -y nodejs</span><br></pre></td></tr></table></figure><p>yum 安装会比较慢，因为服务器是在国外。</p><p>如果上面的安装不成功的，我们可以使用二进制包安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget  https://nodejs.org/dist/latest-v8.x/node-v8.14.0-linux-x86.tar.gz</span><br><span class="line">tar -zxvf node-v8.14.0-linux-x64.tar.gz</span><br><span class="line">mv   node-v8.14.0-linux-x64  /opt/node</span><br><span class="line">ln -s /opt/node/bin/node  /usr/bin/node</span><br><span class="line">ln -s /opt/node/bin/npm  /usr/bin/npm</span><br></pre></td></tr></table></figure><p>配置淘宝镜像源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 要是国内的服务器，需要配置 npm 国内镜像</span><br><span class="line"># 编辑 ~/.npmrc 加入下面内容(当前用户目录下）</span><br><span class="line">registry = https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>安装 pm2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm  install -g pm2</span><br></pre></td></tr></table></figure><h3 id="2-2-Mysql-5-7-安装"><a href="#2-2-Mysql-5-7-安装" class="headerlink" title="2. 2 Mysql 5.7+ 安装"></a>2. 2 Mysql 5.7+ 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">rpm包安装：</span><br><span class="line"></span><br><span class="line">在centos7上要先移除mariadb</span><br><span class="line">yum -y remove mariadb*</span><br><span class="line"></span><br><span class="line">wget  https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.24-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line"></span><br><span class="line">tar  -xvf  mysql-5.7.24-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line">安装依赖：</span><br><span class="line">yum install libaio.so.1*</span><br><span class="line">yum install perl</span><br><span class="line">安装mysql</span><br><span class="line">rpm -ivh mysql-community-common-5.7.24-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.24-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.24-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-5.7.24-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">启动：</span><br><span class="line">systemctl  start  mysqld</span><br><span class="line"></span><br><span class="line">获取密码：</span><br><span class="line">cat  /var/log/mysqld.log  |grep  &apos;generated&apos;</span><br><span class="line">登录之后会要求我们更改密码：</span><br><span class="line">alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;123456&apos;;</span><br></pre></td></tr></table></figure><h3 id="2-3-Redis-安装见文章"><a href="#2-3-Redis-安装见文章" class="headerlink" title="2 .3 Redis 安装见文章"></a>2 .3 Redis <a href="https://www.cnblogs.com/operationhome/p/9752935.html" target="_blank" rel="noopener">安装见文章</a></h3><p>redis 建议不配置密码，并绑定127.0.0.1 ，只能本地访问<br>安装好之后，并以后台任务运行。</p><h3 id="2-4-后端-rap2-delos-安装"><a href="#2-4-后端-rap2-delos-安装" class="headerlink" title="2. 4 后端 rap2-delos 安装"></a>2. 4 后端 rap2-delos 安装</h3><p>安装git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum  install  -y git</span><br></pre></td></tr></table></figure><p>创建数据库 RAP2_DELOS_APP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">登陆数据库创建 RAP2_DELOS_APP</span><br><span class="line"></span><br><span class="line">CREATE DATABASE IF NOT EXISTS RAP2_DELOS_APP DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure><p>rap2-delos 安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 下载源代码</span><br><span class="line">git clone https://github.com/thx/rap2-delos.git</span><br><span class="line"># 切换目录</span><br><span class="line">cd  rap2-delos</span><br><span class="line"># 安装依赖包</span><br><span class="line">npm install</span><br><span class="line"># 安装 TypeScript 编译包</span><br><span class="line">npm install typescript -g</span><br><span class="line"># 编辑测试配置文件（注意这里只是为了测试）</span><br><span class="line">注意这个文件路径   rap2-delos/src/config/config.dev.js</span><br><span class="line"></span><br><span class="line">修改的内容（大约在11行左右开始）：</span><br><span class="line">将数据库配置成我们的数据库名称和路径和用户和密码</span><br><span class="line">dialect: &apos;mysql&apos;,</span><br><span class="line">host: &apos;localhost&apos;,</span><br><span class="line">port: 3306,</span><br><span class="line">username: &apos;root&apos;,</span><br><span class="line">password: &apos;123456&apos;,</span><br><span class="line">database: &apos;RAP2_DELOS_APP&apos;,</span><br><span class="line"></span><br><span class="line"># 构建</span><br><span class="line">注意：在 rap2-delos  主目录下操作</span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line"># 初始化数据库（一定要在根目录执行哦（rap2-delos/））</span><br><span class="line">npm run create-db</span><br><span class="line"></span><br><span class="line">创建成功了会有提示 “Run create-db finished successfully.”</span><br><span class="line"># 执行mocha测试用例和js代码规范检查</span><br><span class="line">npm run check</span><br><span class="line"></span><br><span class="line"># 启动开发模式的服务器 监视并在发生代码变更时自动重启</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>正常启动：<br><img src="https://djxblog.oss-cn-shenzhen.aliyuncs.com/picture/tomcat%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/rap3.png" alt="image"></p><p>如果出现下面的错误就是端口被占用了:</p><p><img src="https://djxblog.oss-cn-shenzhen.aliyuncs.com/picture/tomcat%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/rap2.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 编辑正式配置文件（配置正式数据库）</span><br><span class="line">rap2-delos/dist/config/config.prod.js  (注意这次修改的配置文件的目录和上面那次目录不一样的。)</span><br><span class="line">修改的内容（大约在12行左右开始）：</span><br><span class="line">将数据库配置成我们的数据库名称和路径和用户和密码</span><br><span class="line">dialect: &apos;mysql&apos;,</span><br><span class="line">host: process.env.MYSQL_URL || &apos;localhost&apos;,</span><br><span class="line">port: (process.env.MYSQL_PORT &amp;&amp; parseInt(process.env.MYSQL_PORT)) || 3306,</span><br><span class="line">username: process.env.MYSQL_USERNAME || &apos;root&apos;,</span><br><span class="line">password: process.env.MYSQL_PASSWD || &apos;123456&apos;,</span><br><span class="line">database: process.env.MYSQL_SCHEMA || &apos;RAP2_DELOS_APP&apos;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#  启动正式（生产）模式</span><br><span class="line">npm start </span><br><span class="line"></span><br><span class="line">#  查看服务状态和日志</span><br><span class="line">pm2  list </span><br><span class="line">pm2  logs  rap-server-delos</span><br></pre></td></tr></table></figure><p>测试是否正常：<br>ip:8080<br>显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RAP2后端服务已启动，请从前端服务(rap2-dolores)访问。 RAP2 back-end server is started, please visit via front-end service (rap2-dolores)</span><br></pre></td></tr></table></figure><p>表示正常</p><h3 id="2-5-前端-rap2-dolores-安装"><a href="#2-5-前端-rap2-dolores-安装" class="headerlink" title="2. 5 前端 rap2-dolores 安装"></a>2. 5 前端 rap2-dolores 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 拉取代码</span><br><span class="line">git clone https://github.com/thx/rap2-dolores.git</span><br><span class="line"># 切换目录</span><br><span class="line">cd  rap2-dolores</span><br><span class="line"># 初始化</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>下面这步可以不做，直接配置正式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 开发模式配置**(开发配置可以不做)</span><br><span class="line">    配置文件路径：/src/config/config.dev.js</span><br><span class="line">    module.exports = &#123;</span><br><span class="line">      serve: &apos;http://127.0.0.1:8080&apos;,</span><br><span class="line">      keys: [&apos;some secret hurr&apos;],</span><br><span class="line">      session: &#123;</span><br><span class="line">        key: &apos;koa:sess&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    更改serve  字段</span><br><span class="line">    改成我们的后端访问地址。 注意加 http://</span><br><span class="line"></span><br><span class="line">    # test cases 测试用例</span><br><span class="line">    npm run test</span><br><span class="line"></span><br><span class="line">    # will watch &amp; serve automatically 会自动监视改变后重新编译</span><br><span class="line">    npm run dev</span><br></pre></td></tr></table></figure><p>正式配置，必须配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 正式配置</span><br><span class="line">配置文件路径：/src/config/config.prod.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  serve: &apos;http://127.0.0.1:8080&apos;,</span><br><span class="line">  keys: [&apos;some secret hurr&apos;],</span><br><span class="line">  session: &#123;</span><br><span class="line">    key: &apos;koa:sess&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">更改serve  字段</span><br><span class="line">改成我们的后端访问地址，访问地址直接使用ip，不要使用127.0.0.1。 注意加 http://,</span><br><span class="line"></span><br><span class="line">#  编译React生产包</span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line">#  安装serve</span><br><span class="line">npm install -g serve</span><br><span class="line"></span><br><span class="line"># 运行 </span><br><span class="line">serve -s ./build -p 80</span><br><span class="line">-p 为指定端口</span><br><span class="line"># 后台运行</span><br><span class="line">nohup  serve -s ./build -p 80  &amp;</span><br></pre></td></tr></table></figure><p>访问 ：</p><p><img src="https://djxblog.oss-cn-shenzhen.aliyuncs.com/picture/tomcat%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/rap2%E5%AE%89%E8%A3%85.png" alt="image"></p><p>出现这个即意味着安装成功。</p><h2 id="三-注意事项："><a href="#三-注意事项：" class="headerlink" title="三 注意事项："></a>三 注意事项：</h2><h3 id="错误一"><a href="#错误一" class="headerlink" title="错误一"></a>错误一</h3><p>在安装依赖的时候<br>因为我是二进制安装的node，所以有权限问题，最好是yum安装nodejs 这样权限问题就不存在了。<br>或者我们给我们的目录可写的权限</p><p>错误截图：<br><img src="https://djxblog.oss-cn-shenzhen.aliyuncs.com/picture/tomcat%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/rap4.png" alt="image"></p><h3 id="错误二"><a href="#错误二" class="headerlink" title="错误二"></a>错误二</h3><p>yum 安装nodejs ，会总报网络错误，我们可以多次运行 yum install -y nodejs</p><h3 id="错误三"><a href="#错误三" class="headerlink" title="错误三"></a>错误三</h3><p>如果我们打开界面是一直在加载的话，那么就是我们在配置的时候使用的是127.0.0.1:8080，我们需要使用的是对应的内网ip。例如：192.168.1.190</p><p>转载：<a href="https://www.cnblogs.com/operationhome/p/10038469.html" target="_blank" rel="noopener">https://www.cnblogs.com/operationhome/p/10038469.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Rap2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rap2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装修预算</title>
      <link href="/posts/4ccc/"/>
      <url>/posts/4ccc/</url>
      
        <content type="html"><![CDATA[<h1 id="家电"><a href="#家电" class="headerlink" title="家电"></a>家电</h1><table><thead><tr><th>电器</th><th>品牌</th><th>型号</th><th>价格</th></tr></thead><tbody><tr><td>冰箱</td><td></td><td></td><td></td></tr><tr><td>洗衣机</td><td></td><td></td><td></td></tr><tr><td>烘干机</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h1 id="软装"><a href="#软装" class="headerlink" title="软装"></a>软装</h1><table><thead><tr><th>品类</th><th>品牌</th><th>型号</th><th>价格</th></tr></thead><tbody><tr><td>柜子</td><td></td><td></td><td></td></tr><tr><td>窗帘</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PM2 Quick Start</title>
      <link href="/posts/d67e/"/>
      <url>/posts/d67e/</url>
      
        <content type="html"><![CDATA[<p>Welcome to the PM2 Quick Start!</p><p>PM2 is a daemon process manager that will help you manage and keep your application online. Getting started with PM2 is straightforward, it is offered as a simple and intuitive CLI, installable via NPM.</p><a id="more"></a><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a><a href="https://pm2.keymetrics.io/docs/usage/quick-start/#installation" target="_blank" rel="noopener">Installation</a></h2><p>The latest PM2 version is installable with NPM or Yarn:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install pm2@latest -g</span><br><span class="line"># or</span><br><span class="line">$ yarn global add pm2</span><br></pre></td></tr></table></figure><p>To install Node.js and NPM you can use <a href="https://yoember.com/nodejs/the-best-way-to-install-node-js/" target="_blank" rel="noopener">NVM</a></p><h2 id="Start-an-app"><a href="#Start-an-app" class="headerlink" title="Start an app"></a><a href="https://pm2.keymetrics.io/docs/usage/quick-start/#start-an-app" target="_blank" rel="noopener">Start an app</a></h2><p>The simplest way to start, daemonize and monitor your application is by using this command line:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 start app.js</span><br></pre></td></tr></table></figure><p>Or start any other application easily:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 start bashscript.sh</span><br><span class="line">$ pm2 start python-app.py --watch</span><br><span class="line">$ pm2 start binary-file -- --port 1520</span><br></pre></td></tr></table></figure><p>Some options you can pass to the CLI:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># Specify an app name</span><br><span class="line">--name &lt;app_name&gt;</span><br><span class="line"></span><br><span class="line"># Watch and Restart app when files change</span><br><span class="line">--watch</span><br><span class="line"></span><br><span class="line"># Set memory threshold for app reload</span><br><span class="line">--max-memory-restart &lt;200MB&gt;</span><br><span class="line"></span><br><span class="line"># Specify log file</span><br><span class="line">--log &lt;log_path&gt;</span><br><span class="line"></span><br><span class="line"># Pass extra arguments to the script</span><br><span class="line">-- arg1 arg2 arg3</span><br><span class="line"></span><br><span class="line"># Delay between automatic restarts</span><br><span class="line">--restart-delay &lt;delay in ms&gt;</span><br><span class="line"></span><br><span class="line"># Prefix logs with time</span><br><span class="line">--time</span><br><span class="line"></span><br><span class="line"># Do not auto restart app</span><br><span class="line">--no-autorestart</span><br><span class="line"></span><br><span class="line"># Specify cron for forced restart</span><br><span class="line">--cron &lt;cron_pattern&gt;</span><br><span class="line"></span><br><span class="line"># Attach to application log</span><br><span class="line">--no-daemon</span><br></pre></td></tr></table></figure><p>As you can see many options are available to manage your application with PM2. You will discover them depending on your use case.</p><h2 id="Managing-processes"><a href="#Managing-processes" class="headerlink" title="Managing processes"></a><a href="https://pm2.keymetrics.io/docs/usage/quick-start/#managing-processes" target="_blank" rel="noopener">Managing processes</a></h2><p>Managing application state is simple here are the commands:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 restart app_name</span><br><span class="line">$ pm2 reload app_name</span><br><span class="line">$ pm2 stop app_name</span><br><span class="line">$ pm2 delete app_name</span><br></pre></td></tr></table></figure><p>Instead of <code>app_name</code> you can pass:</p><ul><li><code>all</code> to act on all processes</li><li><code>id</code> to act on a specific process id</li></ul><h2 id="Check-status-logs-metrics"><a href="#Check-status-logs-metrics" class="headerlink" title="Check status, logs, metrics"></a><a href="https://pm2.keymetrics.io/docs/usage/quick-start/#check-status-logs-metrics" target="_blank" rel="noopener">Check status, logs, metrics</a></h2><p>Now that you have started this application, you can check its status, logs, metrics and even get the online dashboard with <a href="https://pm2.io/" target="_blank" rel="noopener">pm2.io</a>.</p><h3 id="List-managed-applications"><a href="#List-managed-applications" class="headerlink" title="List managed applications"></a><a href="https://pm2.keymetrics.io/docs/usage/quick-start/#list-managed-applications" target="_blank" rel="noopener">List managed applications</a></h3><p>List the status of all application managed by PM2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 [list|ls|status]</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/24/RN2A5o8mOu69zKy.png" alt></p><h3 id="Display-logs"><a href="#Display-logs" class="headerlink" title="Display logs"></a><a href="https://pm2.keymetrics.io/docs/usage/quick-start/#display-logs" target="_blank" rel="noopener">Display logs</a></h3><p>To display logs in realtime:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 logs</span><br></pre></td></tr></table></figure><p>To dig in older logs:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 logs --lines 200</span><br></pre></td></tr></table></figure><h3 id="Terminal-Based-Dashboard"><a href="#Terminal-Based-Dashboard" class="headerlink" title="Terminal Based Dashboard"></a><a href="https://pm2.keymetrics.io/docs/usage/quick-start/#terminal-based-dashboard" target="_blank" rel="noopener">Terminal Based Dashboard</a></h3><p>Here is a realtime dashboard that fits directly into your terminal:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 monit</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/24/GubRDWQCa2Y64H9.png" alt="https://i.imgur.com/xo0LDb7.png"></p><h3 id="pm2-io-Monitoring-amp-Diagnostic-Web-Interface"><a href="#pm2-io-Monitoring-amp-Diagnostic-Web-Interface" class="headerlink" title="pm2.io: Monitoring &amp; Diagnostic Web Interface"></a><a href="https://pm2.keymetrics.io/docs/usage/quick-start/#pm2io-monitoring--diagnostic-web-interface" target="_blank" rel="noopener">pm2.io: Monitoring &amp; Diagnostic Web Interface</a></h3><p>Web based dashboard, cross servers with diagnostic system:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 plus</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/24/gLsStpfc4dG6KCx.png" alt="https://i.imgur.com/sigMHli.png"></p><h2 id="Cluster-mode"><a href="#Cluster-mode" class="headerlink" title="Cluster mode"></a><a href="https://pm2.keymetrics.io/docs/usage/quick-start/#cluster-mode" target="_blank" rel="noopener">Cluster mode</a></h2><p>For Node.js applications, PM2 includes an automatic load balancer that will share all HTTP[s]/Websocket/TCP/UDP connections between each spawned processes.</p><p>To start an application in Cluster mode:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 start app.js -i max</span><br></pre></td></tr></table></figure><p>Read more about cluster mode <a href="https://pm2.keymetrics.io/docs/usage/cluster-mode/" target="_blank" rel="noopener">here</a>.</p><h2 id="Ecosystem-File"><a href="#Ecosystem-File" class="headerlink" title="Ecosystem File"></a><a href="https://pm2.keymetrics.io/docs/usage/quick-start/#ecosystem-file" target="_blank" rel="noopener">Ecosystem File</a></h2><p>You can also create a configuration file, called Ecosystem File, to manage multiple applications. To generate an Ecosystem file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 ecosystem</span><br></pre></td></tr></table></figure><p>This will generate and ecosystem.config.js file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  apps : [&#123;</span><br><span class="line">    name: &quot;app&quot;,</span><br><span class="line">    script: &quot;./app.js&quot;,</span><br><span class="line">    env: &#123;</span><br><span class="line">      NODE_ENV: &quot;development&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    env_production: &#123;</span><br><span class="line">      NODE_ENV: &quot;production&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">     name: &apos;worker&apos;,</span><br><span class="line">     script: &apos;worker.js&apos;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And start it easily:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 start process.yml</span><br></pre></td></tr></table></figure><p>Read more about application declaration <a href="https://pm2.keymetrics.io/docs/usage/application-declaration/" target="_blank" rel="noopener">here</a>.</p><h2 id="Setup-startup-script"><a href="#Setup-startup-script" class="headerlink" title="Setup startup script"></a><a href="https://pm2.keymetrics.io/docs/usage/quick-start/#setup-startup-script" target="_blank" rel="noopener">Setup startup script</a></h2><p>Restarting PM2 with the processes you manage on server boot/reboot is critical. To solve this, just run this command to generate an active startup script:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 startup</span><br></pre></td></tr></table></figure><p>And to freeze a process list for automatic respawn:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 save</span><br></pre></td></tr></table></figure><p>Read more about startup script generator <a href="https://pm2.keymetrics.io/docs/usage/startup/" target="_blank" rel="noopener">here</a>.</p><h2 id="Restart-application-on-changes"><a href="#Restart-application-on-changes" class="headerlink" title="Restart application on changes"></a><a href="https://pm2.keymetrics.io/docs/usage/quick-start/#restart-application-on-changes" target="_blank" rel="noopener">Restart application on changes</a></h2><p>It’s pretty easy with the <code>--watch</code> option:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /path/to/my/app</span><br><span class="line">$ pm2 start env.js --watch --ignore-watch=&quot;node_modules&quot;</span><br></pre></td></tr></table></figure><p>This will watch &amp; restart the app on any file change from the current directory + all subfolders and it will ignore any changes in the node_modules folder <code>--ignore-watch=&quot;node_modules&quot;</code>.</p><p>You can then use <code>pm2 logs</code> to check for restarted app logs.</p><h2 id="Updating-PM2"><a href="#Updating-PM2" class="headerlink" title="Updating PM2"></a><a href="https://pm2.keymetrics.io/docs/usage/quick-start/#updating-pm2" target="_blank" rel="noopener">Updating PM2</a></h2><p>We made it simple, there is no breaking change between releases and the procedure is straightforward:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2@latest -g</span><br></pre></td></tr></table></figure><p>Then update the in-memory PM2 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 update</span><br></pre></td></tr></table></figure><h2 id="CheatSheet"><a href="#CheatSheet" class="headerlink" title="CheatSheet"></a><a href="https://pm2.keymetrics.io/docs/usage/quick-start/#cheatsheet" target="_blank" rel="noopener">CheatSheet</a></h2><p>Here are some commands that are worth knowing. Just try them with a sample application or with your current web application on your development machine:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"># Fork mode</span><br><span class="line">pm2 start app.js --name my-api # Name process</span><br><span class="line"></span><br><span class="line"># Cluster mode</span><br><span class="line">pm2 start app.js -i 0        # Will start maximum processes with LB depending on available CPUs</span><br><span class="line">pm2 start app.js -i max      # Same as above, but deprecated.</span><br><span class="line">pm2 scale app +3             # Scales `app` up by 3 workers</span><br><span class="line">pm2 scale app 2              # Scales `app` up or down to 2 workers total</span><br><span class="line"></span><br><span class="line"># Listing</span><br><span class="line"></span><br><span class="line">pm2 list               # Display all processes status</span><br><span class="line">pm2 jlist              # Print process list in raw JSON</span><br><span class="line">pm2 prettylist         # Print process list in beautified JSON</span><br><span class="line"></span><br><span class="line">pm2 describe 0         # Display all informations about a specific process</span><br><span class="line"></span><br><span class="line">pm2 monit              # Monitor all processes</span><br><span class="line"></span><br><span class="line"># Logs</span><br><span class="line"></span><br><span class="line">pm2 logs [--raw]       # Display all processes logs in streaming</span><br><span class="line">pm2 flush              # Empty all log files</span><br><span class="line">pm2 reloadLogs         # Reload all logs</span><br><span class="line"></span><br><span class="line"># Actions</span><br><span class="line"></span><br><span class="line">pm2 stop all           # Stop all processes</span><br><span class="line">pm2 restart all        # Restart all processes</span><br><span class="line"></span><br><span class="line">pm2 reload all         # Will 0s downtime reload (for NETWORKED apps)</span><br><span class="line"></span><br><span class="line">pm2 stop 0             # Stop specific process id</span><br><span class="line">pm2 restart 0          # Restart specific process id</span><br><span class="line"></span><br><span class="line">pm2 delete 0           # Will remove process from pm2 list</span><br><span class="line">pm2 delete all         # Will remove all processes from pm2 list</span><br><span class="line"></span><br><span class="line"># Misc</span><br><span class="line"></span><br><span class="line">pm2 reset &lt;process&gt;    # Reset meta data (restarted time...)</span><br><span class="line">pm2 updatePM2          # Update in memory pm2</span><br><span class="line">pm2 ping               # Ensure pm2 daemon has been launched</span><br><span class="line">pm2 sendSignal SIGUSR2 my-app # Send system signal to script</span><br><span class="line">pm2 start app.js --no-daemon</span><br><span class="line">pm2 start app.js --no-vizion</span><br><span class="line">pm2 start app.js --no-autorestart</span><br></pre></td></tr></table></figure><h2 id="What’s-next"><a href="#What’s-next" class="headerlink" title="What’s next?"></a><a href="https://pm2.keymetrics.io/docs/usage/quick-start/#whats-next" target="_blank" rel="noopener">What’s next?</a></h2><p>Learn how to declare all your application’s behavior options into a <a href="http://pm2.keymetrics.io/docs/usage/application-declaration/" target="_blank" rel="noopener">JSON configuration file</a>.</p><p>Learn how to do <a href="http://pm2.keymetrics.io/docs/usage/signals-clean-restart/" target="_blank" rel="noopener">clean stop and restart</a> to increase reliability.</p><p>Learn how to <a href="http://pm2.keymetrics.io/docs/usage/deployment/" target="_blank" rel="noopener">deploy and update production applications easily</a>.</p><p>Monitor your production applications with <a href="https://keymetrics.io/" target="_blank" rel="noopener">Keymetrics</a>.</p><h2 id="How-to-update-PM2"><a href="#How-to-update-PM2" class="headerlink" title="How to update PM2"></a><a href="https://pm2.keymetrics.io/docs/usage/quick-start/#how-to-update-pm2" target="_blank" rel="noopener">How to update PM2</a></h2><p>Install the latest pm2 version:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2@latest -g</span><br></pre></td></tr></table></figure><p>Then update the in-memory PM2 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 update</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PM2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PM2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用医嘱缩写含义</title>
      <link href="/posts/566f/"/>
      <url>/posts/566f/</url>
      
        <content type="html"><![CDATA[<h1 id="常用缩写"><a href="#常用缩写" class="headerlink" title="常用缩写"></a>常用缩写</h1><table><thead><tr><th>缩写</th><th></th><th>含义</th></tr></thead><tbody><tr><td>qd</td><td>quaque die/every day</td><td>每日一次</td></tr><tr><td>bid</td><td>bis in die/twice day</td><td>每日两次</td></tr><tr><td>tid</td><td>ter in die/three times a day</td><td>每日三次</td></tr><tr><td>qid</td><td>quarter in die/four times a day</td><td>每日四次</td></tr><tr><td>qh</td><td>quaque hora/every hour</td><td>每小时一次</td></tr><tr><td>q2h</td><td>quaque 2 hora/every 2 hous</td><td>每两小时一次</td></tr><tr><td>q4h</td><td>quaque 4 hora/every 4 hous</td><td>每四小时一次</td></tr><tr><td>q6h</td><td>quaque 6 hora/every 6 hous</td><td>每六小时一次</td></tr><tr><td>qn</td><td></td><td>每晚一次</td></tr><tr><td>qod</td><td>quaque omni die/every other day</td><td>隔日一次</td></tr><tr><td>biw</td><td></td><td>每周两次</td></tr><tr><td>hs</td><td></td><td>临睡前</td></tr><tr><td>am</td><td>ante meridiem/before noon</td><td>上午</td></tr><tr><td>pm</td><td>post meridiem/after noon</td><td>下午</td></tr><tr><td>St</td><td>statim/immediately</td><td>立即</td></tr><tr><td>DC</td><td>——/discontinue</td><td>停止 、取消</td></tr><tr><td>prn</td><td>pro re nata/as necessary</td><td>需要时（长期医嘱）</td></tr><tr><td>sos</td><td>si opus sit/one dose if necessary</td><td>需要时（限用一次，12 小时内有效）</td></tr><tr><td>ac</td><td>ante cibum/before meals</td><td>饭前</td></tr><tr><td>pc</td><td></td><td>饭后</td></tr><tr><td>12n</td><td>——/12 clock at noon</td><td>中午 12 点</td></tr><tr><td>12mn</td><td></td><td>午夜 12 点</td></tr><tr><td>gtt</td><td></td><td>滴</td></tr><tr><td>ID</td><td></td><td>皮内注射</td></tr><tr><td>H</td><td></td><td>皮下注射</td></tr><tr><td>IM</td><td></td><td>肌肉注射</td></tr><tr><td>IV</td><td></td><td>静脉注射</td></tr></tbody></table><a id="more"></a><h1 id="处方中的学问"><a href="#处方中的学问" class="headerlink" title="处方中的学问"></a>处方中的学问</h1><h3 id="“Px”的寓意"><a href="#“Px”的寓意" class="headerlink" title="“Px”的寓意"></a>“Px”的寓意</h3><p>假如你去医院看病，医生少不了要给你开一张处方。如果你稍加注意， 便会发现，在处方笺的左上角，有一个“Px”符号(不是 PX 而是大写 R 下加一撇/，因找不到这个符号，故以 Px 代替。），它代表什么意思 呢？ R 是拉丁文“取”“拿”一词的缩写，它的含义是取用以下药物。</p><p>R 上的一撇“/”，是罗马神话中最高中的神朱庇特，它就是希腊神话 中宙斯的符号。因此，综合以上两者，“Px”的寓意是：主神保佑你， 服用以下药物，定会早日康复。</p><h3 id="一日三次-如何用药"><a href="#一日三次-如何用药" class="headerlink" title="一日三次 如何用药"></a>一日三次 如何用药</h3><p>大部分药品说明书或标签上，药品的用法都是标明一日服几次。许多 人服药，常把一日三次的一日，理解为白天这段时间。把用药时间定 在上午、中午和下午，或是三餐前后。其实不然，一日三次是指一天 24 小时而言。</p><p>一日三次，是根据 24 小时内药物在人体血液中的浓度变化制定出来 的。因此，正确的服药时间是每隔 8 小时服药一次。两次服药间隔时 间过长，会影响疗效；两次服药间隔时间过短，会增加药物的毒副作 用。</p><p>考虑到人们的作息规律，一日三次服药时间应该这样安排：早上 7 点， 下午 3 点，晚上 10 点。 同样的道理，每日二次，每日四次，都应以 24 小时来安排服药时间。</p><p>服药的时间还与人体的生物节律及疾病的病理变化有关，目前利用药 物对机体作用的时间节律性进行服药，这种新的学问叫“时辰药理学” 药品缩写名称</p><p>APC 复方阿斯匹林 SB 碳酸氢钠 VA 维生素 A LM 盐酸左旋咪唑 SD 磺胺嘧啶 VAD 维生素 AD OTC 盐酸土霉素 SG 磺胺脒 VB1 维生素 B1 TC 盐酸四环素 SM2 磺胺二甲嘧啶 VB2 维生素 B2 GS 葡萄糖 SDM 磺胺邻二甲氧嘧啶 VB6 维生素 B6 GNS 葡萄糖钠盐 SMD 磺胺对甲氧嘧啶 VB12 维生素 B12 NS 生理盐水 SMM 磺胺间甲氧嘧啶 CO VB 复方维生素 B NM 硫酸新霉素 SMZ 磺胺甲基异恶唑 VC 维生素 C IN 肌醇烟酸酯 CO SMZ 复方磺胺甲基异恶唑 VD 维生素 D PASNa 对氨基水杨酸钠 TMP 甲氧苄氨嘧啶 VE 维生素 E</p><h3 id="处方里的拉丁文"><a href="#处方里的拉丁文" class="headerlink" title="处方里的拉丁文"></a>处方里的拉丁文</h3><p>t.i.d 一日三次 i.m 肌肉注射 p.c 饭后 g 克 b.i.d 一日两次 i.v 静脉注射 a.c 饭前 kg 公斤 s.i.d 一日一次 i.d 皮内注射 h.s 睡时 mg 毫克 q.i.d 一日四次 i.h 皮下注射 a.m 上午 ml 毫升 q.d 每天 i.v.gtt 静脉滴注 p.m 下午 u 单位 q.h 每小时 p.o. 口服 p.r.n 必要时 i.u 国际单位 q.m 每晨 q.n 每晚 s.o.s 需要时 stat.! 立即</p><h3 id="小儿用药量计算法"><a href="#小儿用药量计算法" class="headerlink" title="小儿用药量计算法"></a>小儿用药量计算法</h3><p>1、按年龄计算使用时可根据个别情况，如发育、营养状况、体重或 其他原因酌定剂量。 年龄 剂量 初生～1 个月–1／24 成人剂量 1～6 个月–1／24～1／12 成人剂量 6 个月—–1 岁–1／12～1／8 成人剂量 1～2 岁—-1／8～1／6 成人剂童 2～4 岁—-l6～1／4 成人剂量 4～7 岁—-1／4～1／3 成人剂量 7～11 岁—1／3～1／2 成人剂量 11～14 岁–1／2～2／3 成人剂量 14～18 岁–3／4 成人剂量 注：成人系指 18 岁以上至 60 岁 2、按体重计算 小儿体重（千克）计算法：1～6 个月体重一 3000 克（出生时体重） ＋月龄×600 克 6～12 个月体重＝3000 克（出生时体重）＋月龄 × 500 克 1 岁以上体重（千克）＝年龄×2＋8</p><p>3、按体表面计算 小儿体表面积推算法：体表面积（平方米）一体重（千克）×0．035 ＋0．1</p><h3 id="药品说明书上的学问"><a href="#药品说明书上的学问" class="headerlink" title="药品说明书上的学问"></a>药品说明书上的学问</h3><p>药品名称 药品的名字通常可分为商品名或学名。 学名是世界通用的，从任何教科书或文章上看到的应该是同一个名 称，一般以英文和译文表示。至于商品名，每一家生产药厂都可为它 的产品取一个商品名。因此，相同成分的药品，或是学名相同的药品， 可有很多个商品名，不同的商品名，意味不同厂家的产品，也意味不 同品质的产品。</p><p>药品批准文号 药品的批准文号在“药品管理法”中有具体规定，一种是新药生产必 须经国务院卫生行政部门（卫生部药政司）批准，并发给的批准文号。 另一种是国家已有生产标准或省、自治区、直辖市标准的药品必须经 省、自治区、直辖市卫生行政部门征求同级药品生产经营主管部门同 意后审核批准，并发给的批准文号。 批准文号表示格式如：“湘卫药准字（1996）第 065098 号”。一般由 各省市的标记如湖南省称“湘”、福建省称“闽”。以及批准日的年数， 三部分组成。</p><p>药品有效期 是指保证药物有效的日期。是根据药品的稳定性来确定的。在药品说 明书上有几种写法： “有效期为 1999 年 7 月” 指该药物可用到 1999 年 7 月 31 日 “失效期为 1999 年 7 月” 指该药只能用到 1999 年 6 月 30 日</p><p>“有效期 990701” 指该药到 1999 年 7 月 1 日前有效 “生产日期 980701 有效期 X 年” 指该药的生产日期是 1998 年 7</p><p>月 1 日，该药从这日算起，“X”年内有效。 “批号 980701 有效期 X 年” 指该药的生产日期是 1998 年 7 月 1</p><p>日，该药从这日算起，“X”年内有效。</p><p>主要成分</p><p>有些药品为单一成分，有些为复合成分（复方）。成药里复方产品居 多，医师处方药则单方居多。此处标明的多为主要成分。如感冒清的 主要成分为板蓝根、山芝麻、岗梅根、穿心莲、扑热息痛、盐酸吗啉</p><p>胍等。</p><p>适应证</p><p>适应证或称作用与用途。即根据药品的药理作用及临床应用情况，将 使用本品确有疗效的疾病列入适应证范围。此项在一些中成药的说明 书中常用“功能与主治”表示。</p><p>不良反应</p><p>许多药物在使用过程中会出现各种不同的副作用，除药物本身的特性 外，还与用药者的身体素质、健康状况有关。如有过敏体质的人使用 青霉素、链霉素容易发生过敏反应。有些药品口服后会刺激胃肠道引 起恶心、呕吐等反应，有些药物对肝肾有毒性，使用过程中容易引起 肝、肾功能损害等，这些不良反应就说明书中应简要注明。</p><p>药品用法用量 说明书上的药品用量通常指成人剂量。儿童剂量则要根据年龄或体重 计算。（参见小儿用药知识）有些药品也有注明儿童用量的。 许多中西药的重量用克（g）、 毫克（mg）等表示，容量用毫升（ml） 表示，并按 1 克=1000 毫克，１升=１０００毫升的比例换算。如每 片０．５克与每片５００毫克是相同表示法。 药物用量常注明一日几次，每次多少量；儿童常用每日每公斤体重多 少量来表示。有些药物如生化制剂或抗生素，常用“生物效价”来计 算用量，并以“国际单位”（IU）来表示。中药计量单位以克来表示。 药品的用法，则需根据该药的剂型和特性，注明为口服、肌肉注射、 静脉用药、外用及饭前服、饭后服、睡前服等。病人应严格按照说明 书注明的方法用药。</p><p>注意事项 为了安全使用药物，必须列出该药的慎用、忌用和禁用对象。</p><p>规格</p><p>是指该药每片或每支的含量。</p><p>药品的贮存 药品的贮存保管中，影响药品质量的因素，主要有五大要素：空气（氧 和二氧化碳）、光线、湿度、温度和时间。保管方法有： 密闭密封隔绝空气 主要是选择适当的容器，如纸盒、塑料袋、玻璃 瓶并进行密闭、密封或熔封，以防止空气、水分的入侵。 干燥阴凉避光 干燥指相对湿度为 50-70%。阴凉系指温度不超过 20 摄氏度。 对遇光易变色的、沉淀的药品要求避光，一般选择棕色玻璃容器或黑 色包裹的无色玻璃容器或其它不透光的容器包装。如已烯雌酚、利眠 宁等。 低温冷藏防冻 抗生素、生物制品、脏器制品在高温下易变质，生物</p><p>制品冻结后也能失去活性，乳剂受冻后易破坏分层。冷藏系指 2-10， 一般彩电冰箱保存，如血清、菌苗、类毒素、球蛋白、白蛋白等药品。 但这类药品也要防冻，因为疫苗等冻结后会变性；氢氧化铝、乳白鱼 肝油等药品冻结后易分层。</p><p>有关中药的服药时间及注意点</p><p>一般解表及滋补药宜温服。 实热症、躁狂不安者，药则冷服。 病在胸隔以上者，作用于上焦的药，宜饭后服药。 发汗药也宜饭后服用，以防出汗过多而引起虚脱，服用发汗解表药后， 还要注意避风保温，使全身微微发汗，才有助于更好地发挥治疗作用。 病在心腹以下的疾病宜在饭前服药。 补养药宜饭前空腹服用，有利于药物吸收。 泻药及驱虫药须空腹服用。 早晨发病的五更泻，宜在晚间服药。 一般药物均适合于饭前及饭后 2 小时服用。 对于有些人眼药后而呕吐的，可在药液中加少许姜汁，或用鲜姜擦一 擦病人舌头后再服药就能够防止呕吐。 所以，需根据病情及病情的不同部位和药物的性质而调节服药时间及 注意事项。</p><p>准字号与健字号药的区别</p><p>一般人们常称药品的批准文号是准字号，而保健品的批准文号是健字 号。 药品在包装上都注有 X 卫药准字（生产年份）第 XXXXXX 号的六位 字样。而保健品在其包装上一般标有卫药健字（生产年份）第 XXXX 号四位数字样。 除了批准文号表示不一样外，药品与保健品有着本质的区别。 药品的生产及其配方的组成，生产能力和技术条件都要经过国家有关 部严格审查并通过药理，病理和毒性的严格检验的三年以上的临床观 察后，经有关主管部门鉴定后，方可投入市场。药品的作用就是治病 救人，它与人的生命息息相关。 而保健品顾名思议，就是随着生活水平的提高用来保健和辅助治疗用 的。因此，它的药物含量较低，所以保健品的生产只须卫生监督部的 审查批准，而不须经过医院临床实验等便可投入市场。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>统计分析基础</title>
      <link href="/posts/d217/"/>
      <url>/posts/d217/</url>
      
        <content type="html"><![CDATA[<h1 id="t检验"><a href="#t检验" class="headerlink" title="t检验"></a>t检验</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql备份数据库，不同方式大小不一致</title>
      <link href="/posts/cc8a/"/>
      <url>/posts/cc8a/</url>
      
        <content type="html"><![CDATA[<h1 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h1><p>使用mysqldump命令和用navicat备份出来的数据库大小不一样。</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>navicat 备份的会写完整的语句，包括列名都写进去。另外navicat还会增加换行，比如 insert into 后就加了换行，而 dump 的就不加。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql的表碎片处理</title>
      <link href="/posts/4093/"/>
      <url>/posts/4093/</url>
      
        <content type="html"><![CDATA[<h1 id="一、表碎片的产生"><a href="#一、表碎片的产生" class="headerlink" title="一、表碎片的产生"></a>一、表碎片的产生</h1><p>对于mysql表数据，当你delete掉很多数据时，这些数据占用的磁盘空间可能并不会立刻被回收；比如一张表有10G的数据，delete掉1G数据后，再查看表ibd文件会发现文件大小可能还是10G；如果这个表有insert操作的话，那么mysql就会优先考虑能不能将新数据存储到空白空间上，容易出现这样的情况：某个空白空间的大小是2MB，新插入一条数据大小是1.5MB并存储到该空白空间上，这时就会产生更小的空白空间，而这种更小的空白空间更难被利用，如果像这种碎片非常多，就会比较浪费资源而且降低表磁盘I/O性能。<br>对于频繁地update操作，也很容易产生碎片问题。比如对于可变长字段，如varchar、text、blob等字段，如果update操作将数据大小改小，那么也会产生碎片问题。<br>mysql目前比较常用的引擎是innodb和myisam，这两种引擎下都有可能产生碎片，碎片的产生和消除都是随机的，而碎片越多会给查询扫描工作带来越大的影响。</p><h1 id="二、查看表碎片的方式"><a href="#二、查看表碎片的方式" class="headerlink" title="二、查看表碎片的方式"></a>二、查看表碎片的方式</h1><h1 id="1、data-length-index-length与ibd文件大小的比较"><a href="#1、data-length-index-length与ibd文件大小的比较" class="headerlink" title="1、data_length+index_length与ibd文件大小的比较"></a>1、data_length+index_length与ibd文件大小的比较</h1><p>mysql5.5默认是共享表空间，从5.6开始默认是独立表空间，每张表有自己的文件空间。查看方式就是看数据文件大小和表数据量大小的差异：可以先在数据库中通过系统表information_schema.tables或者“show table status like ‘tb’ ”语句计算出data_length+index_length的值，再到操作系统上查看对应表的ibd文件(或者myd、myi文件)的物理大小。如果ibd文件比data_length+index_length值大很多，说明表存在碎片。<br>例如查看test库下student表的碎片空间情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select table_name,(data_length+index_length)/1024/1024 length,engine,data_free    </span><br><span class="line">    -&gt; from information_schema.tables    </span><br><span class="line">    -&gt; <span class="built_in">where</span> table_name=<span class="string">'student'</span>;</span><br><span class="line">+------------+-------------+--------+-----------+</span><br><span class="line">| table_name | length      | engine | data_free |</span><br><span class="line">+------------+-------------+--------+-----------+</span><br><span class="line">| student    | 72.14062500 | InnoDB |   4194304 |</span><br><span class="line">+------------+-------------+--------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line">[root@cos7-jiang <span class="built_in">test</span>]<span class="comment"># ll -h student.ibd</span></span><br><span class="line">-rw-rw----. 1 mysql mysql 76M Dec 12 13:53 student.ibd</span><br></pre></td></tr></table></figure><p>根据系统表计算出student表数据为72MB，查看ibd文件大小为76MB，碎片空间大概有4MB左右，不算太多。</p><h1 id="2、通过系统表tables的data-free字段看表碎片"><a href="#2、通过系统表tables的data-free字段看表碎片" class="headerlink" title="2、通过系统表tables的data_free字段看表碎片"></a>2、通过系统表tables的data_free字段看表碎片</h1><p>mysql的系统表information_schema.tables中记录着每张表的数据、索引大小，行数等重要信息，主要字段信息如下：<br>table_schema：表所在数据库名<br>table_name：表名<br>engine：表的存储引擎<br>tables_rows：表数据行数<br>data_length：数据长度，即表数据大小，单位字节<br>index_length：索引长度，即表索引大小，单位字节<br>data_free：已分配但未使用的空间大小，单位字节，可以认为是碎片空间<br>通过data_free字段可以查出数据库中有哪些表产生了碎片，data_length+index_length值就是表数据量总大小(拿这个求和值与表数据文件大小比较，得到的差值往往与data_free值不一样，不知道为什么)。<br>可以用下面的SQL来统计数据库中有哪些表产生了碎片空间：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select table_name,table_schema,engine,table_rows,data_length+index_length length,data_free    </span><br><span class="line">    -&gt; from information_schema.tables    </span><br><span class="line">    -&gt; <span class="built_in">where</span> data_free !=0</span><br><span class="line">    -&gt; and table_schema not <span class="keyword">in</span>(<span class="string">'information_schema'</span>,<span class="string">'mysql'</span>,<span class="string">'performance_schema'</span>);</span><br><span class="line">+------------+--------------+--------+------------+----------+----------+</span><br><span class="line">| table_name | table_schema | engine | table_rows | length   | data_free|</span><br><span class="line">+------------+--------------+--------+------------+----------+----------+</span><br><span class="line">| student    | <span class="built_in">test</span>         | InnoDB |    1075752 | 75644928 |   4194304|</span><br><span class="line">+------------+--------------+--------+------------+----------+----------+</span><br></pre></td></tr></table></figure><p>data_free值可以反映出表的碎片空间大小。上面student表data_free显示4M，与上一个方式计算出的碎片大小近似吻合。</p><h1 id="三、清理表碎片"><a href="#三、清理表碎片" class="headerlink" title="三、清理表碎片"></a>三、清理表碎片</h1><p>一般通过optimize命令清理碎片，不过optimize命令对共享表空间不起作用。<br>对于mysql5.6，如果执行optimize table tb_name优化innodb表可能会报如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; optimize table jiang;</span><br><span class="line">+------------+----------+----------+-------------------------------------------------------------------+</span><br><span class="line">| Table      | Op       | Msg_type | Msg_text                                                          |</span><br><span class="line">+------------+----------+----------+-------------------------------------------------------------------+</span><br><span class="line">| test.jiang | optimize | note     | Table does not support optimize, doing recreate + analyze instead |</span><br><span class="line">| test.jiang | optimize | status   | OK                                                                |</span><br><span class="line">+------------+----------+----------+-------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>对于innodb表的优化，可以用alter table tb_name engine=innodb的形式优化，对于myisam表的优化可以直接使用optimize。</p><h1 id="四、optimize操作介绍"><a href="#四、optimize操作介绍" class="headerlink" title="四、optimize操作介绍"></a>四、optimize操作介绍</h1><p>mysql5.6的官方文档在13.7.2.4小节对optimize操作有详细的介绍。optimize table命令的作用是重新组织表数据和关联索引数据的物理存储，以减小存储空间并提高访问表时的I/O效率；命令主要作用于innodb、myisam和archive引擎表，而命令对表所做的实际更改取决于该表使用的存储引擎。<br><strong>·innodb引擎下的optimize操作</strong><br>对于innodb表，optimize table操作实际映射为alter table … force操作，当对innodb表执行optimize操作时可能会出现下面的提示信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; optimize table jiang;</span><br><span class="line">+------------+----------+----------+-------------------------------------------------------------------+</span><br><span class="line">| Table      | Op       | Msg_type | Msg_text                                                          |</span><br><span class="line">+------------+----------+----------+-------------------------------------------------------------------+</span><br><span class="line">| test.jiang | optimize | note     | Table does not support optimize, doing recreate + analyze instead |</span><br><span class="line">| test.jiang | optimize | status   | OK                                                                |</span><br><span class="line">+------------+----------+----------+-------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>这实际上已经对表做了优化，第一步是提示optimize操作不适用该类型表，第二步是映射为alter table操作执行并成功。<br>在mysql5.6.17之前，optimize操作没有使用online DDL，因此整个操作期间会锁表，表上不允许有DML操作；<br>从mysql5.6.17开始，对于常规的和分区的innodb表，optimize操作使用online DDL，这样只会在操作的准备阶段和提交阶段锁住DML操作，大大提高了并发性。</p><p>说明：<br>1、对于写比较频繁的表，容易产生碎片问题，但也不用经常进行清理，一般每周或者每月一次就可以了；<br>2、OPTIMIZE TABLE只对MyISAM，BDB和InnoDB表起作用，尤其是MyISAM表的作用最为明显。此外，并不是所有表都需要进行碎片整理，一般只需要对包含可变长度的文本数据类型的表进行整理即可。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-12</title>
      <link href="/posts/2763/"/>
      <url>/posts/2763/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随访-日间手术</title>
      <link href="/posts/76cc/"/>
      <url>/posts/76cc/</url>
      
        <content type="html"><![CDATA[<h1 id="日间手术介绍"><a href="#日间手术介绍" class="headerlink" title="日间手术介绍"></a>日间手术介绍</h1><p>日间手术是临床诊断明确的患者在24小时内完成计划性住院、手术、术后短暂观察并出院的一种手术模式。</p><p>日间手术的产生及发展完全出于改善患者诊疗服务的目的。它在缓解病人住院难、缩短患者住院天数、降低医疗费用、节约医保基金、加快医院病床周转率等方面具有显著的积极作用。据文献资料查找，通过日间手术的开展，同种手术患者的平均住院费用可降低10~40%，平均住院天数可降低2~5天。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p><img src="https://i.loli.net/2019/11/28/b5FIoS9ZQ17ABmg.png" alt></p><h1 id="功能模块设计"><a href="#功能模块设计" class="headerlink" title="功能模块设计"></a>功能模块设计</h1><h3 id="患者管理"><a href="#患者管理" class="headerlink" title="患者管理"></a>患者管理</h3><p>对要做日间手术的患者进行管理。</p><ul><li><p>添加日间手术患者（从门诊记录根据科室、诊断添加患者）。操作（入组、暂不入组、不可入组），入组需要选择手术方式（宫腔镜手术、腹腔镜手术、其他）</p></li><li><p>手术患者列表可根据门诊号、姓名、门诊诊断、术前评估状态（待评估、评估中、评估完成、强制评估完成）、预约状态（待预约、已预约、取消预约、爽约）、入组时间进行搜索</p></li><li><p>列表可以点击病程管理进入病程管理页面，可以查看患者当前所处阶段，任务执行情况。</p></li></ul><h3 id="麻醉会诊管理"><a href="#麻醉会诊管理" class="headerlink" title="麻醉会诊管理"></a>麻醉会诊管理</h3><p>麻醉科医生对日间手术患者进行麻醉评估，可查看已评估患者的评估说明。</p><h3 id="排班管理"><a href="#排班管理" class="headerlink" title="排班管理"></a>排班管理</h3><p>维护日间手术排班。</p><ul><li><p>可维护本周至之后3周的排班信息（包含本周）。</p></li><li><p>设置排班模版。</p></li><li><p>根据模版生成一年排班。</p></li><li><p>推送排班信息</p></li><li><p>默认显示下一周排班。</p></li></ul><h3 id="排班总览"><a href="#排班总览" class="headerlink" title="排班总览"></a>排班总览</h3><p>查看排班信息。</p><ul><li>默认显示当前周排班。</li></ul><h3 id="预约管理"><a href="#预约管理" class="headerlink" title="预约管理"></a>预约管理</h3><p>对日间手术预约情况进行管理。</p><ul><li><p>待预约。对未预约患者预约手术时间。</p></li><li><p>已预约。查看已预约患者信息，群发术前宣教，导出患者数据。</p></li><li><p>已取消。查看取消预约患者信息及取消原因，删除预约记录。</p></li><li><p>已爽约。查看爽约患者信息及爽约原因，删除预约记录。</p></li></ul><h3 id="医生管理"><a href="#医生管理" class="headerlink" title="医生管理"></a>医生管理</h3><p>维护日间手术的医生、手术室信息。</p><h3 id="医生手术管理"><a href="#医生手术管理" class="headerlink" title="医生手术管理"></a>医生手术管理</h3><p>给已预约患者分配手术医生、手术室、及手术顺序号。</p><h3 id="医生手术总览"><a href="#医生手术总览" class="headerlink" title="医生手术总览"></a>医生手术总览</h3><p>查看医生手术排台情况。</p><h3 id="疾病路径管理"><a href="#疾病路径管理" class="headerlink" title="疾病路径管理"></a>疾病路径管理</h3><p>维护日间手术随访路径。</p><ul><li><p>术前任务根据手术方式（宫腔镜、腹腔镜、其他）匹配路径。</p></li><li><p>术后任务根据手术名称匹配路径。</p></li></ul><h3 id="任务管理"><a href="#任务管理" class="headerlink" title="任务管理"></a>任务管理</h3><p>病程管理任务列表。可根据任务状态（已完成、未完成）、发送状态（未发送、已发送、已回复、异常）、计划发送时间等搜索。</p><ul><li><p>手动发送</p></li><li><p>删除任务</p></li><li><p>AI推送</p></li><li><p>随访</p></li></ul><h1 id="E-R图"><a href="#E-R图" class="headerlink" title="E-R图"></a>E-R图</h1><p><img src="https://i.loli.net/2019/11/28/kCwF91uvUel2mOj.png" alt></p><h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1>]]></content>
      
      
      <categories>
          
          <category> 随访 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随访 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql innodb_force_recovery</title>
      <link href="/posts/c4ed/"/>
      <url>/posts/c4ed/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p><strong>t_repository_form_answer</strong>数据量近亿级，需要增加字段，新建临时表<strong>t_repository_form_answer_tmp</strong>（增加字段），copy数据到临时表，删除原表，修改临时表名。</p><p>由于数据量过大，导致copy数据耗时太久，回滚版本未及时kill掉数据库进程，1天后发现copy进程还在，kill掉进程出现killed死锁。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> information_schema.INNODB_TRX</span><br></pre></td></tr></table></figure><p>查询trx_rows_modified数据量高达6000万，mysql在执行事务回滚操作，但是数据减小速度比较慢，同时表锁住导致表单提交答案失败。</p><a id="more"></a><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol><li>修改mysql配置文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 不执行事务回滚操作</span><br><span class="line">innodb_force_recovery = 3</span><br></pre></td></tr></table></figure><ol start="2"><li><p>重启mysql</p><p>重启mysql后发现<strong>trx_rows_modifie</strong>数据不再变化，说明数据库不在执行事务回滚操作，但是启动程序提示<strong>operation not allowed when  innodb_force_recovery &gt; 0</strong>，因为innodb_force_recovery大于0后，可以对标进行select、create、drop操作，但insert、update或者delete这类操作是不允许的</p><p>注：通过windows服务停止、启动mysql耗时比较久会提示异常信息，无视。可以取资源管理器结束mysql进程。</p></li><li><p>删除临时表<strong>t_repository_form_answer_tmp</strong></p></li><li><p>修改<strong>innodb_force_recovery=0</strong></p></li><li><p>重启mysql，重启后<strong>trx_rows_modified</strong>会减少的很快，最终变为0</p></li></ol><h1 id="innodb-force-recovery参数介绍"><a href="#innodb-force-recovery参数介绍" class="headerlink" title="innodb_force_recovery参数介绍"></a>innodb_force_recovery参数介绍</h1><p>参数innodb_force_recovery影响了整个Innodb存储引擎的恢复状况。该值默认为0，表示当需要恢复时执行所有的恢复操作。当不能进行有效恢复时，如数据页发生了corruption，Mysql数据库可能会宕机，并把错误写入错误日志中。<br>        但在某些情况下，可能不需要执行完整的恢复操作。例如在进行alter table操作时，这时发生意外，数据库重启时会对Innodb表执行回滚操作。对于一个大表，这需要很长时间，甚至可能是几个小时。这时可以自行恢复，例如将表删除，从备份中重新将数据导入表中，这些操作可能要快于回滚操作。</p><p>Innodb_force_recovery可以设置6个非零值：</p><ul><li><p>1(SRV_FORCE_IGNORE_CORRUPT):忽略检查到的corrupt页。</p></li><li><p>2(SRV_FORCE_NO_BACKGROUND):阻止主线程的运行，如主线程需要执行full purge操作，会导致crash。</p></li><li><p>3(SRV_FORCE_NO_TRX_UNDO):不执行事务回滚操作。</p></li><li><p>4(SRV_FORCE_NO_IBUF_MERGE):不执行插入缓冲的合并操作。</p></li><li><p>5(SRV_FORCE_NO_UNDO_LOG_SCAN):不查看重做日志，InnoDB存储引擎会将未提交的事务视为已提交。</p></li><li><p>6(SRV_FORCE_NO_LOG_REDO):不执行前滚的操作。     </p><p>备注：当设置innodb_force_recovery大于0后，可以对标进行select、create、drop操作，但insert、update或者delete这类操作是不允许的。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 统计每张表的记录数</title>
      <link href="/posts/59c5/"/>
      <url>/posts/59c5/</url>
      
        <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> information_schema;</span><br><span class="line"></span><br><span class="line"><span class="comment"># cloud_followup_v2 为要统计的数据库名</span></span><br><span class="line"><span class="keyword">SELECT</span> table_name,table_rows <span class="keyword">FROM</span> <span class="keyword">TABLES</span> <span class="keyword">WHERE</span> TABLE_SCHEMA = <span class="string">'cloud_followup_v2'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> table_rows <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><p>InnoDB 引擎统计出的table_rows 为大概值。</p><p>官方文档解释如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TABLE_ROWS</span><br><span class="line"></span><br><span class="line">The number of rows. Some storage engines, such as MyISAM, store the exact count. For other storage engines, such as InnoDB, this value is an approximation, and may vary from the actual value by as much as 40% to 50%. In such cases, use SELECT COUNT(*) to obtain an accurate count.</span><br><span class="line"></span><br><span class="line">TABLE_ROWS is NULL for INFORMATION_SCHEMA tables.</span><br><span class="line"></span><br><span class="line">For InnoDB tables, the row count is only a rough estimate used in SQL optimization. (This is also true if the InnoDB table is partitioned.)</span><br></pre></td></tr></table></figure><p>行数。一些存储引擎（例如 <code>MyISAM</code>）存储准确的计数。对于其他存储引擎，例如<code>InnoDB</code>，该值是一个近似值，可能与实际值相差40％至50％。在这种情况下，请使用<code>SELECT COUNT(*)</code>以获得准确的计数。</p><p><code>TABLE_ROWS</code>是<code>NULL</code>对 <code>INFORMATION_SCHEMA</code>表。</p><p>对于<a href="https://dev.mysql.com/doc/refman/5.6/en/innodb-storage-engine.html" title="第14章InnoDB存储引擎" target="_blank" rel="noopener"><code>InnoDB</code></a>表，行数只是SQL优化中使用的粗略估计。（如果<a href="https://dev.mysql.com/doc/refman/5.6/en/innodb-storage-engine.html" title="第14章InnoDB存储引擎" target="_blank" rel="noopener"><code>InnoDB</code></a>表已分区，则也是如此。）</p>]]></content>
      
      
      <categories>
          
          <category> Mysq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级筛选</title>
      <link href="/posts/df68/"/>
      <url>/posts/df68/</url>
      
        <content type="html"><![CDATA[<h1 id="高级筛选"><a href="#高级筛选" class="headerlink" title="高级筛选"></a>高级筛选</h1><p>Java解析运算表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">//高级筛选 option1、option2、option3、option4为筛选条件</span></span><br><span class="line">String input = <span class="string">"((option1&amp;&amp;option2)||(option3&amp;&amp;option4))"</span>;</span><br><span class="line"><span class="comment">//用正则表达式去掉逻辑运算符</span></span><br><span class="line">String optionStr = input.replaceAll(<span class="string">"[\\(\\)]"</span>, <span class="string">""</span>).replaceAll(<span class="string">"\\&amp;&amp;"</span>, <span class="string">","</span>).replaceAll(<span class="string">"\\|\\|"</span>, <span class="string">","</span>);</span><br><span class="line">System.out.println(<span class="string">"option String: "</span> + optionStr);</span><br><span class="line">List&lt;String&gt; optionList = Arrays.asList(optionStr.split(<span class="string">","</span>));</span><br><span class="line"><span class="comment">//条件最大值</span></span><br><span class="line"><span class="keyword">int</span> maxOption = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (String option : optionList) &#123;</span><br><span class="line">    <span class="keyword">int</span> optionNum = Integer.parseInt(option.replace(<span class="string">"option"</span>, <span class="string">""</span>));</span><br><span class="line">    <span class="keyword">if</span> (optionNum &gt; maxOption) &#123;</span><br><span class="line">        maxOption = optionNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"option maxNum: "</span> + maxOption);</span><br><span class="line">System.out.println(<span class="string">"option List: "</span> + JSON.toJSONString(optionList));</span><br><span class="line"><span class="comment">//执行各个条件查询，将结果放到map中，key为条件条件，value为结果集合</span></span><br><span class="line"><span class="keyword">int</span> size = optionList.size();</span><br><span class="line">Map&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">        list.add(<span class="string">"empi-"</span> + (j + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(optionList.get(i), list);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"option and result map: "</span> + JSON.toJSONString(map));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 正则表达式匹配，求出最小运算单元结果集，并替换</span></span><br><span class="line"><span class="comment"> * ((option1&amp;&amp;option2)||(option3&amp;&amp;option4))</span></span><br><span class="line"><span class="comment"> * --&gt;(option5||(option3&amp;&amp;option4))</span></span><br><span class="line"><span class="comment"> * --&gt;(option5||option6)</span></span><br><span class="line"><span class="comment"> * --&gt;option7  最终结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Pattern r = Pattern.compile(<span class="string">"\\(option[0-9]&amp;&amp;option[0-9]\\)|\\(option[0-9]\\|\\|option[0-9]\\)"</span>);</span><br><span class="line">Pattern r1 = Pattern.compile(<span class="string">"option[0-9]"</span>);</span><br><span class="line">Matcher m = r.matcher(input);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">    String temp = m.group();</span><br><span class="line">    System.out.println(temp);</span><br><span class="line">    Matcher m1 = r1.matcher(temp);</span><br><span class="line">    m1.find();</span><br><span class="line">    String option1 = m1.group();</span><br><span class="line">    m1.find();</span><br><span class="line">    String option2 = m1.group();</span><br><span class="line">    System.out.println(option1 + <span class="string">"--"</span> + option2);</span><br><span class="line">    maxOption++;</span><br><span class="line"></span><br><span class="line">    List list1 = map.get(option1);</span><br><span class="line">    List list2 = map.get(option2);</span><br><span class="line">    <span class="keyword">if</span> (temp.contains(<span class="string">"&amp;&amp;"</span>)) &#123;</span><br><span class="line">        list1.retainAll(list2);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        list1.removeAll(list2);</span><br><span class="line">        list1.addAll(list2);</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(<span class="string">"option"</span> + maxOption, list1);</span><br><span class="line">    input = input.replace(temp, <span class="string">"option"</span> + maxOption);</span><br><span class="line">    System.out.println(<span class="string">"input: "</span> + input);</span><br><span class="line">    m = r.matcher(input);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"option and result map: "</span> + JSON.toJSONString(map));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http 400</title>
      <link href="/posts/f424/"/>
      <url>/posts/f424/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p><img src="https://i.loli.net/2019/11/23/RvLSlzmIuZFTr2M.png" alt></p><a id="more"></a><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>400 bad request – 错误的请求，是由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。</p><p>上图中问题的原因为：url参数中带<code>|</code>特殊字符</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>post请求将参数放到body中</p>]]></content>
      
      
      <categories>
          
          <category> Http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql kill进程后出现killed死锁</title>
      <link href="/posts/d8a2/"/>
      <url>/posts/d8a2/</url>
      
        <content type="html"><![CDATA[<h1 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h1><p>  有一张3亿的表，现在要对这张表进行删除1亿行，于是有人开始运行<code>delete from table limit 100000000</code>;毫无疑问这是一个愚蠢的删除方式，于是有人开始变更删除方式：<code>delete from table where id&lt;100000000</code>;然而运行一段时间后，又发现批量删除的效率可能会更高，所以kill掉了上一条运行了一段时间的sql，开始批量删除， 由于是大sql，晚上点击运行想第二天早上来看结果的DBA就会遗憾的发现新执行的sql被锁给挡了回来，并没有运行，导致浪费了一晚上的时间。但是盲目的等待锁释放心里没底，所以我们可以通过下面的方式计算出这个锁什么时候能够释放，我们就可以使用表了。</p><a id="more"></a><p>场景：<br>一个巨大的delete语句 执行一小时后kill ，<code>show processlist</code>出现killed进程 ，<strong>不要盲目重启</strong>！ 重启MySQL后进程消失但锁依然存在！重启MySQL后进程消失但锁依然存在，因为回滚还要继续，这是mysql对数据的保护机制。</p><p>通过下列语句查询事务情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># trx_rows_modified 代表锁影响的行数，当数值为0时，锁将会释放</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> information_schema.INNODB_TRX</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看表锁信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> information_schema.INNODB_LOCKS</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> information_schema.INNODB_LOCK_waits</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/22/gI5VCKUGpwPqxhj.png" alt></p><p><img src="https://i.loli.net/2019/11/22/iDbr82I5XUuBPEL.png" alt></p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>时间过长的update、delete等语句在kill之后会进行回滚操作，会锁表，经常有人更换不同方式对大数据进行修改删除，然而盲目的杀死正在长时间运行的进程后并不能马上对表进行新的操作，后果只能是等待之前的操作回滚结束，本想用更快的方式操作表结果得不偿失，所以还是建议选择好对表修改操作方式然后一次运行，不再修改。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>演示环境</title>
      <link href="/posts/922c/"/>
      <url>/posts/922c/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      
      
      <categories>
          
          <category> Jh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装机</title>
      <link href="/posts/79f3/"/>
      <url>/posts/79f3/</url>
      
        <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>办公使用，常用软件：微信、钉钉、QQ、office、几何画板、录屏软件、pdf、视频、音乐</p><table><thead><tr><th></th><th>型号</th><th>价格</th></tr></thead><tbody><tr><td>CPU</td><td>AMD 锐龙3 2200G（盒装）</td><td>599</td></tr><tr><td>主板</td><td>华擎 A320</td><td>359</td></tr><tr><td>内存条</td><td>海盗船 DDR4 3200</td><td>258</td></tr><tr><td>固态硬盘</td><td>三星 970 EVO Plus 250G</td><td>479</td></tr><tr><td>硬盘</td><td>西部数据 蓝盘 1T</td><td>299</td></tr><tr><td>机箱</td><td>先马 黑洞</td><td>289</td></tr><tr><td>电源</td><td>长城HOPE-6000DS</td><td>269</td></tr><tr><td>散热器</td><td>盒装自带幽灵散热器</td><td></td></tr><tr><td>显卡</td><td>无</td><td></td></tr><tr><td>显示器</td><td>Philip 243S7EHMB</td><td>799</td></tr><tr><td>鼠标键盘</td><td>罗技（Logitech）MK275</td><td>95</td></tr><tr><td>无线网卡</td><td>TP-LINK TL-WN725N</td><td>51</td></tr><tr><td>总价</td><td></td><td>3270</td></tr></tbody></table><h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><ul><li><p>office</p></li><li><p>Snipaste</p></li><li><p>Listary</p></li><li><p>Everything</p></li><li><p>SpaceSniffer</p></li><li><p>fences</p></li><li><p>Bandizip</p></li><li><p>Potplayer</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux三剑客：grep、awk 和 sed</title>
      <link href="/posts/16f9/"/>
      <url>/posts/16f9/</url>
      
        <content type="html"><![CDATA[<h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p>global search regular expression(RE) and print out the line</p><p>基于正则表达式查找满足条件的行</p><h3 id="grep-语法"><a href="#grep-语法" class="headerlink" title="grep 语法"></a>grep 语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">grep pattern file</span><br><span class="line">grep -i pattern file <span class="comment">#忽略大小写</span></span><br><span class="line">grep -v pattern file <span class="comment">#不显示匹配的行</span></span><br><span class="line">grep -o pattern file <span class="comment">#把每个匹配的内容用独立的行显示</span></span><br><span class="line">grep -E pattern file <span class="comment">#使用扩展正则表达式</span></span><br><span class="line">grep -A -B -C pattern file <span class="comment">#打印命中数据的上下文</span></span><br><span class="line">grep pattern -r dir / <span class="comment">#递归搜索</span></span><br></pre></td></tr></table></figure><h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><p>名字来源于三个作者的名字简称</p><p>根据定位到的数据行处理其中的分段</p><h3 id="awk-语法"><a href="#awk-语法" class="headerlink" title="awk 语法"></a>awk 语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'pattern&#123;action&#125;'</span></span><br><span class="line">awk <span class="string">'BEGIN&#123;&#125;END&#123;&#125;'</span> <span class="comment">#开始和结束</span></span><br><span class="line">awk <span class="string">'/Running/'</span> <span class="comment">#正则匹配</span></span><br><span class="line">awk <span class="string">'/aa/,/bb/'</span> <span class="comment">#区间选择</span></span><br><span class="line">awk <span class="string">'$2~/xxx/'</span> <span class="comment">#字段匹配</span></span><br><span class="line">awk <span class="string">'NR==2'</span> <span class="comment">#取第二行</span></span><br><span class="line">awk <span class="string">'NR&gt;1'</span> <span class="comment">#去掉第一行</span></span><br></pre></td></tr></table></figure><h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h1><p>steam editor</p><p>根据定位到的数据行修改数据</p><h3 id="sed-语法"><a href="#sed-语法" class="headerlink" title="sed 语法"></a>sed 语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sed [addr]X[options]</span><br><span class="line">-e 表达式</span><br><span class="line">sed -n <span class="string">'2p'</span> <span class="comment">#打印第二行</span></span><br><span class="line">sed <span class="string">'s#hello#world#'</span> <span class="comment">#修改</span></span><br><span class="line">-i <span class="comment">#直接修改源文件</span></span><br><span class="line">-E <span class="comment">#扩展表达式</span></span><br><span class="line">--debug <span class="comment">#调试</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB常用查询</title>
      <link href="/posts/41c4/"/>
      <url>/posts/41c4/</url>
      
        <content type="html"><![CDATA[<h1 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h1><p>mongoDB 支持正则表达式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.products.find( &#123; sku: &#123; <span class="variable">$regex</span>: /789$/ &#125; &#125; )</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> sku <span class="keyword">like</span> <span class="string">"%789"</span>;</span><br></pre></td></tr></table></figure><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="variable">$sort</span>: &#123; &lt;field1&gt;: &lt;sort order&gt;, &lt;field2&gt;: &lt;sort order&gt; ... &#125; &#125;</span><br></pre></td></tr></table></figure><ul><li><code>1</code> to specify ascending order. 顺序</li><li><code>-1</code> to specify descending order. 倒序</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.users.aggregate(</span><br><span class="line">   [</span><br><span class="line">     &#123; <span class="variable">$sort</span> : &#123; age : -1, posts: 1 &#125; &#125;</span><br><span class="line">   ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.find().<span class="built_in">limit</span>(NUMBER).skip()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB Operators</title>
      <link href="/posts/ffc1/"/>
      <url>/posts/ffc1/</url>
      
        <content type="html"><![CDATA[<h1 id="Comparison-Query-Operators"><a href="#Comparison-Query-Operators" class="headerlink" title="Comparison Query Operators"></a>Comparison Query Operators</h1><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/eq/#op._S_eq" title="$eq" target="_blank" rel="noopener"><code>$eq</code></a></td><td>Matches values that are equal to a specified value.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/gt/#op._S_gt" title="$gt" target="_blank" rel="noopener"><code>$gt</code></a></td><td>Matches values that are greater than a specified value.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/gte/#op._S_gte" title="$gte" target="_blank" rel="noopener"><code>$gte</code></a></td><td>Matches values that are greater than or equal to a specified value.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/in/#op._S_in" title="$in" target="_blank" rel="noopener"><code>$in</code></a></td><td>Matches any of the values specified in an array.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/lt/#op._S_lt" title="$lt" target="_blank" rel="noopener"><code>$lt</code></a></td><td>Matches values that are less than a specified value.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/lte/#op._S_lte" title="$lte" target="_blank" rel="noopener"><code>$lte</code></a></td><td>Matches values that are less than or equal to a specified value.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/ne/#op._S_ne" title="$ne" target="_blank" rel="noopener"><code>$ne</code></a></td><td>Matches all values that are not equal to a specified value.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/nin/#op._S_nin" title="$nin" target="_blank" rel="noopener"><code>$nin</code></a></td><td>Matches none of the values specified in an array.</td></tr></tbody></table><h1 id="Logical-Query-Operators"><a href="#Logical-Query-Operators" class="headerlink" title="Logical Query Operators"></a>Logical Query Operators</h1><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/and/#op._S_and" title="$and" target="_blank" rel="noopener"><code>$and</code></a></td><td>Joins query clauses with a logical <code>AND</code> returns all documents that match the conditions of both clauses.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/not/#op._S_not" title="$not" target="_blank" rel="noopener"><code>$not</code></a></td><td>Inverts the effect of a query expression and returns documents that do <em>not</em> match the query expression.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/nor/#op._S_nor" title="$nor" target="_blank" rel="noopener"><code>$nor</code></a></td><td>Joins query clauses with a logical <code>NOR</code> returns all documents that fail to match both clauses.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/or/#op._S_or" title="$or" target="_blank" rel="noopener"><code>$or</code></a></td><td>Joins query clauses with a logical <code>OR</code> returns all documents that match the conditions of either clause.</td></tr></tbody></table><h1 id="Element-Query-Operators"><a href="#Element-Query-Operators" class="headerlink" title="Element Query Operators"></a>Element Query Operators</h1><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/exists/#op._S_exists" title="$exists" target="_blank" rel="noopener"><code>$exists</code></a></td><td>Matches documents that have the specified field.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/type/#op._S_type" title="$type" target="_blank" rel="noopener"><code>$type</code></a></td><td>Selects documents if a field is of the specified type.</td></tr></tbody></table><h1 id="Evaluation-Query-Operators"><a href="#Evaluation-Query-Operators" class="headerlink" title="Evaluation Query Operators"></a>Evaluation Query Operators</h1><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/expr/#op._S_expr" title="$expr" target="_blank" rel="noopener"><code>$expr</code></a></td><td>Allows use of aggregation expressions within the query language.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/jsonSchema/#op._S_jsonSchema" title="$jsonSchema" target="_blank" rel="noopener"><code>$jsonSchema</code></a></td><td>Validate documents against the given JSON Schema.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/mod/#op._S_mod" title="$mod" target="_blank" rel="noopener"><code>$mod</code></a></td><td>Performs a modulo operation on the value of a field and selects documents with a specified result.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/regex/#op._S_regex" title="$regex" target="_blank" rel="noopener"><code>$regex</code></a></td><td>Selects documents where values match a specified regular expression.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/text/#op._S_text" title="$text" target="_blank" rel="noopener"><code>$text</code></a></td><td>Performs text search.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/where/#op._S_where" title="$where" target="_blank" rel="noopener"><code>$where</code></a></td><td>Matches documents that satisfy a JavaScript expression.</td></tr></tbody></table><h1 id="Geospatial-Query-Operators"><a href="#Geospatial-Query-Operators" class="headerlink" title="Geospatial Query Operators"></a>Geospatial Query Operators</h1><h3 id="Query-Selectors"><a href="#Query-Selectors" class="headerlink" title="Query Selectors"></a>Query Selectors</h3><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/geoIntersects/#op._S_geoIntersects" title="$geoIntersects" target="_blank" rel="noopener"><code>$geoIntersects</code></a></td><td>Selects geometries that intersect with a <a href="https://docs.mongodb.com/manual/reference/glossary/#term-geojson" target="_blank" rel="noopener">GeoJSON</a> geometry. The <a href="https://docs.mongodb.com/manual/core/2dsphere/" target="_blank" rel="noopener">2dsphere</a> index supports <a href="https://docs.mongodb.com/manual/reference/operator/query/geoIntersects/#op._S_geoIntersects" title="$geoIntersects" target="_blank" rel="noopener"><code>$geoIntersects</code></a>.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/geoWithin/#op._S_geoWithin" title="$geoWithin" target="_blank" rel="noopener"><code>$geoWithin</code></a></td><td>Selects geometries within a bounding <a href="https://docs.mongodb.com/manual/reference/geojson/#geospatial-indexes-store-geojson" target="_blank" rel="noopener">GeoJSON geometry</a>. The <a href="https://docs.mongodb.com/manual/core/2dsphere/" target="_blank" rel="noopener">2dsphere</a> and <a href="https://docs.mongodb.com/manual/core/2d/" target="_blank" rel="noopener">2d</a> indexes support <a href="https://docs.mongodb.com/manual/reference/operator/query/geoWithin/#op._S_geoWithin" title="$geoWithin" target="_blank" rel="noopener"><code>$geoWithin</code></a>.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/near/#op._S_near" title="$near" target="_blank" rel="noopener"><code>$near</code></a></td><td>Returns geospatial objects in proximity to a point. Requires a geospatial index. The <a href="https://docs.mongodb.com/manual/core/2dsphere/" target="_blank" rel="noopener">2dsphere</a> and <a href="https://docs.mongodb.com/manual/core/2d/" target="_blank" rel="noopener">2d</a> indexes support <a href="https://docs.mongodb.com/manual/reference/operator/query/near/#op._S_near" title="$near" target="_blank" rel="noopener"><code>$near</code></a>.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/nearSphere/#op._S_nearSphere" title="$nearSphere" target="_blank" rel="noopener"><code>$nearSphere</code></a></td><td>Returns geospatial objects in proximity to a point on a sphere. Requires a geospatial index. The <a href="https://docs.mongodb.com/manual/core/2dsphere/" target="_blank" rel="noopener">2dsphere</a> and <a href="https://docs.mongodb.com/manual/core/2d/" target="_blank" rel="noopener">2d</a> indexes support <a href="https://docs.mongodb.com/manual/reference/operator/query/nearSphere/#op._S_nearSphere" title="$nearSphere" target="_blank" rel="noopener"><code>$nearSphere</code></a>.</td></tr></tbody></table><h3 id="Geometry-Specifiers"><a href="#Geometry-Specifiers" class="headerlink" title="Geometry Specifiers"></a>Geometry Specifiers</h3><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/box/#op._S_box" title="$box" target="_blank" rel="noopener"><code>$box</code></a></td><td>Specifies a rectangular box using legacy coordinate pairs for <a href="https://docs.mongodb.com/manual/reference/operator/query/geoWithin/#op._S_geoWithin" title="$geoWithin" target="_blank" rel="noopener"><code>$geoWithin</code></a> queries. The <a href="https://docs.mongodb.com/manual/core/2d/" target="_blank" rel="noopener">2d</a> index supports <a href="https://docs.mongodb.com/manual/reference/operator/query/box/#op._S_box" title="$box" target="_blank" rel="noopener"><code>$box</code></a>.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center" title="$center" target="_blank" rel="noopener"><code>$center</code></a></td><td>Specifies a circle using legacy coordinate pairs to <a href="https://docs.mongodb.com/manual/reference/operator/query/geoWithin/#op._S_geoWithin" title="$geoWithin" target="_blank" rel="noopener"><code>$geoWithin</code></a> queries when using planar geometry. The <a href="https://docs.mongodb.com/manual/core/2d/" target="_blank" rel="noopener">2d</a> index supports <a href="https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center" title="$center" target="_blank" rel="noopener"><code>$center</code></a>.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere" title="$centerSphere" target="_blank" rel="noopener"><code>$centerSphere</code></a></td><td>Specifies a circle using either legacy coordinate pairs or <a href="https://docs.mongodb.com/manual/reference/glossary/#term-geojson" target="_blank" rel="noopener">GeoJSON</a> format for <a href="https://docs.mongodb.com/manual/reference/operator/query/geoWithin/#op._S_geoWithin" title="$geoWithin" target="_blank" rel="noopener"><code>$geoWithin</code></a> queries when using spherical geometry. The <a href="https://docs.mongodb.com/manual/core/2dsphere/" target="_blank" rel="noopener">2dsphere</a> and <a href="https://docs.mongodb.com/manual/core/2d/" target="_blank" rel="noopener">2d</a> indexes support <a href="https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere" title="$centerSphere" target="_blank" rel="noopener"><code>$centerSphere</code></a>.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/geometry/#op._S_geometry" title="$geometry" target="_blank" rel="noopener"><code>$geometry</code></a></td><td>Specifies a geometry in <a href="https://docs.mongodb.com/manual/reference/glossary/#term-geojson" target="_blank" rel="noopener">GeoJSON</a> format to geospatial query operators.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/maxDistance/#op._S_maxDistance" title="$maxDistance" target="_blank" rel="noopener"><code>$maxDistance</code></a></td><td>Specifies a maximum distance to limit the results of <a href="https://docs.mongodb.com/manual/reference/operator/query/near/#op._S_near" title="$near" target="_blank" rel="noopener"><code>$near</code></a> and <a href="https://docs.mongodb.com/manual/reference/operator/query/nearSphere/#op._S_nearSphere" title="$nearSphere" target="_blank" rel="noopener"><code>$nearSphere</code></a> queries. The <a href="https://docs.mongodb.com/manual/core/2dsphere/" target="_blank" rel="noopener">2dsphere</a> and <a href="https://docs.mongodb.com/manual/core/2d/" target="_blank" rel="noopener">2d</a> indexes support <a href="https://docs.mongodb.com/manual/reference/operator/query/maxDistance/#op._S_maxDistance" title="$maxDistance" target="_blank" rel="noopener"><code>$maxDistance</code></a>.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/minDistance/#op._S_minDistance" title="$minDistance" target="_blank" rel="noopener"><code>$minDistance</code></a></td><td>Specifies a minimum distance to limit the results of <a href="https://docs.mongodb.com/manual/reference/operator/query/near/#op._S_near" title="$near" target="_blank" rel="noopener"><code>$near</code></a> and <a href="https://docs.mongodb.com/manual/reference/operator/query/nearSphere/#op._S_nearSphere" title="$nearSphere" target="_blank" rel="noopener"><code>$nearSphere</code></a> queries. For use with <code>2dsphere</code> index only.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/polygon/#op._S_polygon" title="$polygon" target="_blank" rel="noopener"><code>$polygon</code></a></td><td>Specifies a polygon to using legacy coordinate pairs for <a href="https://docs.mongodb.com/manual/reference/operator/query/geoWithin/#op._S_geoWithin" title="$geoWithin" target="_blank" rel="noopener"><code>$geoWithin</code></a> queries. The <a href="https://docs.mongodb.com/manual/core/2d/" target="_blank" rel="noopener">2d</a> index supports <a href="https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center" title="$center" target="_blank" rel="noopener"><code>$center</code></a>.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/uniqueDocs/#op._S_uniqueDocs" title="$uniqueDocs" target="_blank" rel="noopener"><code>$uniqueDocs</code></a></td><td>Deprecated. Modifies a <a href="https://docs.mongodb.com/manual/reference/operator/query/geoWithin/#op._S_geoWithin" title="$geoWithin" target="_blank" rel="noopener"><code>$geoWithin</code></a> and <a href="https://docs.mongodb.com/manual/reference/operator/query/near/#op._S_near" title="$near" target="_blank" rel="noopener"><code>$near</code></a> queries to ensure that even if a document matches the query multiple times, the query returns the document once.</td></tr></tbody></table><h1 id="Array-Query-Operators"><a href="#Array-Query-Operators" class="headerlink" title="Array Query Operators"></a>Array Query Operators</h1><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/all/#op._S_all" title="$all" target="_blank" rel="noopener"><code>$all</code></a></td><td>Matches arrays that contain all elements specified in the query.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/elemMatch/#op._S_elemMatch" title="$elemMatch" target="_blank" rel="noopener"><code>$elemMatch</code></a></td><td>Selects documents if element in the array field matches all the specified <a href="https://docs.mongodb.com/manual/reference/operator/query/elemMatch/#op._S_elemMatch" title="$elemMatch" target="_blank" rel="noopener"><code>$elemMatch</code></a> conditions.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/size/#op._S_size" title="$size" target="_blank" rel="noopener"><code>$size</code></a></td><td>Selects documents if the array field is a specified size.</td></tr></tbody></table><h1 id="Bitwise-Query-Operators"><a href="#Bitwise-Query-Operators" class="headerlink" title="Bitwise Query Operators"></a>Bitwise Query Operators</h1><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/bitsAllClear/#op._S_bitsAllClear" title="$bitsAllClear" target="_blank" rel="noopener"><code>$bitsAllClear</code></a></td><td>Matches numeric or binary values in which a set of bit positions <em>all</em> have a value of <code>0</code>.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/bitsAllSet/#op._S_bitsAllSet" title="$bitsAllSet" target="_blank" rel="noopener"><code>$bitsAllSet</code></a></td><td>Matches numeric or binary values in which a set of bit positions <em>all</em> have a value of <code>1</code>.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/bitsAnyClear/#op._S_bitsAnyClear" title="$bitsAnyClear" target="_blank" rel="noopener"><code>$bitsAnyClear</code></a></td><td>Matches numeric or binary values in which <em>any</em> bit from a set of bit positions has a value of <code>0</code>.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/query/bitsAnySet/#op._S_bitsAnySet" title="$bitsAnySet" target="_blank" rel="noopener"><code>$bitsAnySet</code></a></td><td>Matches numeric or binary values in which <em>any</em> bit from a set of bit positions has a value of <code>1</code>.</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Server 2016下tomcat执行缓慢</title>
      <link href="/posts/ed60/"/>
      <url>/posts/ed60/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>Windows Server 2016 下以startup.bat 方式启动比在Windows Server 2012 下执行JAVA程序速度慢很多。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>将tomcat注册成为服务，到tomcat/bin路径下执行 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service.bat install tomcat7</span><br></pre></td></tr></table></figure><p>在服务中启动tomcat，速度就明显上去了。</p><p>环境变量：</p><p><img src="https://i.loli.net/2020/07/24/ayeCuAZ9TsvOxhH.png" alt="ayeCuAZ9TsvOxhH"></p><p>另外备注：而且点击tomcat控制台会让程序终端 中止，ctrl+c会让程序继续运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从服务列表中移除</span></span><br><span class="line">service.bat remove tomcat7</span><br></pre></td></tr></table></figure><p>启动、停用tomcat</p><p><img src="https://i.loli.net/2020/07/24/3kCIWZvYsl6SaG7.png" alt="3kCIWZvYsl6SaG7"></p>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Problem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信对接</title>
      <link href="/posts/828/"/>
      <url>/posts/828/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX18r+19NS8rY9GN083KBh7mNw7IA1JCz2VH8FP2o/F2eveT4aQvSFwXdFCix7vsOn9ph3bSVz+qZrk2+kgy2XZGBmUlu9m2LWRmEa/UOJxeFKgaNrcLH5ALaLQuYDrB5mA2gbRo0K3IjYooh/sQbfZAqK9bEgECocX5cSUIamvoLAOKvUUc939Jr96n8mlNWcHWfgqUuLkEPQtV1PWaXWyEvYdz+8IzcDlIReRZvj9EJXxADSrutdSzgowj0KZmOBtCewtNWVLAqVlSGBoLxO+F6SdYtLEt3W6onNqyWqWkNcPfmXvHjJ9tZtk4xPFI0ts29oX0nuwI0wRDZzofzVInEDb1/3lEXmHGHEGhdQGexnv1Q+1lCxIBHGdt4ZXWFCngsNUAp2Nqj3K5pj7waw4i81kHqkHM7C6sngizBMY1rgs8K8N25Y67NYQHXKimPBYpQyDJ9qHKqQtSCmWqdKKPj36UvZ+ETqwX1RN8ONCTsD+yyd6oQ4huaxkzOUl4TZX7pn8vKGEDH/MFeZ4O9BC96MwD6dY5jhvTZPzypMBdD3oZEyfJoiuoHX2dc8foCSUFdjtxfpPxUAXdnkFxVYviQp+SdC8/Pagd5lwLYkxZvGZpM/N6VJB8Ay/RwpiwOqX/l7zcLZFE/5StfXn8x9pb37maTRQSATcIrbIKon6c0kVKGx/JgAhco/NjJO2XkkQApuLCL4+EFp2LD6nuZ20oYeaEdM4l4MnUw/UXCj3+WrEqMm4CDlH3ghpe2aISQQP7f+oI8+AJ/smazSVXg1bf+Ga7tMCHj4D4KNR8vqsfm9tMcvV54GKg33TICUeA85vKygz1vUBPcM8xv99AexWTPWwRqwkqNIxznFZ89Pc7yqmhBPqO2oYgysZFFIclWO4RWw3rofaM52/kzF9Q4/WEdXn/I5O2NbZrVEId7CO78IjmlBA/IIF6tshmt+Vg9RcqdVfgEu/c3CimAu6/TBNUjxBgn95UIQWs= </div>]]></content>
      
      
      <categories>
          
          <category> Jh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-11</title>
      <link href="/posts/2623/"/>
      <url>/posts/2623/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发Semaphore使用</title>
      <link href="/posts/45a0/"/>
      <url>/posts/45a0/</url>
      
        <content type="html"><![CDATA[<p>Semaphore 是 synchronized 的加强版，作用是控制线程的并发数量。</p><p>示例：</p><p>MyThread.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> SemaphoreService service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name, SemaphoreService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.service.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SemaphoreService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat sf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss.SSS"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">2</span>);<span class="comment">// 同步关键类，构造方法传入的数字是多少，则同一个时刻，只运行多少个进程同时运行制定代码</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 在 semaphore.acquire() 和 semaphore.release()之间的代码，同一时刻只允许制定个数的线程进入，</span></span><br><span class="line"><span class="comment">             * 因为semaphore的构造方法是1，则同一时刻只允许一个线程进入，其他线程只能等待。</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            semaphore.acquire();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":doSomething start-"</span> + getFormatTimeStr());</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":doSomething end-"</span> + getFormatTimeStr());</span><br><span class="line">            semaphore.release();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFormatTimeStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sf.format(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SemaphoreTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        SemaphoreService service = <span class="keyword">new</span> SemaphoreService();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            MyThread t = <span class="keyword">new</span> MyThread(<span class="string">"thread"</span> + (i + <span class="number">1</span>), service);</span><br><span class="line">            t.start();<span class="comment">// 这里使用 t.run() 也可以运行，但是不是并发执行了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL server has gone away</title>
      <link href="/posts/1082/"/>
      <url>/posts/1082/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>批量导入数据时，数据量大的话会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2006 - MySQL server has gone away</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>找到你的mysql目录下的my.ini配置文件，加入以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#mysql允许最大的数据包</span><br><span class="line">max_allowed_packet=500M</span><br><span class="line">#关闭一个非交互的连接之前所要等待的秒数</span><br><span class="line">wait_timeout=288000</span><br><span class="line">#</span><br><span class="line">interactive_timeout=288000</span><br></pre></td></tr></table></figure><p>然后重启mysql服务</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/posts/b434/"/>
      <url>/posts/b434/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML中的类图及类图之间的关系</title>
      <link href="/posts/65be/"/>
      <url>/posts/65be/</url>
      
        <content type="html"><![CDATA[<h2 id="统一建模语言简介"><a href="#统一建模语言简介" class="headerlink" title="统一建模语言简介"></a>统一建模语言简介</h2><p>统一建模语言（Unified Modeling Language，UML）是用来设计软件蓝图的可视化建模语言，1997 年被国际对象管理组织（OMG）采纳为面向对象的建模语言的国际标准。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。  </p><p>统一建模语言能为软件开发的所有阶段提供模型化和可视化支持。而且融入了软件工程领域的新思想、新方法和新技术，使软件设计人员沟通更简明，进一步缩短了设计时间，减少开发成本。它的应用领域很宽，不仅适合于一般系统的开发，而且适合于并行与分布式系统的建模。  </p><p>UML 从目标系统的不同角度出发，定义了用例图、类图、对象图、状态图、活动图、时序图、协作图、构件图、部署图等 9 种图。  </p><p>本教程主要介绍软件<a href="http://c.biancheng.net/design_pattern/" target="_blank" rel="noopener">设计模式</a>中经常用到的类图，以及类之间的关系。另外，在实验部分将简单介绍 UML 建模工具的使用方法，当前业界使用最广泛的是 Rational Rose。使用 Umlet 的人也很多，它是一个轻量级的开源 UML 建模工具，简单实用，常用于小型软件系统的开发与设计。</p><a id="more"></a><h2 id="类、接口和类图"><a href="#类、接口和类图" class="headerlink" title="类、接口和类图"></a>类、接口和类图</h2><h4 id="1-类"><a href="#1-类" class="headerlink" title="1. 类"></a>1. 类</h4><p>类（Class）是指具有相同属性、方法和关系的对象的抽象，它封装了数据和行为，是面向对象程序设计（OOP）的基础，具有封装性、继承性和多态性等三大特性。在 UML 中，类使用包含类名、属性和操作且带有分隔线的矩形来表示。  </p><p>(1) 类名（Name）是一个字符串，例如，Student。  </p><p>(2) 属性（Attribute）是指类的特性，即类的成员变量。UML 按以下格式表示：</p><p>[可见性]属性名:类型[=默认值]</p><p>例如：-name:String  </p><p>注意：“可见性”表示该属性对类外的元素是否可见，包括公有（Public）、私有（Private）、受保护（Protected）和朋友（Friendly）4 种，在类图中分别用符号+、-、#、~表示。  </p><p>(3) 操作（Operations）是类的任意一个实例对象都可以使用的行为，是类的成员方法。UML 按以下格式表示：</p><p>[可见性]名称(参数列表)[:返回类型]</p><p>例如：+display():void。  </p><p>图 1 所示是学生类的 UML 表示。  </p><p><img src="https://i.loli.net/2019/10/24/2xMglfJTmDnsiW5.png" alt></p><h4 id="2-接口"><a href="#2-接口" class="headerlink" title="2. 接口"></a>2. 接口</h4><p>接口（Interface）是一种特殊的类，它具有类的结构但不可被实例化，只可以被子类实现。它包含抽象操作，但不包含属性。它描述了类或组件对外可见的动作。在 UML 中，接口使用一个带有名称的小圆圈来进行表示。  </p><p>图 2 所示是图形类接口的 UMDL 表示。   </p><p><img src="https://i.loli.net/2019/10/24/gyQim2bo94zL5IN.png" alt></p><h4 id="3-类图"><a href="#3-类图" class="headerlink" title="3. 类图"></a>3. 类图</h4><p>类图（ClassDiagram）是用来显示系统中的类、接口、协作以及它们之间的静态结构和关系的一种静态模型。它主要用于描述软件系统的结构化设计，帮助人们简化对软件系统的理解，它是系统分析与设计阶段的重要产物，也是系统编码与测试的重要模型依据。  </p><p>类图中的类可以通过某种编程 语言直接实现。类图在软件系统开发的整个生命周期都是有效的，它是面向对象系统的建模中最常见的图。图 3 所示是“计算长方形和圆形的周长与面积”的类图，图形接口有计算面积和周长的抽象方法，长方形和圆形实现这两个方法供访问类调用。  </p><p> <img src="https://i.loli.net/2019/10/24/Z5EHhKm8W1k9Q3T.png" alt></p><h2 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h2><p>在软件系统中，类不是孤立存在的，类与类之间存在各种关系。根据类与类之间的耦合度从弱到强排列，UML 中的类图有以下几种关系：依赖关系、关联关系、聚合关系、组合关系、泛化关系和实现关系。其中泛化和实现的耦合度相等，它们是最强的。</p><h4 id="1-依赖关系"><a href="#1-依赖关系" class="headerlink" title="1. 依赖关系"></a>1. 依赖关系</h4><p>依赖（Dependency）关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。  </p><p>在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。图 4 所示是人与手机的关系图，人通过手机的语音传送方法打电话。  </p><p><img src="https://i.loli.net/2019/10/24/Sr5WIsA6MiD3eko.png" alt> </p><h4 id="2-关联关系"><a href="#2-关联关系" class="headerlink" title="2. 关联关系"></a>2. 关联关系</h4><p>关联（Association）关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。  </p><p>关联可以是双向的，也可以是单向的。在 UML 类图中，双向的关联可以用带两个箭头或者没有箭头的实线来表示，单向的关联用带一个箭头的实线来表示，箭头从使用类指向被关联的类。也可以在关联线的两端标注角色名，代表两种不同的角色。  </p><p>在代码中通常将一个类的对象作为另一个类的成员变量来实现关联关系。图 5 所示是老师和学生的关系图，每个老师可以教多个学生，每个学生也可向多个老师学，他们是双向关联。  <img src="https://i.loli.net/2019/10/24/PmswQnA8CfDgbW6.png" alt></p><h4 id="3-聚合关系"><a href="#3-聚合关系" class="headerlink" title="3. 聚合关系"></a>3. 聚合关系</h4><p>聚合（Aggregation）关系是关联关系的一种，是强关联关系，是整体和部分之间的关系，是 has-a 的关系。  </p><p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。  </p><p>在 UML 类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。图 6 所示是大学和教师的关系图。  </p><p><img src="https://i.loli.net/2019/10/24/pYNOGEVoATkmqjK.png" alt></p><h4 id="4-组合关系"><a href="#4-组合关系" class="headerlink" title="4.组合关系"></a>4.组合关系</h4><p>组合（Composition）关系也是关联关系的一种，也表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系，是 cxmtains-a 关系。  </p><p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。  </p><p>在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。图 7 所示是头和嘴的关系图。  </p><p><img src="/Users/linjian/Library/Application Support/marktext/images/2019-10-24-19-27-06-image.png" alt></p><h4 id="5-泛化关系"><a href="#5-泛化关系" class="headerlink" title="5.泛化关系"></a>5.泛化关系</h4><p>泛化（Generalization）关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系，是 is-a 的关系。  </p><p>在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。例如，Student 类和 Teacher 类都是 Person 类的子类，其类图如图 8 所示。  </p><p><img src="https://i.loli.net/2019/10/24/HLYSnPrVo8B39wT.png" alt></p><h4 id="6-实现关系"><a href="#6-实现关系" class="headerlink" title="6.实现关系"></a>6.实现关系</h4><p>实现（Realization）关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。  </p><p>在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。例如，汽车和船实现了交通工具，其类图如图 9 所示。  </p><p><img src="https://i.loli.net/2019/10/24/I9DKeWpRqc3847b.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23 种设计模式的分类和功能</title>
      <link href="/posts/a055/"/>
      <url>/posts/a055/</url>
      
        <content type="html"><![CDATA[<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h3 id="根据目的来分"><a href="#根据目的来分" class="headerlink" title="根据目的来分"></a>根据目的来分</h3><p>根据模式是用来完成什么工作来划分，这种方式可分为创建型模式、结构型模式和行为型模式 3 种。</p><ol><li>创建型模式：用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF 中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</li><li>结构型模式：用于描述如何将类或对象按某种布局组成更大的结构，GoF 中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</li><li>行为型模式：用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。GoF 中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</li></ol><h3 id="根据作用范围来分"><a href="#根据作用范围来分" class="headerlink" title="根据作用范围来分"></a>根据作用范围来分</h3><p>根据模式是主要用于类上还是主要用于对象上来分，这种方式可分为类模式和对象模式两种。</p><ol><li>类模式：用于处理类与子类之间的关系，这些关系通过继承来建立，是静态的，在编译时刻便确定下来了。GoF中的工厂方法、（类）适配器、模板方法、解释器属于该模式。</li><li>对象模式：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。GoF 中除了以上 4 种，其他的都是对象模式。</li></ol><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ol><li>单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。</li><li>原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。</li><li>工厂方法（Factory Method）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。</li><li>抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。</li><li>建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。</li><li>代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</li><li>适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</li><li>桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</li><li>装饰（Decorator）模式：动态的给对象增加一些职责，即增加其额外的功能。</li><li>外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。</li><li>享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。</li><li>组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。</li><li>模板方法（TemplateMethod）模式：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</li><li>策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。</li><li>命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。</li><li>职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。</li><li>状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。</li><li>观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。</li><li>中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。</li><li>迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</li><li>访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。</li><li>备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。</li><li>解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。</li></ol><p>必须指出，这 23 种设计模式不是孤立存在的，很多模式之间存在一定的关联关系，在大的系统开发中常常同时使用多种设计模式，希望读者认真学好它们。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式概述</title>
      <link href="/posts/7c2c/"/>
      <url>/posts/7c2c/</url>
      
        <content type="html"><![CDATA[<h1 id="软件设计模式的概念"><a href="#软件设计模式的概念" class="headerlink" title="软件设计模式的概念"></a>软件设计模式的概念</h1><p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。</p><a id="more"></a><h1 id="学习设计模式的意义"><a href="#学习设计模式的意义" class="headerlink" title="学习设计模式的意义"></a>学习设计模式的意义</h1><p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。正确使用设计模式具有以下优点。</p><ul><li>可以提高程序员的思维能力、编程能力和设计能力。</li><li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li><li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li></ul><p>当然，软件设计模式只是一个引导。在具体的软件幵发中，必须根据设计的应用系统的特点和要求来恰当选择。对于简单的程序开发，苛能写一个简单的算法要比引入某种设计模式更加容易。但对大项目的开发或者框架设计，用设计模式来组织代码显然更好。</p><h1 id="软件设计模式的基本要素"><a href="#软件设计模式的基本要素" class="headerlink" title="软件设计模式的基本要素"></a>软件设计模式的基本要素</h1><p>软件设计模式使人们可以更加简单方便地复用成功的设计和体系结构，它通常包含以下几个基本要素：模式名称、别名、动机、问题、解决方案、效果、结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等，其中最关键的元素包括以下 4 个主要部分。</p><h3 id="1-模式名称"><a href="#1-模式名称" class="headerlink" title="1. 模式名称"></a>1. 模式名称</h3><p>每一个模式都有自己的名字，通常用一两个词来描述，可以根据模式的问题、特点、解决方案、功能和效果来命名。模式名称（PatternName）有助于我们理解和记忆该模式，也方便我们来讨论自己的设计。</p><h3 id="2-问题"><a href="#2-问题" class="headerlink" title="2. 问题"></a>2. 问题</h3><p>问题（Problem）描述了该模式的应用环境，即何时使用该模式。它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。</p><h3 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h3><p>模式问题的解决方案（Solution）包括设计的组成成分、它们之间的相互关系及各自的职责和协作方式。因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，而是提供设计问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象的 组合）来解决这个问题。</p><h3 id="4-效果"><a href="#4-效果" class="headerlink" title="4. 效果"></a>4. 效果</h3><p>描述了模式的应用效果以及使用该模式应该权衡的问题，即模式的优缺点。主要是对时间和空间的衡量，以及该模式对系统的灵活性、扩充性、可移植性的影响，也考虑其实现问题。显式地列出这些效果（Consequence）对理解和评价这些模式有很大的帮助。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 8 中的 Streams API 详解</title>
      <link href="/posts/1403/"/>
      <url>/posts/1403/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么需要-Stream"><a href="#为什么需要-Stream" class="headerlink" title="为什么需要 Stream"></a>为什么需要 Stream</h1><p>Stream 作为 Java 8 的一大亮点，它与 java.io 包里的 InputStream 和 OutputStream 是完全不同的概念。它也不同于 StAX 对 XML 解析的 Stream，也不是 Amazon Kinesis 对大数据实时处理的 Stream。Java 8 中的 Stream 是对集合（Collection）对象功能的增强，它专注于对集合对象进行各种非常便利、高效的聚合操作（aggregate operation），或者大批量数据操作 (bulk data operation)。Stream API 借助于同样新出现的 Lambda 表达式，极大的提高编程效率和程序可读性。同时它提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势，使用 fork/join 并行方式来拆分任务和加速处理过程。通常编写并行代码很难而且容易出错, 但使用 Stream API 无需编写一行多线程的代码，就可以很方便地写出高性能的并发程序。所以说，Java 8 中首次出现的 java.util.stream 是一个函数式语言+多核时代综合影响的产物。</p><a id="more"></a><h3 id="什么是聚合操作"><a href="#什么是聚合操作" class="headerlink" title="什么是聚合操作"></a>什么是聚合操作</h3><p>在传统的 J2EE 应用中，Java 代码经常不得不依赖于关系型数据库的聚合操作来完成诸如：</p><ul><li>客户每月平均消费金额</li><li>最昂贵的在售商品</li><li>本周完成的有效订单（排除了无效的）</li><li>取十个数据样本作为首页推荐</li></ul><p>这类的操作。</p><p>但在当今这个数据大爆炸的时代，在数据来源多样化、数据海量化的今天，很多时候不得不脱离 RDBMS，或者以底层返回的数据为基础进行更上层的数据统计。而 Java 的集合 API 中，仅仅有极少量的辅助型方法，更多的时候是程序员需要用 Iterator 来遍历集合，完成相关的聚合应用逻辑。这是一种远不够高效、笨拙的方法。在 Java 7 中，如果要发现 type 为 grocery 的所有交易，然后返回以交易值降序排序好的交易 ID 集合，我们需要这样写：</p><p><strong>清单 1. Java 7 的排序、取值实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Transaction&gt; groceryTransactions = <span class="keyword">new</span> Arraylist&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(Transaction t: transactions)&#123;</span><br><span class="line">    <span class="keyword">if</span>(t.getType() == Transaction.GROCERY)&#123;</span><br><span class="line">        groceryTransactions.add(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Collections.sort(groceryTransactions, <span class="keyword">new</span> Comparator()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Transaction t1, Transaction t2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t2.getValue().compareTo(t1.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">List&lt;Integer&gt; transactionIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(Transaction t: groceryTransactions)&#123;</span><br><span class="line">    transactionsIds.add(t.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在 Java 8 使用 Stream，代码更加简洁易读；而且使用并发模式，程序执行速度更快。</p><p><strong>清单 2. Java 8 的排序、取值实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; transactionsIds = transactions.parallelStream().</span><br><span class="line">        filter(t -&gt; t.getType() == Transaction.GROCERY).</span><br><span class="line">        sorted(comparing(Transaction::getValue).reversed()).</span><br><span class="line">        map(Transaction::getId).</span><br><span class="line">        collect(toList());</span><br></pre></td></tr></table></figure><h1 id="Stream-总览"><a href="#Stream-总览" class="headerlink" title="Stream 总览"></a>Stream 总览</h1><h3 id="什么是流"><a href="#什么是流" class="headerlink" title="什么是流"></a>什么是流</h3><p>Stream 不是集合元素，它不是数据结构并不保存数据，它是有关算法和计算的，它更像一个高级版本的 Iterator。原始版本的 Iterator，用户只能显式地一个一个遍历元素并对其执行某些操作；高级版本的 Stream，用户只要给出需要对其包含的元素执行什么操作，比如 “过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等，Stream 会隐式地在内部进行遍历，做出相应的数据转换。</p><p>Stream 就如同一个迭代器（Iterator），单向，不可往复，数据只能遍历一次，遍历过一次后即用尽了，就好比流水从面前流过，一去不复返。</p><p>而和迭代器又不同的是，Stream 可以并行化操作，迭代器只能命令式地、串行化操作。顾名思义，当使用串行方式去遍历时，每个 item 读完后再读下一个 item。而使用并行去遍历时，数据会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出。Stream 的并行操作依赖于 Java7 中引入的 Fork/Join 框架（JSR166y）来拆分任务和加速处理过程。Java 的并行 API 演变历程基本如下：</p><ol><li>1.0-1.4 中的 java.lang.Thread</li><li>5.0 中的 java.util.concurrent</li><li>6.0 中的 Phasers 等</li><li>7.0 中的 Fork/Join 框架</li><li>8.0 中的 Lambda</li></ol><p>Stream 的另外一大特点是，数据源本身可以是无限的。</p><h3 id="流的构成"><a href="#流的构成" class="headerlink" title="流的构成"></a>流的构成</h3><p>当我们使用一个流的时候，通常包括三个基本步骤：</p><p>获取一个数据源（source）→ 数据转换→执行操作获取想要的结果，每次转换原有 Stream 对象不改变，返回一个新的 Stream 对象（可以有多次转换），这就允许对其操作可以像链条一样排列，变成一个管道，如下图所示。</p><p><strong>图 1. 流管道 (Stream Pipeline) 的构成</strong></p><p><img src="https://i.loli.net/2019/10/23/AJdnRxNDw3SBi1X.png" alt></p><p>有多种方式生成 Stream Source：</p><ul><li><p>从 Collection 和数组</p><ul><li><p>Collection.stream()</p></li><li><p>Collection.parallelStream()</p></li><li><p>Arrays.stream(T array) or Stream.of()</p></li></ul></li><li><p>从 BufferedReader</p><ul><li>java.io.BufferedReader.lines()</li></ul></li><li><p>静态工厂</p><ul><li><p>java.util.stream.IntStream.range()</p></li><li><p>java.nio.file.Files.walk()</p></li></ul></li><li><p>自己构建</p><ul><li>java.util.Spliterator</li></ul></li><li><p>其它</p><ul><li>Random.ints()</li><li>BitSet.stream()</li><li>Pattern.splitAsStream(java.lang.CharSequence)</li><li>JarFile.stream()</li></ul></li></ul><p>流的操作类型分为两种：</p><ul><li><strong>Intermediate</strong>：一个流可以后面跟随零个或多个 intermediate 操作。其目的主要是打开流，做出某种程度的数据映射/过滤，然后返回一个新的流，交给下一个操作使用。这类操作都是惰性化的（lazy），就是说，仅仅调用到这类方法，并没有真正开始流的遍历。</li><li><strong>Terminal</strong>：一个流只能有一个 terminal 操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。Terminal 操作的执行，才会真正开始流的遍历，并且会生成一个结果，或者一个 side effect。</li></ul><p>在对于一个 Stream 进行多次转换操作 (Intermediate 操作)，每次都对 Stream 的每个元素进行转换，而且是执行多次，这样时间复杂度就是 N（转换次数）个 for 循环里把所有操作都做掉的总和吗？其实不是这样的，转换操作都是 lazy 的，多个转换操作只会在 Terminal 操作的时候融合起来，一次循环完成。我们可以这样简单的理解，Stream 里有个操作函数的集合，每次转换操作就是把转换函数放入这个集合中，在 Terminal 操作的时候循环 Stream 对应的集合，然后对每个元素执行所有的函数。</p><p>还有一种操作被称为 <strong>short-circuiting</strong>。用以指：</p><ul><li>对于一个 intermediate 操作，如果它接受的是一个无限大（infinite/unbounded）的 Stream，但返回一个有限的新 Stream。</li><li>对于一个 terminal 操作，如果它接受的是一个无限大的 Stream，但能在有限的时间计算出结果。</li></ul><p>当操作一个无限大的 Stream，而又希望在有限时间内完成操作，则在管道内拥有一个 short-circuiting 操作是必要非充分条件。</p><p><strong>清单 3. 一个流操作的示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = widgets.stream()</span><br><span class="line">        .filter(w -&gt; w.getColor() == RED)</span><br><span class="line">        .mapToInt(w -&gt; w.getWeight())</span><br><span class="line">        .sum();</span><br></pre></td></tr></table></figure><p>stream() 获取当前小物件的 source，filter 和 mapToInt 为 intermediate 操作，进行数据筛选和转换，最后一个 sum() 为 terminal 操作，对符合条件的全部小物件作重量求和。</p><h1 id="流的使用详解"><a href="#流的使用详解" class="headerlink" title="流的使用详解"></a>流的使用详解</h1><p>简单说，对 Stream 的使用就是实现一个 filter-map-reduce 过程，产生一个最终结果，或者导致一个副作用（side effect）。</p><h3 id="流的构造与转换"><a href="#流的构造与转换" class="headerlink" title="流的构造与转换"></a>流的构造与转换</h3><p>下面提供最常见的几种构造 Stream 的样例。</p><p><strong>清单 4. 构造流的几种常见方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Individual values</span></span><br><span class="line">Stream stream = Stream.of(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line"><span class="comment">// 2. Arrays</span></span><br><span class="line">String[] strArray = <span class="keyword">new</span> String[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;;</span><br><span class="line">stream = Stream.of(strArray);</span><br><span class="line">stream = Arrays.stream(strArray);</span><br><span class="line"><span class="comment">// 3. Collections</span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(strArray);</span><br><span class="line">stream = list.stream();</span><br></pre></td></tr></table></figure><p>需要注意的是，对于基本数值型，目前有三种对应的包装类型 Stream：</p><p>IntStream、LongStream、DoubleStream。当然我们也可以用 Stream<integer>、Stream<long> &gt;、Stream<double>，但是 boxing 和 unboxing 会很耗时，所以特别为这三种基本数值型提供了对应的 Stream。</double></long></integer></p><p>Java 8 中还没有提供其它数值型 Stream，因为这将导致扩增的内容较多。而常规的数值型聚合运算可以通过上面三种 Stream 进行。</p><p><strong>清单 5. 数值流的构造</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IntStream.of(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;).forEach(System.out::println);</span><br><span class="line">IntStream.range(<span class="number">1</span>, <span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">IntStream.rangeClosed(<span class="number">1</span>, <span class="number">3</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p><strong>清单 6. 流转换为其它数据结构</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Array</span></span><br><span class="line">String[] strArray1 = stream.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"><span class="comment">// 2. Collection</span></span><br><span class="line">List&lt;String&gt; list1 = stream.collect(Collectors.toList());</span><br><span class="line">List&lt;String&gt; list2 = stream.collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));</span><br><span class="line">Set set1 = stream.collect(Collectors.toSet());</span><br><span class="line">Stack stack1 = stream.collect(Collectors.toCollection(Stack::<span class="keyword">new</span>));</span><br><span class="line"><span class="comment">// 3. String</span></span><br><span class="line">String str = stream.collect(Collectors.joining()).toString();</span><br></pre></td></tr></table></figure><p>一个 Stream 只可以使用一次，上面的代码为了简洁而重复使用了数次。</p><h3 id="流的操作"><a href="#流的操作" class="headerlink" title="流的操作"></a>流的操作</h3><p>接下来，当把一个数据结构包装成 Stream 后，就要开始对里面的元素进行各类操作了。常见的操作可以归类如下。</p><ul><li>Intermediate：</li></ul><p>map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered</p><ul><li>Terminal：</li></ul><p>forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator</p><ul><li>Short-circuiting：</li></ul><p>anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit</p><p>我们下面看一下 Stream 的比较典型用法。</p><p><strong>map/flatMap</strong></p><p>我们先来看 map。如果你熟悉 scala 这类函数式语言，对这个方法应该很了解，它的作用就是把 input Stream 的每一个元素，映射成 output Stream 的另外一个元素。</p><p><strong>清单 7. 转换大写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; output = wordList.stream().</span><br><span class="line">        map(String::toUpperCase).</span><br><span class="line">        collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>这段代码把所有的单词转换为大写。</p><p><strong>清单 8. 平方数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; nums = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">List&lt;Integer&gt; squareNums = nums.stream().</span><br><span class="line">        map(n -&gt; n * n).</span><br><span class="line">        collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>这段代码生成一个整数 list 的平方数 {1, 4, 9, 16}。</p><p>从上面例子可以看出，map 生成的是个 1:1 映射，每个输入元素，都按照规则转换成为另外一个元素。还有一些场景，是一对多映射关系的，这时需要 flatMap。</p><p><strong>清单 9. 一对多</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;List&lt;Integer&gt;&gt; inputStream = Stream.of(</span><br><span class="line">        Arrays.asList(<span class="number">1</span>),</span><br><span class="line">        Arrays.asList(<span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">        Arrays.asList(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">);</span><br><span class="line">Stream&lt;Integer&gt; outputStream = inputStream.</span><br><span class="line">        flatMap((childList) -&gt; childList.stream());</span><br></pre></td></tr></table></figure><p>flatMap 把 input Stream 中的层级结构扁平化，就是将最底层元素抽出来放到一起，最终 output 的新 Stream 里面已经没有 List 了，都是直接的数字。</p><p><strong>filter</strong></p><p>filter 对原始 Stream 进行某项测试，通过测试的元素被留下来生成一个新 Stream。</p><p><strong>清单 10. 留下偶数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer[] sixNums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">Integer[] evens =</span><br><span class="line">        Stream.of(sixNums).filter(n -&gt; n%<span class="number">2</span> == <span class="number">0</span>).toArray(Integer[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure><p>经过条件“被 2 整除”的 filter，剩下的数字为 {2, 4, 6}。</p><p><strong>清单 11. 把单词挑出来</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; output = reader.lines().</span><br><span class="line">        flatMap(line -&gt; Stream.of(line.split(REGEXP))).</span><br><span class="line">        filter(word -&gt; word.length() &gt; <span class="number">0</span>).</span><br><span class="line">        collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>这段代码首先把每行的单词用 flatMap 整理到新的 Stream，然后保留长度不为 0 的，就是整篇文章中的全部单词了。</p><p><strong>forEach</strong></p><p>forEach 方法接收一个 Lambda 表达式，然后在 Stream 的每一个元素上执行该表达式。</p><p><strong>清单 12. 打印姓名（forEach 和 pre-java8 的对比）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 8</span></span><br><span class="line">roster.stream()</span><br><span class="line">        .filter(p -&gt; p.getGender() == Person.Sex.MALE)</span><br><span class="line">        .forEach(p -&gt; System.out.println(p.getName()));</span><br><span class="line"><span class="comment">// Pre-Java 8</span></span><br><span class="line"><span class="keyword">for</span> (Person p : roster) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p.getGender() == Person.Sex.MALE) &#123;</span><br><span class="line">        System.out.println(p.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对一个人员集合遍历，找出男性并打印姓名。可以看出来，forEach 是为 Lambda 而设计的，保持了最紧凑的风格。而且 Lambda 表达式本身是可以重用的，非常方便。当需要为多核系统优化时，可以 parallelStream().forEach()，只是此时原有元素的次序没法保证，并行的情况下将改变串行时操作的行为，此时 forEach 本身的实现不需要调整，而 Java8 以前的 for 循环 code 可能需要加入额外的多线程逻辑。</p><p>但一般认为，forEach 和常规 for 循环的差异不涉及到性能，它们仅仅是函数式风格与传统 Java 风格的差别。</p><p>另外一点需要注意，forEach 是 terminal 操作，因此它执行后，Stream 的元素就被“消费”掉了，你无法对一个 Stream 进行两次 terminal 运算。下面的代码是错误的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stream.forEach(element -&gt; doOneThing(element));</span><br><span class="line">stream.forEach(element -&gt; doAnotherThing(element));</span><br></pre></td></tr></table></figure><p>相反，具有相似功能的 intermediate 操作 peek 可以达到上述目的。如下是出现在该 api javadoc 上的一个示例。</p><p><strong>清单 13. peek 对每个元素执行操作并返回一个新的 Stream</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>)</span><br><span class="line">        .filter(e -&gt; e.length() &gt; <span class="number">3</span>)</span><br><span class="line">        .peek(e -&gt; System.out.println(<span class="string">"Filtered value: "</span> + e))</span><br><span class="line">        .map(String::toUpperCase)</span><br><span class="line">        .peek(e -&gt; System.out.println(<span class="string">"Mapped value: "</span> + e))</span><br><span class="line">        .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>forEach 不能修改自己包含的本地变量值，也不能用 break/return 之类的关键字提前结束循环。</p><p><strong>findFirst</strong></p><p>这是一个 termimal 兼 short-circuiting 操作，它总是返回 Stream 的第一个元素，或者空。</p><p>这里比较重点的是它的返回值类型：Optional。这也是一个模仿 Scala 语言中的概念，作为一个容器，它可能含有某值，或者不包含。使用它的目的是尽可能避免 NullPointerException。</p><p><strong>清单 14. Optional 的两个用例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">String strA = <span class="string">" abcd "</span>, strB = <span class="keyword">null</span>;</span><br><span class="line">print(strA);</span><br><span class="line">print(<span class="string">""</span>);</span><br><span class="line">print(strB);</span><br><span class="line">getLength(strA);</span><br><span class="line">getLength(<span class="string">""</span>);</span><br><span class="line">getLength(strB);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Java 8</span></span><br><span class="line">    Optional.ofNullable(text).ifPresent(System.out::println);</span><br><span class="line">    <span class="comment">// Pre-Java 8</span></span><br><span class="line">    <span class="keyword">if</span> (text != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Java 8</span></span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(text).map(String::length).orElse(-<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// Pre-Java 8</span></span><br><span class="line"><span class="comment">// return if (text != null) ? text.length() : -1;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在更复杂的 if (xx != null) 的情况中，使用 Optional 代码的可读性更好，而且它提供的是编译时检查，能极大的降低 NPE 这种 Runtime Exception 对程序的影响，或者迫使程序员更早的在编码阶段处理空值问题，而不是留到运行时再发现和调试。</p><p>Stream 中的 findAny、max/min、reduce 等方法等返回 Optional 值。还有例如 IntStream.average() 返回 OptionalDouble 等等。</p><p><strong>reduce</strong></p><p>这个方法的主要作用是把 Stream 元素组合起来。它提供一个起始值（种子），然后依照运算规则（BinaryOperator），和前面 Stream 的第一个、第二个、第 n 个元素组合。从这个意义上说，字符串拼接、数值的 sum、min、max、average 都是特殊的 reduce。例如 Stream 的 sum 就相当于</p><p>Integer sum = integers.reduce(0, (a, b) -&gt; a+b); 或</p><p>Integer sum = integers.reduce(0, Integer::sum);</p><p>也有没有起始值的情况，这时会把 Stream 的前面两个元素组合起来，返回的是 Optional。</p><p><strong>清单 15. reduce 的用例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串连接，concat = "ABCD"</span></span><br><span class="line">String concat = Stream.of(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>).reduce(<span class="string">""</span>, String::concat);</span><br><span class="line"><span class="comment">// 求最小值，minValue = -3.0</span></span><br><span class="line"><span class="keyword">double</span> minValue = Stream.of(-<span class="number">1.5</span>, <span class="number">1.0</span>, -<span class="number">3.0</span>, -<span class="number">2.0</span>).reduce(Double.MAX_VALUE, Double::min);</span><br><span class="line"><span class="comment">// 求和，sumValue = 10, 有起始值</span></span><br><span class="line"><span class="keyword">int</span> sumValue = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line"><span class="comment">// 求和，sumValue = 10, 无起始值</span></span><br><span class="line">sumValue = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).reduce(Integer::sum).get();</span><br><span class="line"><span class="comment">// 过滤，字符串连接，concat = "ace"</span></span><br><span class="line">concat = Stream.of(<span class="string">"a"</span>, <span class="string">"B"</span>, <span class="string">"c"</span>, <span class="string">"D"</span>, <span class="string">"e"</span>, <span class="string">"F"</span>).</span><br><span class="line">        filter(x -&gt; x.compareTo(<span class="string">"Z"</span>) &gt; <span class="number">0</span>).</span><br><span class="line">        reduce(<span class="string">""</span>, String::concat);</span><br></pre></td></tr></table></figure><p>上面代码例如第一个示例的 reduce()，第一个参数（空白字符）即为起始值，第二个参数（String::concat）为 BinaryOperator。这类有起始值的 reduce() 都返回具体的对象。而对于第四个示例没有起始值的 reduce()，由于可能没有足够的元素，返回的是 Optional，请留意这个区别。</p><p><strong>limit/skip</strong></p><p>limit 返回 Stream 的前面 n 个元素；skip 则是扔掉前 n 个元素（它是由一个叫 subStream 的方法改名而来）。</p><p><strong>清单 16. limit 和 skip 对运行次数的影响</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLimitAndSkip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Person&gt; persons = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++) &#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(i, <span class="string">"name"</span> + i);</span><br><span class="line">        persons.add(person);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;String&gt; personList2 = persons.stream().</span><br><span class="line">            map(Person::getName).limit(<span class="number">10</span>).skip(<span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(personList2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> no;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span> <span class="params">(<span class="keyword">int</span> no, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name1</span><br><span class="line">name2</span><br><span class="line">name3</span><br><span class="line">name4</span><br><span class="line">name5</span><br><span class="line">name6</span><br><span class="line">name7</span><br><span class="line">name8</span><br><span class="line">name9</span><br><span class="line">name10</span><br><span class="line">[name4, name5, name6, name7, name8, name9, name10]</span><br></pre></td></tr></table></figure><p>这是一个有 10，000 个元素的 Stream，但在 short-circuiting 操作 limit 和 skip 的作用下，管道中 map 操作指定的 getName() 方法的执行次数为 limit 所限定的 10 次，而最终返回结果在跳过前 3 个元素后只有后面 7 个返回。</p><p>有一种情况是 limit/skip 无法达到 short-circuiting 目的的，就是把它们放在 Stream 的排序操作后，原因跟 sorted 这个 intermediate 操作有关：此时系统并不知道 Stream 排序后的次序如何，所以 sorted 中的操作看上去就像完全没有被 limit 或者 skip 一样。</p><p><strong>清单 17. limit 和 skip 对 sorted 后的运行次数无影响</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; persons = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person(i, <span class="string">"name"</span> + i);</span><br><span class="line">    persons.add(person);</span><br><span class="line">&#125;</span><br><span class="line">List&lt;Person&gt; personList2 = persons.stream().sorted((p1, p2) -&gt;</span><br><span class="line">        p1.getName().compareTo(p2.getName())).limit(<span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">System.out.println(personList2);</span><br></pre></td></tr></table></figure><p>上面的示例对清单 13 做了微调，首先对 5 个元素的 Stream 排序，然后进行 limit 操作。输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name2</span><br><span class="line">name1</span><br><span class="line">name3</span><br><span class="line">name2</span><br><span class="line">name4</span><br><span class="line">name3</span><br><span class="line">name5</span><br><span class="line">name4</span><br><span class="line">[stream.StreamDW<span class="variable">$Person</span>@816f27d, stream.StreamDW<span class="variable">$Person</span>@87aac27]</span><br></pre></td></tr></table></figure><p>即虽然最后的返回元素数量是 2，但整个管道中的 sorted 表达式执行次数没有像前面例子相应减少。</p><p>最后有一点需要注意的是，对一个 parallel 的 Steam 管道来说，如果其元素是有序的，那么 limit 操作的成本会比较大，因为它的返回对象必须是前 n 个也有一样次序的元素。取而代之的策略是取消元素间的次序，或者不要用 parallel Stream。</p><p><strong>sorted</strong></p><p>对 Stream 的排序通过 sorted 进行，它比数组的排序更强之处在于你可以首先对 Stream 进行各类 map、filter、limit、skip 甚至 distinct 来减少元素数量后，再排序，这能帮助程序明显缩短执行时间。我们对清单 14 进行优化：</p><p><strong>清单 18. 优化：排序前进行 limit 和 skip</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; persons = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person(i, <span class="string">"name"</span> + i);</span><br><span class="line">    persons.add(person);</span><br><span class="line">&#125;</span><br><span class="line">List&lt;Person&gt; personList2 = persons.stream().limit(<span class="number">2</span>).sorted((p1, p2) -&gt; p1.getName().compareTo(p2.getName())).collect(Collectors.toList());</span><br><span class="line">System.out.println(personList2);</span><br></pre></td></tr></table></figure><p>结果会简单很多：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name2</span><br><span class="line">name1</span><br><span class="line">[stream.StreamDW<span class="variable">$Person</span>@6ce253f1, stream.StreamDW<span class="variable">$Person</span>@53d8d10a]</span><br></pre></td></tr></table></figure><p>当然，这种优化是有 business logic 上的局限性的：即不要求排序后再取值。</p><p><strong>min/max/distinct</strong></p><p>min 和 max 的功能也可以通过对 Stream 元素先排序，再 findFirst 来实现，但前者的性能会更好，为 O(n)，而 sorted 的成本是 O(n log n)。同时它们作为特殊的 reduce 方法被独立出来也是因为求最大最小值是很常见的操作。</p><p><strong>清单 19. 找出最长一行的长度</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"c:\\SUService.log"</span>));</span><br><span class="line"><span class="keyword">int</span> longest = br.lines().</span><br><span class="line">        mapToInt(String::length).</span><br><span class="line">        max().</span><br><span class="line">        getAsInt();</span><br><span class="line">br.close();</span><br><span class="line">System.out.println(longest);</span><br></pre></td></tr></table></figure><p>下面的例子则使用 distinct 来找出不重复的单词。</p><p><strong>清单 20. 找出全文的单词，转小写，并排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; words = br.lines().</span><br><span class="line">        flatMap(line -&gt; Stream.of(line.split(<span class="string">" "</span>))).</span><br><span class="line">        filter(word -&gt; word.length() &gt; <span class="number">0</span>).</span><br><span class="line">        map(String::toLowerCase).</span><br><span class="line">        distinct().</span><br><span class="line">        sorted().</span><br><span class="line">        collect(Collectors.toList());</span><br><span class="line">br.close();</span><br><span class="line">System.out.println(words);</span><br></pre></td></tr></table></figure><p><strong>Match</strong></p><p>Stream 有三个 match 方法，从语义上说：</p><ul><li>allMatch：Stream 中全部元素符合传入的 predicate，返回 true</li><li>anyMatch：Stream 中只要有一个元素符合传入的 predicate，返回 true</li><li>noneMatch：Stream 中没有一个元素符合传入的 predicate，返回 true</li></ul><p>它们都不是要遍历全部元素才能返回结果。例如 allMatch 只要一个元素不满足条件，就 skip 剩下的所有元素，返回 false。对清单 13 中的 Person 类稍做修改，加入一个 age 属性和 getAge 方法。</p><p><strong>清单 21. 使用 Match</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; persons = <span class="keyword">new</span> ArrayList();</span><br><span class="line">persons.add(<span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">"name"</span> + <span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">persons.add(<span class="keyword">new</span> Person(<span class="number">2</span>, <span class="string">"name"</span> + <span class="number">2</span>, <span class="number">21</span>));</span><br><span class="line">persons.add(<span class="keyword">new</span> Person(<span class="number">3</span>, <span class="string">"name"</span> + <span class="number">3</span>, <span class="number">34</span>));</span><br><span class="line">persons.add(<span class="keyword">new</span> Person(<span class="number">4</span>, <span class="string">"name"</span> + <span class="number">4</span>, <span class="number">6</span>));</span><br><span class="line">persons.add(<span class="keyword">new</span> Person(<span class="number">5</span>, <span class="string">"name"</span> + <span class="number">5</span>, <span class="number">55</span>));</span><br><span class="line"><span class="keyword">boolean</span> isAllAdult = persons.stream().</span><br><span class="line">        allMatch(p -&gt; p.getAge() &gt; <span class="number">18</span>);</span><br><span class="line">System.out.println(<span class="string">"All are adult? "</span> + isAllAdult);</span><br><span class="line"><span class="keyword">boolean</span> isThereAnyChild = persons.stream().</span><br><span class="line">        anyMatch(p -&gt; p.getAge() &lt; <span class="number">12</span>);</span><br><span class="line">System.out.println(<span class="string">"Any child? "</span> + isThereAnyChild);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">All are adult? <span class="literal">false</span></span><br><span class="line">Any child? <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="进阶：自己生成流"><a href="#进阶：自己生成流" class="headerlink" title="进阶：自己生成流"></a>进阶：自己生成流</h3><p><strong>Stream.generate</strong></p><p>通过实现 Supplier 接口，你可以自己来控制流的生成。这种情形通常用于随机数、常量的 Stream，或者需要前后元素间维持着某种状态信息的 Stream。把 Supplier 实例传递给 Stream.generate() 生成的 Stream，默认是串行（相对 parallel 而言）但无序的（相对 ordered 而言）。由于它是无限的，在管道中，必须利用 limit 之类的操作限制 Stream 大小。</p><p><strong>清单 22. 生成 10 个随机整数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Random seed = <span class="keyword">new</span> Random();</span><br><span class="line">Supplier&lt;Integer&gt; random = seed::nextInt;</span><br><span class="line">Stream.generate(random).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"><span class="comment">//Another way</span></span><br><span class="line">IntStream.generate(() -&gt; (<span class="keyword">int</span>) (System.nanoTime() % <span class="number">100</span>)).</span><br><span class="line">        limit(<span class="number">10</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>Stream.generate() 还接受自己实现的 Supplier。例如在构造海量测试数据的时候，用某种自动的规则给每一个变量赋值；或者依据公式计算 Stream 的每个元素值。这些都是维持状态信息的情形。</p><p><strong>清单 23. 自实现 Supplier</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Stream.generate(<span class="keyword">new</span> PersonSupplier()).</span><br><span class="line">        limit(<span class="number">10</span>).</span><br><span class="line">        forEach(p -&gt; System.out.println(p.getName() + <span class="string">", "</span> + p.getAge()));</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonSupplier</span> <span class="keyword">implements</span> <span class="title">Supplier</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(index++, <span class="string">"StormTestUser"</span> + index, random.nextInt(<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">StormTestUser1, 9</span><br><span class="line">StormTestUser2, 12</span><br><span class="line">StormTestUser3, 88</span><br><span class="line">StormTestUser4, 51</span><br><span class="line">StormTestUser5, 22</span><br><span class="line">StormTestUser6, 28</span><br><span class="line">StormTestUser7, 81</span><br><span class="line">StormTestUser8, 51</span><br><span class="line">StormTestUser9, 4</span><br><span class="line">StormTestUser10, 76</span><br></pre></td></tr></table></figure><p><strong>Stream.iterate</strong></p><p>iterate 跟 reduce 操作很像，接受一个种子值，和一个 UnaryOperator（例如 f）。然后种子值成为 Stream 的第一个元素，f(seed) 为第二个，f(f(seed)) 第三个，以此类推。</p><p><strong>清单 24. 生成一个等差数列</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">3</span>).limit(<span class="number">10</span>). forEach(x -&gt; System.out.print(x + <span class="string">" "</span>));.</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 3 6 9 12 15 18 21 24 27</span><br></pre></td></tr></table></figure><p>与 Stream.generate 相仿，在 iterate 时候管道必须有 limit 这样的操作来限制 Stream 大小。</p><h3 id="进阶：用-Collectors-来进行-reduction-操作"><a href="#进阶：用-Collectors-来进行-reduction-操作" class="headerlink" title="进阶：用 Collectors 来进行 reduction 操作"></a>进阶：用 Collectors 来进行 reduction 操作</h3><p>java.util.stream.Collectors 类的主要作用就是辅助进行各类有用的 reduction 操作，例如转变输出为 Collection，把 Stream 元素进行归组。</p><p><strong>groupingBy/partitioningBy</strong></p><p><strong>清单 25. 按照年龄归组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, List&lt;Person&gt;&gt; personGroups = Stream.generate(<span class="keyword">new</span> PersonSupplier()).</span><br><span class="line">        limit(<span class="number">100</span>).</span><br><span class="line">        collect(Collectors.groupingBy(Person::getAge));</span><br><span class="line">Iterator it = personGroups.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    Map.Entry&lt;Integer, List&lt;Person&gt;&gt; persons = (Map.Entry) it.next();</span><br><span class="line">    System.out.println(<span class="string">"Age "</span> + persons.getKey() + <span class="string">" = "</span> + persons.getValue().size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 code，首先生成 100 人的信息，然后按照年龄归组，相同年龄的人放到同一个 list 中，可以看到如下的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Age 0 = 2</span><br><span class="line">Age 1 = 2</span><br><span class="line">Age 5 = 2</span><br><span class="line">Age 8 = 1</span><br><span class="line">Age 9 = 1</span><br><span class="line">Age 11 = 2</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p><strong>清单 26. 按照未成年人和成年人归组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Boolean, List&lt;Person&gt;&gt; children = Stream.generate(<span class="keyword">new</span> PersonSupplier()).</span><br><span class="line">        limit(<span class="number">100</span>).</span><br><span class="line">        collect(Collectors.partitioningBy(p -&gt; p.getAge() &lt; <span class="number">18</span>));</span><br><span class="line">System.out.println(<span class="string">"Children number: "</span> + children.get(<span class="keyword">true</span>).size());</span><br><span class="line">System.out.println(<span class="string">"Adult number: "</span> + children.get(<span class="keyword">false</span>).size());</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Children number: 23 </span><br><span class="line">Adult number: 77</span><br></pre></td></tr></table></figure><p>在使用条件“年龄小于 18”进行分组后可以看到，不到 18 岁的未成年人是一组，成年人是另外一组。partitioningBy 其实是一种特殊的 groupingBy，它依照条件测试的是否两种结果来构造返回的数据结构，get(true) 和 get(false) 能即为全部的元素对象。</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>总之，Stream 的特性可以归纳为：</p><ul><li><p>不是数据结构</p></li><li><p>它没有内部存储，它只是用操作管道从 source（数据结构、数组、generator function、IO channel）抓取数据。</p></li><li><p>它也绝不修改自己所封装的底层数据结构的数据。例如 Stream 的 filter 操作会产生一个不包含被过滤元素的新 Stream，而不是从 source 删除那些元素。</p></li><li><p>所有 Stream 的操作必须以 lambda 表达式为参数</p></li><li><p>不支持索引访问</p></li><li><p>你可以请求第一个元素，但无法请求第二个，第三个，或最后一个。不过请参阅下一项。</p></li><li><p>很容易生成数组或者 List</p></li><li><p>惰性化</p></li><li><p>很多 Stream 操作是向后延迟的，一直到它弄清楚了最后需要多少数据才会开始。</p></li><li><p>Intermediate 操作永远是惰性化的。</p></li><li><p>并行能力</p></li><li><p>当一个 Stream 是并行化的，就不需要再写多线程代码，所有对它的操作会自动并行进行的。</p></li><li><p>可以是无限的</p><ul><li>集合有固定大小，Stream 则不必。limit(n) 和 findFirst() 这类的 short-circuiting 操作可以对无限的 Stream 进行运算并很快完成。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB常用命令</title>
      <link href="/posts/12e4/"/>
      <url>/posts/12e4/</url>
      
        <content type="html"><![CDATA[<h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><p><a href="https://docs.mongodb.com/manual/crud/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/crud/</a></p><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h3 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果数据库不存在，则创建数据库，否则切换到指定数据库。</span></span><br><span class="line"><span class="keyword">use</span> DATABASE_NAME</span><br></pre></td></tr></table></figure><h3 id="查看所有数据库"><a href="#查看所有数据库" class="headerlink" title="查看所有数据库"></a>查看所有数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> dbs</span><br></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># name: 要创建的集合名称</span></span><br><span class="line"><span class="comment"># options: 可选参数, 指定有关内存大小及索引的选项</span></span><br><span class="line"><span class="comment">#  capped: 布尔、可选。true 指定集合大小，size必填。当达到最大值时，它会自动覆盖最早的文档</span></span><br><span class="line"><span class="comment">#  autoIndexId: 布尔、可选。true 自动在 _id 字段创建索引。默认为 false。</span></span><br><span class="line"><span class="comment">#  size: 数值、可选 为固定集合指定一个最大值，以千字节计（KB）。</span></span><br><span class="line"><span class="comment">#  max: 数值、可选 指定固定集合中包含文档的最大数量。</span></span><br><span class="line">db.createCollection(name, options)</span><br></pre></td></tr></table></figure><h3 id="查看已有集合"><a href="#查看已有集合" class="headerlink" title="查看已有集合"></a>查看已有集合</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> collections</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span></span><br></pre></td></tr></table></figure><h3 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.drop()</span><br></pre></td></tr></table></figure><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><h3 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.insert(document)</span><br><span class="line"><span class="comment"># 向指定集合中插入一条文档数据</span></span><br><span class="line">db.collection.insertOne()</span><br><span class="line"><span class="comment"># 向指定集合中插入多条文档数据</span></span><br><span class="line">db.collection.insertMany()</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.col.insert(&#123;title: 'MongoDB 教程', </span><br><span class="line">    description: 'MongoDB 是一个 Nosql 数据库',</span><br><span class="line">    by: '菜鸟教程',</span><br><span class="line">    url: 'http://www.runoob.com',</span><br><span class="line">    tags: ['mongodb', 'database', 'NoSQL'],</span><br><span class="line">    likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># query : update的查询条件，类似sql update查询内where后面的。</span></span><br><span class="line"><span class="comment"># update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的</span></span><br><span class="line"><span class="comment"># upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</span></span><br><span class="line"><span class="comment"># multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</span></span><br><span class="line"><span class="comment"># writeConcern :可选，抛出异常的级别。</span></span><br><span class="line">db.collection.update(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &lt;update&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     upsert: &lt;boolean&gt;,</span><br><span class="line">     multi: &lt;boolean&gt;,</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新增</span></span><br><span class="line">db.col.insert(&#123;</span><br><span class="line">    title: 'MongoDB 教程', </span><br><span class="line">    description: 'MongoDB 是一个 Nosql 数据库',</span><br><span class="line">    by: '菜鸟教程',</span><br><span class="line">    url: 'http://www.runoob.com',</span><br><span class="line">    tags: ['mongodb', 'database', 'NoSQL'],</span><br><span class="line">    likes: 100</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">db.col.update(&#123;'title':'MongoDB 教程'&#125;,&#123;$set:&#123;'title':'MongoDB'&#125;&#125;)</span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line">db.col.find().pretty()</span><br></pre></td></tr></table></figure><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># query :（可选）删除的文档的条件。</span></span><br><span class="line"><span class="comment"># justOne : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。</span></span><br><span class="line"><span class="comment"># writeConcern :（可选）抛出异常的级别。</span></span><br><span class="line">db.collection.remove(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     justOne: &lt;boolean&gt;,</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># query ：可选，使用查询操作符指定查询条件</span></span><br><span class="line"><span class="comment"># projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。</span></span><br><span class="line">db.collection.find(query, projection)</span><br><span class="line"></span><br><span class="line"><span class="comment"># AND</span></span><br><span class="line">db.col.find(&#123;key1:value1, key2:value2&#125;).pretty()</span><br><span class="line"></span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">db.col.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">         &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询 title 包含"教"字的文档：</span></span><br><span class="line">db.col.find(&#123;title:/教/&#125;)</span><br><span class="line"><span class="comment"># 查询 title 字段以"教"字开头的文档：</span></span><br><span class="line">db.col.find(&#123;title:/^教/&#125;)</span><br><span class="line"><span class="comment"># 查询 titl e字段以"教"字结尾的文档：</span></span><br><span class="line">db.col.find(&#123;title:/教$/&#125;)</span><br></pre></td></tr></table></figure><h1 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h1><table><thead><tr><th>MongoDB</th><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>$gt</td><td>&gt;</td><td>greater than</td></tr><tr><td>$gte</td><td>&gt;=</td><td>greater than equal</td></tr><tr><td>$lt</td><td>&lt;</td><td>less than</td></tr><tr><td>$lte</td><td>&lt;=</td><td>less than equal</td></tr><tr><td>$ne</td><td>!=</td><td>not equal</td></tr><tr><td>$eq</td><td>=</td><td>equal</td></tr></tbody></table><h1 id="limit与skip方法（分页）"><a href="#limit与skip方法（分页）" class="headerlink" title="limit与skip方法（分页）"></a>limit与skip方法（分页）</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># limit 该参数指定从MongoDB中读取的记录条数</span></span><br><span class="line"><span class="comment"># skip 跳过指定数量的数据</span></span><br><span class="line">db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</span><br></pre></td></tr></table></figure><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># KEY 排序字段 1升序 -1降序</span></span><br><span class="line">db.COLLECTION_NAME.find().sort(&#123;KEY:1&#125;)</span><br></pre></td></tr></table></figure><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.createIndex(keys, options)</span><br></pre></td></tr></table></figure><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>background</td><td>Boolean</td><td>建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 “background” 可选参数。 “background” 默认值为false。</td></tr><tr><td>unique</td><td>Boolean</td><td>建立的索引是否唯一。指定为true创建唯一索引。默认值为false。</td></tr><tr><td>name</td><td>string</td><td>索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。</td></tr><tr><td>sparse</td><td>Boolean</td><td>对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 false。</td></tr><tr><td>expireAfterSeconds</td><td>integer</td><td>指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。</td></tr><tr><td>v</td><td>index version</td><td>索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。</td></tr><tr><td>weights</td><td>document</td><td>索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。</td></tr><tr><td>default_language</td><td>string</td><td>对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语。</td></tr><tr><td>language_override</td><td>string</td><td>对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language。</td></tr></tbody></table><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.getIndexes()</span><br></pre></td></tr></table></figure><h3 id="查看集合索引大小"><a href="#查看集合索引大小" class="headerlink" title="查看集合索引大小"></a>查看集合索引大小</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.totalIndexSize()</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.dropIndexes()</span><br></pre></td></tr></table></figure><h3 id="删除集合指定索引"><a href="#删除集合指定索引" class="headerlink" title="删除集合指定索引"></a>删除集合指定索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.dropIndex(INDEX_NAME)</span><br></pre></td></tr></table></figure><h1 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要用于处理数据(诸如统计平均值,求和等)，并返回计算后的数据结果。有点类似sql语句中的 count(*)。</span></span><br><span class="line">db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</span><br></pre></td></tr></table></figure><table><thead><tr><th>表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>$sum</td><td>计算总和</td><td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$sum : &quot;$likes&quot;}}}])</code></td></tr><tr><td>$avg</td><td>计算平均值</td><td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$avg : &quot;$likes&quot;}}}])</code></td></tr><tr><td>$min</td><td>获取集合中所有文档对应值得最小值</td><td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$min : &quot;$likes&quot;}}}])</code></td></tr><tr><td>$max</td><td>获取集合中所有文档对应值得最大值</td><td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$max : &quot;$likes&quot;}}}])</code></td></tr><tr><td>$push</td><td>在结果文档中插入值到一个数组中</td><td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, url : {$push: &quot;$url&quot;}}}])</code></td></tr><tr><td>$addToSet</td><td>在结果文档中插入值到一个数组中，但不创建副本</td><td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, url : {$addToSet : &quot;$url&quot;}}}])</code></td></tr><tr><td>$first</td><td>根据资源文档的排序获取第一个文档数据</td><td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, first_url : {$first : &quot;$url&quot;}}}])</code></td></tr><tr><td>$last</td><td>根据资源文档的排序获取最后一个文档数据</td><td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, last_url : {$last : &quot;$url&quot;}}}])</code></td></tr></tbody></table><h1 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h1><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -h：MongDB所在服务器地址</span></span><br><span class="line"><span class="comment"># -d：需要备份的数据库实例</span></span><br><span class="line"><span class="comment"># -o：备份的数据存放位置</span></span><br><span class="line">mongodump -h dbhost -d dbname -o dbdirectory</span><br></pre></td></tr></table></figure><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --host &lt;:port&gt;, -h &lt;:port&gt;：MongoDB所在服务器地址</span></span><br><span class="line"><span class="comment"># --db , -d ：需要恢复的数据库实例</span></span><br><span class="line"><span class="comment"># --drop：恢复的时候，先删除当前数据，然后恢复备份的数据</span></span><br><span class="line"><span class="comment"># &lt;path&gt;：mongorestore 最后的一个参数，设置备份数据所在位置</span></span><br><span class="line"><span class="comment"># --dir：指定备份的目录。</span></span><br><span class="line">你不能同时指定 &lt;path&gt; 和 --dir 选项。</span><br><span class="line">mongorestore -h &lt;hostname&gt;&lt;:port&gt; -d dbname &lt;path&gt;</span><br></pre></td></tr></table></figure><h1 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h1><p>检验结果、检验报告关联查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">db.testResult.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">        $match:&#123;"testItemCode":"862"&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">     $lookup:</span><br><span class="line">       &#123;</span><br><span class="line">         from: "testReport",</span><br><span class="line">         localField: "reportNo",</span><br><span class="line">         foreignField: "reportNo",</span><br><span class="line">         as: "test"</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        $match:&#123;"test.reportDate": &#123;"$gt":"2019-03-10 00:00:00"&#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB启动命令</title>
      <link href="/posts/1d4c/"/>
      <url>/posts/1d4c/</url>
      
        <content type="html"><![CDATA[<h1 id="前台启动"><a href="#前台启动" class="headerlink" title="前台启动"></a>前台启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#到/usr/local/bin目录下执行下面命令启动mongodb</span></span><br><span class="line">$ ./mongod</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + C</span><br></pre></td></tr></table></figure><h1 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dbpath是存放数据库的路径 --fork是后台启动 logpath是日志路径 这些都不可缺少</span></span><br><span class="line">$ ./mongod --dbpath=/data/db --fork --logpath=/data/logs</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup /usr/local/mongodb/bin/mongod -f /usr/local/mongodb/mongodb.conf &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac安装MongoDB</title>
      <link href="/posts/dce8/"/>
      <url>/posts/dce8/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac-OSX-平台安装-MongoDB"><a href="#Mac-OSX-平台安装-MongoDB" class="headerlink" title="Mac OSX 平台安装 MongoDB"></a>Mac OSX 平台安装 MongoDB</h1><p>MongoDB 提供了 OSX 平台上 64 位的安装包，你可以在官网下载安装包。</p><a id="more"></a><p>下载地址：<a href="https://www.mongodb.com/download-center#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center#community</a></p><p><img src="https://i.loli.net/2019/09/30/zeG1yovI5xOTi2J.png" alt></p><blockquote><p>从 MongoDB 3.0 版本开始只支持 OS X 10.7 (Lion) 版本及更新版本的系统。</p></blockquote><p>接下来我们使用 curl 命令来下载安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 /Users/linjian/Downloads</span></span><br><span class="line"><span class="built_in">cd</span> /Users/linjian/Downloads</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动目录</span></span><br><span class="line">sudo mv mongodb-macos-x86_64-4.2.0.tgz /usr/<span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入/usr/local</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">sudo tar -zxvf mongodb-macos-x86_64-4.2.0.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名为 mongodb 目录</span></span><br><span class="line"></span><br><span class="line">sudo mv mongodb-osx-x86_64-4.0.9/ mongodb</span><br></pre></td></tr></table></figure><p>安装完成后，我们可以把 MongoDB 的二进制命令文件目录（安装目录/bin）添加到 PATH 路径中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># MongoDB</span><br><span class="line">export PATH=/usr/local/mongodb/bin:$PATH</span><br></pre></td></tr></table></figure><h1 id="运行-MongoDB"><a href="#运行-MongoDB" class="headerlink" title="运行 MongoDB"></a>运行 MongoDB</h1><p>首先我们创建一个数据库存储目录 /data/db：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /data/db</span><br></pre></td></tr></table></figure><p>启动 mongodb，默认数据库目录即为 /data/db：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 如果没有创建全局路径 PATH，需要进入以下目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mongodb/bin</span><br><span class="line">sudo ./mongod</span><br></pre></td></tr></table></figure><p>再打开一个终端进入执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mongodb/bin </span><br><span class="line">$ ./mongo</span><br><span class="line">MongoDB shell version v4.0.9</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb</span><br><span class="line">Implicit session: session &#123; <span class="string">"id"</span> : UUID(<span class="string">"3c12bf4f-695c-48b2-b160-8420110ccdcf"</span>) &#125;</span><br><span class="line">MongoDB server version: 4.0.9</span><br><span class="line">……</span><br><span class="line">&gt; 1 + 1</span><br><span class="line">2</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS IP被墙</title>
      <link href="/posts/717f/"/>
      <url>/posts/717f/</url>
      
        <content type="html"><![CDATA[<h1 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h1><p>之前在AWS搭建了shadowsocks，有一天突然不能上Google了，尝试ping了一下AWS服务器地址，发现ping不通了，ssh也连不上服务器了，怀疑是IP被墙了。</p><a id="more"></a><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol><li><p>登陆AWS控制台</p></li><li><p>停止实例</p></li><li><p>启动实例（重启实例后ip会变）</p><p><img src="https://i.loli.net/2019/09/17/X3Nrlw4js7PxeuV.png" alt></p></li><li><p>登陆服务器，修改shadowsock配置/etc/shadowsocks/config.json，server调整为新的ip</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"172.31.20.247"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>:<span class="number">443</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"Rxmath098098"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workers"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"prefer_ipv6"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动shadowsocks</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">sudo ssserver -c /etc/shadowsocks/config.json -d start</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止</span></span><br><span class="line">sudo ssserver -c /etc/shadowsocks/config.json -d stop</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">sudo ssserver -c /etc/shadowsocks/config.json -d restart</span><br></pre></td></tr></table></figure></li></ol><h1 id="安全组设置"><a href="#安全组设置" class="headerlink" title="安全组设置"></a>安全组设置</h1><p>因为shadowsocks里配置的端口是443，所以安全组需要开放TCP 443端口，要不然shadowsocks启动会报错</p><p><img src="https://i.loli.net/2019/09/17/Y6cl94hzsUniDxg.png" alt></p><p>shadowsocks.log路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/<span class="built_in">log</span>/shadowsocks.log</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Problem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Invalid character found in method name. HTTP method names must be tokens </title>
      <link href="/posts/d218/"/>
      <url>/posts/d218/</url>
      
        <content type="html"><![CDATA[<h1 id="问题截图"><a href="#问题截图" class="headerlink" title="问题截图"></a>问题截图</h1><p><img src="https://i.loli.net/2019/09/16/hToBvOMaVJCNl1L.png" alt></p><h1 id="异常内容"><a href="#异常内容" class="headerlink" title="异常内容"></a>异常内容</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: Invalid character found in method name. HTTP method names must be tokens</span><br><span class="line">    at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:<span class="number">422</span>)</span><br><span class="line">    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:<span class="number">683</span>)</span><br><span class="line">    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:<span class="number">66</span>)</span><br><span class="line">    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:<span class="number">861</span>)</span><br><span class="line">    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:<span class="number">1455</span>)</span><br><span class="line">    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:<span class="number">49</span>)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1142</span>)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">617</span>)</span><br><span class="line">    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:<span class="number">61</span>)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br></pre></td></tr></table></figure><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p> Tomcat的header缓冲区大小不够,只需要在server.xml中增加maxHttpHeaderSize字段即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">   maxHttpHeaderSize=&quot;8192&quot;</span><br><span class="line">               connectionTimeout=&quot;20000&quot;</span><br><span class="line">               redirectPort=&quot;8443&quot; URIEncoding=&quot;UTF-8&quot;/&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Problem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX不会自动重定向</title>
      <link href="/posts/cfc4/"/>
      <url>/posts/cfc4/</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器不会自动重定向"><a href="#浏览器不会自动重定向" class="headerlink" title="浏览器不会自动重定向"></a>浏览器不会自动重定向</h1><p>在ajax请求方式的情况下，如果服务端返回<code>301</code>或<code>302</code>这些重定向状态码，并告知了要重定向的网址，浏览器是不会自动重定向的，需要手写重定向处理代码</p><p>以jQuery的ajax为例，运行规则就是<strong>如果服务端返回的数据类型不是预期的类型，就不会触发success回调</strong>，<code>但只要服务端有响应，都会触发complete</code></p><a id="more"></a><p>看以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url : <span class="string">'/test.php'</span>,</span><br><span class="line">dataType : <span class="string">'json'</span>,</span><br><span class="line">complete : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'请求完毕'</span>);</span><br><span class="line">&#125;,</span><br><span class="line">success : <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'收到预期的json数据'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果服务端不返回json格式，则只会触发complete和error，但不会触发success</p><p>这其中也包括了<strong>服务端返回重定向状态码</strong>，重定向的情况下，响应报文是不含内容主体的，所以也就是没有数据，只有报头，于是也是得不到预期的json数据</p><hr><h1 id="在complete里写代码重定向"><a href="#在complete里写代码重定向" class="headerlink" title="在complete里写代码重定向"></a>在complete里写代码重定向</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url : <span class="string">'/test.php'</span>,</span><br><span class="line">dataType : <span class="string">'json'</span>,</span><br><span class="line">complete : <span class="function"><span class="keyword">function</span>(<span class="params">xhr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>((xhr.status &gt;= <span class="number">300</span> &amp;&amp; xhr.status &lt; <span class="number">400</span>) &amp;&amp; xhr.status != <span class="number">304</span>)&#123;</span><br><span class="line"><span class="comment">//重定向网址在响应头中，取出再执行跳转</span></span><br><span class="line"><span class="keyword">var</span> redirectUrl = xhr.getResponseHeader(<span class="string">'X-Redirect'</span>);</span><br><span class="line">location.href = redirectUrl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">success : <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'收到预期的json数据'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="页面初始化的时候就设定重定向逻辑"><a href="#页面初始化的时候就设定重定向逻辑" class="headerlink" title="页面初始化的时候就设定重定向逻辑"></a>页面初始化的时候就设定重定向逻辑</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">dataType : <span class="string">'json'</span>,</span><br><span class="line">complete : <span class="function"><span class="keyword">function</span>(<span class="params">xhr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>((xhr.status &gt;= <span class="number">300</span> &amp;&amp; xhr.status &lt; <span class="number">400</span>) &amp;&amp; xhr.status != <span class="number">304</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> redirectUrl = xhr.getResponseHeader(<span class="string">'X-Redirect'</span>);</span><br><span class="line">location.href = redirectUrl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下三种请求方式一旦收到重定向响应代码就会调用上面安装好的complete回调，不会执行callback</span></span><br><span class="line">$.<span class="keyword">get</span>(会重定向的地址, callback);</span><br><span class="line">$.post(会重定向的地址, callback);</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url : 会重定向的地址,</span><br><span class="line">success : callback</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Problem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java--红黑树</title>
      <link href="/posts/af00/"/>
      <url>/posts/af00/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac关闭软件开机启动</title>
      <link href="/posts/43a3/"/>
      <url>/posts/43a3/</url>
      
        <content type="html"><![CDATA[<h1 id="常规软件"><a href="#常规软件" class="headerlink" title="常规软件"></a>常规软件</h1><p>系统偏好设置–》用户与群组–》登陆项目</p><p><img src="https://i.loli.net/2019/09/09/xu4UsH7MpwdE5kv.png" alt></p><a id="more"></a><h1 id="其他软件"><a href="#其他软件" class="headerlink" title="其他软件"></a>其他软件</h1><p>登陆项中没有的，开机会自动启动的软件</p><h3 id="macOS-系统的启动项会以-plist-的文件存在于以下目录中："><a href="#macOS-系统的启动项会以-plist-的文件存在于以下目录中：" class="headerlink" title="macOS 系统的启动项会以 .plist 的文件存在于以下目录中："></a>macOS 系统的启动项会以 .plist 的文件存在于以下目录中：</h3><ul><li><code>/Library/LaunchDaemons</code>：系统启动时运行，用户不登录也会运行。</li><li><code>/Library/LaunchAgents</code>：用户登录后运行。</li><li><code>~/Library/LaunchAgents</code>：用户自定义的用户启动项</li><li><code>/System/Library/LaunchDaemons</code>：系统自带的启动项</li><li><code>/System/Library/LaunchAgents</code>：系统自带的启动项</li></ul><h3 id="每个-plist-文件中，有-3-个属性控制着是否会开机自动启动。"><a href="#每个-plist-文件中，有-3-个属性控制着是否会开机自动启动。" class="headerlink" title="每个 .plist 文件中，有 3 个属性控制着是否会开机自动启动。"></a>每个 .plist 文件中，有 3 个属性控制着是否会开机自动启动。</h3><ul><li><code>KeepAlive</code>：决定程序是否需要一直运行，如果是 false 则需要时才启动。默认 false</li><li><code>RunAtLoad</code>：开机时是否运行。默认 false。</li><li><code>SuccessfulExit</code>：此项为 true 时，程序正常退出时重启（即退出码为 0）；为 false 时，程序非正常退出时重启。此项设置时会隐含默认 RunAtLoad = true，因为程序需要至少运行一次才能获得退出状态。</li></ul><h3 id="所以其实针对这三项，不同的值有不同的表现："><a href="#所以其实针对这三项，不同的值有不同的表现：" class="headerlink" title="所以其实针对这三项，不同的值有不同的表现："></a>所以其实针对这三项，不同的值有不同的表现：</h3><ul><li><p>如果 <code>KeepAlive</code> = false：</p></li><li><p>当 <code>RunAtLoad</code> = false 时：程序只有在有需要的时候运行。</p></li><li><p>当 <code>RunAtLoad</code> = true 时：程序在启动时会运行一次，然后等待在有需要的时候运行。</p></li><li><p>当 <code>SuccessfulExit</code> = true / false 时：不论 <code>RunAtLoad</code> 值是什么，都会在启动时运行一次。其后根据 <code>SuccessfulExit</code> 值来决定是否重启。</p></li><li><p>如果 <code>KeepAlive</code> = true ：</p></li><li><p>不论 <code>RunAtLoad</code>/<code>SuccessfulExit</code> 值是什么，都会启动时运行且一直保持运行状态。</p></li></ul><h3 id="如果不希望开机自动运行，则需要："><a href="#如果不希望开机自动运行，则需要：" class="headerlink" title="如果不希望开机自动运行，则需要："></a>如果不希望开机自动运行，则需要：</h3><blockquote><ol><li>找到对应程序的 .plist 文件  </li><li>删除 SuccessfulExit 属性。  </li><li>将 RunAtLoad / KeepAlive 均设为 <false></false></li></ol></blockquote><p><img src="https://i.loli.net/2019/09/09/NS59LeupojXVBQC.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口任务</title>
      <link href="/posts/c44c/"/>
      <url>/posts/c44c/</url>
      
        <content type="html"><![CDATA[<h1 id="接口任务"><a href="#接口任务" class="headerlink" title="接口任务"></a>接口任务</h1><table><thead><tr><th>医院</th><th>时间</th><th>负责人</th><th>备注</th></tr></thead><tbody><tr><td>汕头大学医学院第一附属医院</td><td>2019.9</td><td>徐贤</td><td>MQ</td></tr><tr><td>余杭妇幼</td><td>2019.9</td><td>张成汉</td><td>view</td></tr><tr><td>如皋博爱</td><td>2019.9</td><td>张成汉</td><td>view</td></tr><tr><td>舟山妇幼</td><td>2019.9</td><td>张成汉</td><td>http 微信接口</td></tr><tr><td>平阳人民医院</td><td>2019.9</td><td>徐贤</td><td>webservice 预约挂号</td></tr><tr><td>重庆医科大学附属永川医院</td><td>2019.10</td><td>张成汉</td><td>webservice</td></tr><tr><td>邵逸夫</td><td>2019.10</td><td>徐贤</td><td>webservice</td></tr><tr><td>中山六院</td><td>2019.10</td><td>徐贤</td><td>高血压患者管理接口</td></tr><tr><td>淄博妇幼门诊自助</td><td>2019.10</td><td>张成汉</td><td>MQ</td></tr><tr><td>安徽医科大学第一附属医院</td><td>2019.10</td><td>徐贤</td><td>MQ</td></tr><tr><td>舟山市妇幼保健院</td><td>2019.10</td><td>张成汉</td><td>webservice 预约挂号</td></tr><tr><td>重庆市长寿区人民医院</td><td>2019.10</td><td>徐贤</td><td>视图，微信（http）</td></tr><tr><td>鄞州人民医院</td><td>2019.10</td><td>张成汉</td><td>webservice</td></tr><tr><td>新附一</td><td>2019.10</td><td>徐贤</td><td>MQ（短信切换）</td></tr><tr><td>锦欣医疗集团</td><td>2019.10</td><td>徐贤</td><td>http（短信切换）</td></tr><tr><td>江苏省人民医院</td><td>2019.10</td><td>徐贤</td><td>view（表单自动填充）</td></tr><tr><td>绍兴二院</td><td>2019.10</td><td>徐贤</td><td>view</td></tr><tr><td>重庆市第十三人民医院</td><td>2019.10</td><td>徐贤</td><td>view<br>检查、检验、处方<br>医嘱、手术、诊断</td></tr><tr><td>重庆医科大学附属永川医院</td><td>2019.10</td><td>张成汉</td><td>webservice<br>微信</td></tr><tr><td>福建省立医院</td><td>2019.10</td><td>徐贤</td><td>http<br>住院记录加字段</td></tr><tr><td>东莞市第八人民医院</td><td>2019.10</td><td>张成汉</td><td>MQ<br>基础接口</td></tr><tr><td>江苏省人民医院</td><td>2019.10</td><td>徐贤</td><td>hl7</td></tr><tr><td>海南现代妇女儿童医院</td><td>2019.10</td><td>张成汉</td><td>view</td></tr><tr><td>如皋博爱</td><td>2019.10</td><td>张成汉</td><td>患者管理</td></tr><tr><td>三明市第一医院</td><td>2019.10</td><td></td><td>基础接口</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="2019-9"><a href="#2019-9" class="headerlink" title="2019.9"></a>2019.9</h3><table><thead><tr><th>医院</th><th>接口方式</th><th>负责人</th><th>接口数</th><th>已完成</th><th></th></tr></thead><tbody><tr><td>汕头大学医学院第一附属医院</td><td>MQ</td><td>徐贤</td><td>14</td><td>6（10）</td><td></td></tr><tr><td>余杭妇幼</td><td>视图</td><td>张成汉</td><td>8</td><td>8</td><td></td></tr><tr><td>如皋博爱</td><td>视图</td><td>张成汉</td><td>15</td><td>15</td><td></td></tr><tr><td>舟山妇幼（微信）</td><td>http</td><td>张成汉</td><td>1</td><td>1</td><td></td></tr><tr><td>郑州金水区总医院</td><td>webservice</td><td>张成汉</td><td>10</td><td>10</td></tr></tbody></table><h3 id="2019-10"><a href="#2019-10" class="headerlink" title="2019.10"></a>2019.10</h3><table><thead><tr><th>医院</th><th>接口方式</th><th>负责人</th><th>接口数</th><th>已完成</th><th></th></tr></thead><tbody><tr><td>重庆医科大学附属永川医院</td><td>webservice</td><td>张成汉</td><td>11</td><td>10</td><td></td></tr><tr><td>邵逸夫</td><td>webservice</td><td>徐贤</td><td>12</td><td>12</td><td></td></tr><tr><td>中山六院</td><td>患者管理</td><td>徐贤</td><td>2</td><td>2</td><td></td></tr><tr><td>淄博妇幼门诊自助（慢病）</td><td>MQ</td><td>张成汉</td><td>2</td><td>2</td><td></td></tr><tr><td>安徽医科大学第一附属医院</td><td>MQ</td><td>徐贤</td><td>14</td><td>11</td><td></td></tr><tr><td>舟山市妇幼保健院</td><td>webservice</td><td>张成汉</td><td>5</td><td></td><td></td></tr><tr><td>平阳人民医院</td><td>webservice</td><td>徐贤</td><td>6</td><td>6</td><td></td></tr><tr><td>重庆市长寿区人民医院（微信）</td><td>http</td><td>徐贤</td><td>1</td><td>1</td><td></td></tr><tr><td>重庆市长寿区人民医院</td><td>视图</td><td>徐贤</td><td>8</td><td>7</td><td></td></tr><tr><td>鄞州人民医院</td><td>webservice</td><td>张成汉</td><td>8+10</td><td>10</td><td></td></tr><tr><td>新附一</td><td>MQ</td><td>徐贤</td><td>1</td><td>1</td><td></td></tr><tr><td>锦欣医疗集团（短信切换）</td><td>http</td><td>徐贤</td><td>1</td><td>1</td><td></td></tr><tr><td>江苏省人民医院</td><td>view</td><td>徐贤</td><td>1</td><td>1</td><td></td></tr><tr><td>绍兴二院</td><td>view</td><td>徐贤</td><td>4</td><td>4</td><td></td></tr><tr><td>重庆市第十三人民医院</td><td>view</td><td>徐贤</td><td>12</td><td></td><td></td></tr><tr><td>重庆医科大学附属永川医院</td><td>webservice</td><td>张成汉</td><td>1</td><td>1</td><td></td></tr><tr><td>福建省立医院</td><td>http</td><td>徐贤</td><td>1</td><td>1</td><td></td></tr><tr><td>东莞市第八人民医院</td><td>MQ</td><td>张成汉</td><td>8</td><td></td><td></td></tr><tr><td>江苏省人民医院</td><td>hl7/view</td><td>徐贤</td><td>3</td><td>3</td><td></td></tr><tr><td>海南现代妇女儿童医院</td><td>view</td><td>张成汉</td><td>8+1</td><td>8</td><td></td></tr><tr><td>如皋博爱</td><td>view</td><td>张成汉</td><td>3</td><td>3</td><td></td></tr><tr><td>三明市第一医院</td><td>webservice</td><td>徐贤</td><td>8</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Jh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器</title>
      <link href="/posts/5a60/"/>
      <url>/posts/5a60/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> Jh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞士旅行-准备</title>
      <link href="/posts/3d69/"/>
      <url>/posts/3d69/</url>
      
        <content type="html"><![CDATA[<h1 id="App"><a href="#App" class="headerlink" title="App"></a>App</h1><p>必备的就是Google Map和SBB的App（用于查询各种交通，火车、轮渡、缆车，全都可以搞定，一定要下载！）</p><p>【Google Maps】不用多说，全世界除  中国  以外最好用的地图软件。</p><p>【SBB Mobile】和【Rail Europe】可结合使用查询欧铁及 瑞士 交通信息。</p><p>【Google Translate】谷歌翻译软件。酌情下载法语、英语和德语（  瑞士  三个官方语言）。</p><p>【MeteoSwiss】瑞士天气预报</p><p>【Booking】酒店预定</p>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
            <tag> 瑞士 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞士旅行--Day9(2019.8.25)</title>
      <link href="/posts/2311/"/>
      <url>/posts/2311/</url>
      
        <content type="html"><![CDATA[<h1 id="苏黎世–-gt-俄罗斯–-gt-上海"><a href="#苏黎世–-gt-俄罗斯–-gt-上海" class="headerlink" title="苏黎世–&gt;俄罗斯–&gt;上海"></a>苏黎世–&gt;俄罗斯–&gt;上海</h1><ol><li><p>利马特河</p></li><li><p>班霍夫大街</p></li><li><p>苏黎世湖</p></li><li><p>林登霍夫公园</p></li></ol><p><img src="https://i.loli.net/2019/08/16/z67Ot9yUJgPrvLC.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
            <tag> 瑞士 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞士旅行--Day8(2019.8.24)</title>
      <link href="/posts/e3d0/"/>
      <url>/posts/e3d0/</url>
      
        <content type="html"><![CDATA[<h1 id="采尔马特"><a href="#采尔马特" class="headerlink" title="采尔马特"></a>采尔马特</h1><ol><li><p>采尔马特火车站</p></li><li><p>采尔马特</p></li></ol><h1 id="采尔马特–-gt-苏黎世-3-3h"><a href="#采尔马特–-gt-苏黎世-3-3h" class="headerlink" title="采尔马特–&gt;苏黎世 3.3h"></a>采尔马特–&gt;苏黎世 3.3h</h1><ol><li><p>苏黎世大教堂</p></li><li><p>玉特利山</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
            <tag> 瑞士 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞士旅行--Day7(2019.8.23)</title>
      <link href="/posts/e790/"/>
      <url>/posts/e790/</url>
      
        <content type="html"><![CDATA[<h1 id="蒙特勒–-gt-采尔马特2-5h"><a href="#蒙特勒–-gt-采尔马特2-5h" class="headerlink" title="蒙特勒–&gt;采尔马特2.5h"></a>蒙特勒–&gt;采尔马特2.5h</h1><p>蒙特勒 到 采尔马特 的交通路线概述：Montreux—→Visp——（换乘）—→Zermatt<br>另，再敲一次黑板——Visp到 采尔马特 的这段火车，和 瑞士 著名的“冰川快车”走的是同一段路，所以沿途的景色很不错，坐车的时候可以好好欣赏一下。不过要注意的是，这段车只是普通的火车，而“冰川快车”则是著名的豪华列车，有更便于观景的全景天窗，需要单独购买车票、不能使用Swiss Pass。如果想要乘坐冰川快车，可以从 蒙特勒 坐到Brig站（Visp后面一站）去换乘冰川快车，记得提前在网上预订。</p><h1 id="马特洪峰"><a href="#马特洪峰" class="headerlink" title="马特洪峰"></a>马特洪峰</h1><p>1）    冰川天堂：可以上到海拔3883米的观景台，是 欧洲 最高的缆车站及观景台，可以最近距离欣赏马特洪峰的地方。因为了解到这个玩法最适合滑雪爱好者，而且观景台上看到的景色主要就是雪山，比较单一，所以我们最后没有选择它。<br>2）    Gornergrat Bahn齿轮小火车：终点站Gornergrat观景台的海拔是3089米，就在前面说过的3100酒店旁边，虽然没有冰川天堂的观景台高，但也是360度的全景视野。这条线路最经典的是倒数第二站Rotenboden下车后可以拍到马特洪峰在湖面的倒影。【2.5小时】<br>3）    五湖徒步路线：顾名思义就是一条沿途会经过五个湖的徒步路线。<br>a出发点是在名为Zermatt ZBAG-zsb的车站，注意不要找错了，会坐一段3分钟的斜道小火车到达海拔2288米的Sunnegga观景台<br>b从Sunnegga出发坐一段7分钟的缆车会到达Blauherd，这里就是五湖徒步的起点<br>c五湖徒步的路线为：Blauherd出发，依次抵达Stellisee（最美） - Grindjisee - Grünsee - Moosjiesee - Leisee 五个湖，直至走回Sunnegga，再从Sunnegga乘坐斜道小火车返回 采尔马特<br>这段路官网说全程9.3公里，需要花费2.5小时，事实证明只有健步如飞的矫健登山er才能做到这一点。根据我们之前看到的攻略，一般人3~4小时比较靠谱，而像我们这样四体不勤+疯狂拍照的风格，至少要留出5小时才比较安全…总结我们失败的五湖徒步之旅，有两点经验一定要请大家记住：<br>一定一定要提前弄清楚末班车的时间，并提早出发，给徒步留出足够宽裕的时间。<br>到底是走到Stellisee湖就往回走，还是要一口气走完五湖，一定要提前想好，切忌当场纠结犹豫，浪费时间。<br>冰川博物馆？</p>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
            <tag> 瑞士 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞士旅行--Day6(2019.8.22)</title>
      <link href="/posts/2751/"/>
      <url>/posts/2751/</url>
      
        <content type="html"><![CDATA[<h1 id="格林–-gt-蒙特勒"><a href="#格林–-gt-蒙特勒" class="headerlink" title="格林–&gt;蒙特勒"></a>格林–&gt;蒙特勒</h1><ol><li><p>西庸城堡<strong>10:00-17:00</strong></p><p>西庸城堡 最经典的拍摄角度，就在城堡前往火车站的路上就能发现！</p><p>黄昏  西庸城堡还是建议下午四五点钟过来，一是人比较少，二是可以看莱芒湖的日落~西庸城堡外面的花园，以前也属于西庸城堡的一部分，是一个拍城堡人像很不错的点，之前看过有人在这里拍的婚纱照，也很有感觉~</p></li><li><p>拉沃葡萄园梯田</p><p>坐车到Chexbres-Village，再到Rivaz的徒步路线，走走停停拍拍照，1~2小时足够了，最后在Rivaz坐火车<br>从Rivaz到 蒙特勒 乘S2火车非常方便，16分钟就可以到达，但这趟车1小时才有一班，所以需要注意一下时间安排。</p></li><li><p>尼永码头（尼永也漂亮）</p><p>蒙特勒 到 伊瓦尔 的交通概述：Montreux—→Nyon—→（出站后步行至码头）—→Nyon（lac）—（坐船   ）→ Yvoire（lac）</p></li><li><p>伊瓦尔城堡【攻略下午游玩】</p></li><li><p>五感花园  jardin des cinq sens 12欧元</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
            <tag> 瑞士 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞士旅行--Day5(2019.8.21)</title>
      <link href="/posts/2611/"/>
      <url>/posts/2611/</url>
      
        <content type="html"><![CDATA[<h1 id="格林–-gt-First–-gt-Bachalpsee–-gt-格林"><a href="#格林–-gt-First–-gt-Bachalpsee–-gt-格林" class="headerlink" title="格林–&gt;First–&gt;Bachalpsee–&gt;格林"></a>格林–&gt;First–&gt;Bachalpsee–&gt;格林</h1><p>菲尔斯特的缆车运营时间是<strong>8:30-17:00</strong></p><p>步行至Grindewald BGF缆车站，买票上去菲尔斯特，瑞士通票打5折，缆车一共4个站：Grindelwald——Bort——Schreckfeld——First。坐缆车到达终点站，跟着指示牌的指引朝巴克普湖Bachalpsee的方向徒步（约1小时）。</p><p>天梭菲斯特悬崖步道(First Cliff Walk Presented by Tissot) 在车站边上。</p><p>这里介绍一下菲尔斯特（夏季）的游玩攻略：  </p><p>缆车一共4个站：Grindelwald——Bort——Schreckfeld——First  </p><ol><li><p>·从Grindelwald坐缆车到First。  </p></li><li><p>徒步到巴克普湖（Bachalpsee）。  </p></li><li><p>返回First，走天梭菲斯特悬崖步道(First Cliff Walk Presented by Tissot)。  </p></li><li><p>在瞭望台处玩袋式蹦极(First Bagjump)。  </p></li><li><p>玩飞渡椅(First Flyer)或滑翔机(First Glider)到Schreckfeld站。  </p></li><li><p>玩山地卡丁车(First Mountain Cart)到Bort站。  </p></li><li><p>玩滑板自行车(First Trottibike)回到Grindelwald站。</p></li></ol><p><img src="https://i.loli.net/2019/08/14/qKh7iCxkvwRSrEt.jpg" alt></p><p>各游玩项目具体的价格和营业时间，点击官网查看：  </p><p><a href="https://www.jungfrau.ch/en-gb/grindelwaldfirst/" target="_blank" rel="noopener">https://www.jungfrau.ch/en-gb/grindelwaldfirst/</a>  （右上角选中文）  </p><p>缆车票和某些游玩项目票组合一起买套票会有折扣</p><h1 id="格林–-gt-翁根Wengen–-gt-劳特布伦嫩Lauterbrunnen"><a href="#格林–-gt-翁根Wengen–-gt-劳特布伦嫩Lauterbrunnen" class="headerlink" title="格林–&gt;翁根Wengen–&gt;劳特布伦嫩Lauterbrunnen"></a>格林–&gt;翁根Wengen–&gt;劳特布伦嫩Lauterbrunnen</h1><p>格林德尔瓦尔德 到 翁根 的交通概述：Grindewald—→Zweilütschinen—→（换乘）—→Lauterbrunnen—→（换乘）—→Wengen</p><p>全程只要跟着“Lauterbrunnen”的标识指示的方向走就可以了。 <a href="http://www.mafengwo.cn/travel-scenic-spot/mafengwo/83100.html" target="_blank" rel="noopener">翁根</a> 的海拔比劳特布伦嫩要高，所以从<a href="http://www.mafengwo.cn/travel-scenic-spot/mafengwo/83100.html" target="_blank" rel="noopener">翁根</a> 徒步过去比较轻松。</p><p>当看到路牌上有显示Wengwald方向的路标时，可以先往Wengwald方向走一段，这一段会路过一个村庄和一个小农场，在一个高地上可以拍摄 <a href="http://www.mafengwo.cn/travel-scenic-spot/mafengwo/83579.html" target="_blank" rel="noopener">劳特布龙嫩</a> 全景。然后再返回到刚刚的路牌处，再沿着Lauterbrunnen方向下山。</p><h1 id="门利兴"><a href="#门利兴" class="headerlink" title="门利兴"></a>门利兴</h1><h1 id="米伦小镇"><a href="#米伦小镇" class="headerlink" title="米伦小镇"></a>米伦小镇</h1>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
            <tag> 瑞士 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞士旅行--Day4(2019.8.20)</title>
      <link href="/posts/e6d0/"/>
      <url>/posts/e6d0/</url>
      
        <content type="html"><![CDATA[<h1 id="格林德瓦–-gt-因特拉肯–-gt-施皮茨"><a href="#格林德瓦–-gt-因特拉肯–-gt-施皮茨" class="headerlink" title="格林德瓦–&gt;因特拉肯–&gt;施皮茨"></a>格林德瓦–&gt;因特拉肯–&gt;施皮茨</h1><ol><li><p>施皮茨城堡（上午去，下午船少）</p></li><li><p>图恩湖（廊桥）</p></li><li><p>因特拉肯小镇</p></li><li><p>因特拉肯城堡</p><p>Harder Kulm观景台登山列车本身的用时很短，只需要10分钟，但这趟车30分钟才有一趟，所以需要注意下时间安排。使用Swiss Pass不能免费，我们每人付了16瑞朗（往返价格）。</p></li><li><p>funky chocolate club</p></li><li><p>梦幻山坡</p><p>Grindelwald Grund西南侧背靠门利兴山的一片山坡，从门利兴出发的这趟缆车正好可以让我们尽情饱览梦幻山坡的美景。</p></li></ol><p><img src="https://i.loli.net/2019/08/14/dYosyGecfZqFLwD.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
            <tag> 瑞士 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞士旅行--Day3(2019.8.19)</title>
      <link href="/posts/2491/"/>
      <url>/posts/2491/</url>
      
        <content type="html"><![CDATA[<h1 id="卢塞恩–-gt-皮拉图斯山"><a href="#卢塞恩–-gt-皮拉图斯山" class="headerlink" title="卢塞恩–&gt;皮拉图斯山"></a>卢塞恩–&gt;皮拉图斯山</h1><p>皮拉图斯金色环游详细：从 卢塞恩 码头Luzern Bahnhofquai坐船到达Alpnachstad（游船途中可以选择在Hergiswill小镇下船参观玻璃工厂和博物馆），约50到90分钟，因为船的班次不多，所以记得提前计划好，也可以选择从 卢塞恩 火车站坐火车前往，但金色环游一般是选择坐船的。然后坐登山火车（世界上最大坡度48°的山壁齿轮铁道列车）到皮拉图斯山顶Pilatus Kulm，约40分钟。然后在山顶乘坐缆车到山底的Kriens站。然后步行10分钟到1号巴士站Bus Station NO.1，乘坐巴士回到 卢塞恩 火车站，约15分钟  缆车和火山打折不免费。</p><p>有两种方式可以登上皮拉图斯山，一种是从Kriens乘坐缆车，另一种是在Alpnachstad搭乘世界上最陡的登山齿轨铁道</p><p>1、到达卢塞恩的Kriens：在火车站乘坐Kriens方向的1路公交车在Linde/Pilatus站下车（乘坐约15分钟），接着步行5分钟抵达Kriens缆车站</p><p>2、到达Alpnachstad搭乘世界上最陡的登山齿轨铁道：乘列车抵达Alpnachstad，出站后，寻找写有Pilatus的指示牌；或者从卢塞恩码头（2号码头）坐船抵达Alpnachstad(约60-90分钟)</p><p><img src="https://i.loli.net/2019/08/14/u6F19YchiBbWONP.jpg" alt></p><h1 id="卢塞恩–-gt-龙疆–-gt-格林德瓦-1-5h"><a href="#卢塞恩–-gt-龙疆–-gt-格林德瓦-1-5h" class="headerlink" title="卢塞恩–&gt;龙疆–&gt;格林德瓦 1.5h"></a>卢塞恩–&gt;龙疆–&gt;格林德瓦 1.5h</h1><p>坐火车前进方向<strong>右边</strong></p><ol><li><p>龙疆湖</p></li><li><p>布里恩茨湖【蒂芙尼蓝色】  伊瑟尔特瓦尔德</p></li><li><p>布里恩茨码头 因特拉肯到布里恩茨会停靠5个地方 单程历时1小时13分</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
            <tag> 瑞士 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞士旅行--Day2(2019.8.18)</title>
      <link href="/posts/e450/"/>
      <url>/posts/e450/</url>
      
        <content type="html"><![CDATA[<h1 id="苏黎世-–-gt-卢塞恩"><a href="#苏黎世-–-gt-卢塞恩" class="headerlink" title="苏黎世 –&gt; 卢塞恩"></a>苏黎世 –&gt; 卢塞恩</h1><p>苏黎世 –&gt; 卢塞恩 （火车）</p><h1 id="卢塞恩城区"><a href="#卢塞恩城区" class="headerlink" title="卢塞恩城区"></a>卢塞恩城区</h1><p><img src="https://i.loli.net/2019/08/14/fyT6KGYPNDw1Ae3.jpg" alt></p><ol><li><p>卡佩尔廊桥、八角水塔【清晨或傍晚】 </p></li><li><p>木塞格城墙【8:00-19:00】</p></li><li><p>狮子纪念碑</p></li><li><p>瑞士交通博物馆【3小时】【10:00-18:00】</p><p>地址：Lidostrasse 5, 6006 Luzern,</p><p>到达方式：火车或BUS到Luzern Verkehrshaus 站。（离酒店也就2站公交车），推荐沿着琉森湖慢慢步行，沿湖的景色每到不行~</p><p>夏令：10:00-18:00，冬令：10:00-17:00</p><p>门票：博物馆：成人30瑞郎，如果有  瑞士  通票的话，  门票半价~</p></li></ol><h1 id="瑞吉山-4-5h"><a href="#瑞吉山-4-5h" class="headerlink" title="瑞吉山 4.5h"></a>瑞吉山 4.5h</h1><p><a href="https://www.rigi.ch/Information/Webcams" target="_blank" rel="noopener">瑞吉山实时摄像头https://www.rigi.ch/Information/Webcams</a></p><p>瑞吉山路线详细：从 <strong>卢塞恩码头Luzern Bahnhofquai坐船</strong>到<strong>达维茨瑙Vitznau</strong>，然后乘坐<strong>红色登山火车</strong>到达<strong>瑞吉山顶RIGI Kulm</strong>，在山顶游览一下后，再次乘坐红色登山火车到<strong>Rigi Staffelhohe站</strong>，在这个站下来后开始徒步，沿着指示牌<strong>徒步</strong>到<strong>Rigi Kaltbad（Luftseilbahn）站</strong>，这段路都很好走的，然后乘坐<strong>缆车</strong>到<strong>Weggis（Luftseilbahn）</strong>，最后<strong>步行</strong>到<strong>韦吉斯Weggis</strong>码头，<strong>坐船</strong>回到 <strong>卢塞恩码头</strong>。</p><p><img src="https://i.loli.net/2019/08/14/8QrajDNcUtTAMEn.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
            <tag> 瑞士 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞士旅行-Day1(2019.8.17)</title>
      <link href="/posts/636a/"/>
      <url>/posts/636a/</url>
      
        <content type="html"><![CDATA[<h1 id="杭州–-gt-上海–-gt-俄罗斯–-gt-苏黎世"><a href="#杭州–-gt-上海–-gt-俄罗斯–-gt-苏黎世" class="headerlink" title="杭州–&gt;上海–&gt;俄罗斯–&gt;苏黎世"></a>杭州–&gt;上海–&gt;俄罗斯–&gt;苏黎世</h1><p>万科西庐 –&gt; 杭州东站（打车）</p><p>杭州东站 –&gt; 上海虹桥（高铁 G7552检票口15A 7:16–8:22）</p><p>上海虹桥 –&gt; 龙阳路站（地铁2号线）</p><p>龙阳路站 –&gt; 上海浦东机场（磁悬浮）  T1航站楼 东方航空MU591</p><p>上海 –&gt; 俄罗斯 –&gt; 苏黎世（飞机）</p><p>苏黎世机场 –&gt; ibis budget Zurich Airport（电车10号线或12号线至Unterriet车站 5分钟）</p><p><img src="https://i.loli.net/2019/08/14/PwO8B2tTIoLlK5p.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
            <tag> 瑞士 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo短地址</title>
      <link href="/posts/179c/"/>
      <url>/posts/179c/</url>
      
        <content type="html"><![CDATA[<p>每次从博客分享文章给别人都很苦恼，Hexo 默认生成的链接太长了，而且一旦文章名字改变，链接也跟着改变。有没有什么方法让地址尽量短小精悍，同时永久化呢？</p><p>感谢 <a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">rozbo/hexo-abbrlink</a>，完美解决此痛点。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>在博客主目录下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>在  <code>_config.yml</code>  配置文件写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># abbrlink config</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc16 #support crc16(default) and crc32</span><br><span class="line">  rep: hex    #support dec(default) and hex</span><br><span class="line"></span><br><span class="line"># 更改 permalink 值</span><br><span class="line">permalink: posts/:abbrlink.html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加live2d看板动画</title>
      <link href="/posts/e4e6/"/>
      <url>/posts/e4e6/</url>
      
        <content type="html"><![CDATA[<h1 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h1><p><a href="https://www.npmjs.com/package/hexo-helper-live2d" target="_blank" rel="noopener">https://www.npmjs.com/package/hexo-helper-live2d</a></p><h1 id="安装live2d"><a href="#安装live2d" class="headerlink" title="安装live2d"></a>安装live2d</h1><p>在博客主目录下执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="下载各种动画model"><a href="#下载各种动画model" class="headerlink" title="下载各种动画model"></a>下载各种动画model</h1><p>地址：<a href="https://github.com/xiazeyu/live2d-widget-models.git" target="_blank" rel="noopener">https://github.com/xiazeyu/live2d-widget-models.git</a></p><p>下载好之后将packages里的所有动画模板拷贝到博客的node_modules目录里</p><p><img src="https://i.loli.net/2019/08/10/RodP2fDBF6KS4we.png" alt="RodP2fDBF6KS4we"></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>博客配置文件_config.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-epsilon2_1  <span class="comment">#模板目录，在node_modules里</span></span><br><span class="line">  display:</span><br><span class="line">    position: left</span><br><span class="line">    width: 150 </span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">false</span>  <span class="comment">#是否在手机进行显示</span></span><br></pre></td></tr></table></figure><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat启动闪退</title>
      <link href="/posts/27b2/"/>
      <url>/posts/27b2/</url>
      
        <content type="html"><![CDATA[<p>Tomcat启动闪退，可以稍微修改下startup.bat批处理文件，添加PAUSE，这样运行结束只有按任意键才会关掉窗口(调试成功，在去掉PAUSE)。</p><p><img src="https://i.loli.net/2019/08/06/oIEKGFeZAmOqtX9.png" alt="oIEKGFeZAmOqtX9"></p>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/posts/bc66/"/>
      <url>/posts/bc66/</url>
      
        <content type="html"><![CDATA[<p>Linux是目前应用最广泛的服务器操作系统，基于Unix，开源免费，由于系统的稳定性和安全性，市场占有率很高，几乎成为程序代码运行的最佳系统环境。linux不仅可以长时间的运行我们编写的程序代码，还可以安装在各种计算机硬件设备中，如手机、路由器等，Android程序最底层就是运行在linux系统上的。</p><a id="more"></a><h1 id="linux的目录结构"><a href="#linux的目录结构" class="headerlink" title="linux的目录结构"></a>linux的目录结构</h1><p><img src="https://i.loli.net/2019/08/06/hvmxfG1MIVnRwDH.png" alt="hvmxfG1MIVnRwDH"></p><ul><li><p>bin (binaries)存放二进制可执行文件</p></li><li><p>sbin (super user binaries)存放二进制可执行文件，只有root才能访问</p></li><li><p>etc (etcetera)存放系统配置文件</p></li><li><p>usr (unix shared resources)用于存放共享的系统资源</p></li><li><p>home 存放用户文件的根目录</p></li><li><p>root 超级用户目录</p></li><li><p>dev (devices)用于存放设备文件</p></li><li><p>lib (library)存放跟文件系统中的程序运行所需要的共享库及内核模块</p></li><li><p>mnt (mount)系统管理员安装临时文件系统的安装点</p></li><li><p>boot 存放用于系统引导时使用的各种文件</p></li><li><p>tmp (temporary)用于存放各种临时文件</p></li><li><p>var (variable)用于存放运行时需要改变数据的文件</p></li></ul><h1 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h1><p>命令格式：命令 -选项 参数 （选项和参数可以为空）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如：ls -la /usr</span><br></pre></td></tr></table></figure><h3 id="操作文件及目录"><a href="#操作文件及目录" class="headerlink" title="操作文件及目录"></a>操作文件及目录</h3><table><thead><tr><th>命令</th><th>参数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>cd</td><td></td><td>cd /home</td><td>切换目录</td></tr><tr><td>pwd</td><td></td><td>pwd</td><td>显示当前工作目录</td></tr><tr><td>touch</td><td></td><td>touch 1.txt</td><td>创建空文件</td></tr><tr><td>mkdir</td><td></td><td>mkdir testdir</td><td>创建一个新目录</td></tr><tr><td></td><td>-p</td><td>mkdir -p dir1/dir2/dir3/</td><td>创建多级目录，父目录不存在情况下先生成父目录</td></tr><tr><td>cp</td><td></td><td>cp 1.txt</td><td>复制文件或目录</td></tr><tr><td></td><td>-r</td><td>cp -r dir1/</td><td>递归处理，将指定目录下的文件与子目录一并拷贝</td></tr><tr><td>mv</td><td></td><td>mv dir1 dir2</td><td>移动文件或目录、文件或目录改名</td></tr><tr><td>rm</td><td></td><td>rm 1.txt</td><td>删除文件</td></tr><tr><td></td><td>-r<br>-f</td><td>rm -rf dir1</td><td>r 同时删除该目录下的所有文件<br>f强制删除文件或目录</td></tr><tr><td>rmdir</td><td></td><td>rmdir dir1</td><td>删除空目录</td></tr><tr><td>cat</td><td></td><td>cat 1.txt</td><td>显示文本文件内容</td></tr><tr><td>more</td><td></td><td>more 1.txt</td><td>分页显示文本文件内容，可前后翻页，空格向后，b向前</td></tr><tr><td>less</td><td></td><td>less 1.txt</td><td>分页显示文本文件内容，可前后翻译，空格向后，b向前，支持底行模式</td></tr><tr><td>head</td><td></td><td>head 1.txt</td><td>查看文本开头部分，默认十行</td></tr><tr><td></td><td>-[num]</td><td>head -20 1.txt</td><td>查看文本开头部分指定行数</td></tr><tr><td>tail</td><td></td><td>tail 1.txt</td><td>查看文本结尾部分，默认十行</td></tr><tr><td></td><td>-[num]</td><td></td><td>查看文本结尾部分指定行数</td></tr><tr><td></td><td>-f</td><td></td><td>循环滚动读取文件并动态显示在屏幕上，根据文件属性追踪</td></tr><tr><td></td><td>-F</td><td></td><td>循环滚动读取文件并动态显示在屏幕上，文件文件名追踪</td></tr><tr><td>wc</td><td></td><td>wc 1.txt</td><td>统计文本的行数、字数、字符数</td></tr><tr><td></td><td>-m</td><td>wc -m 1.txt</td><td>字符数</td></tr><tr><td></td><td>-w</td><td>wc -w 1.txt</td><td>文本字数</td></tr><tr><td></td><td>-l</td><td>wc -l 1.txt</td><td>文本行数</td></tr><tr><td>find</td><td>-name</td><td>find / -name 1.txt</td><td>在文件系统中的指定目录下查找指定的文件</td></tr><tr><td>grep</td><td></td><td>grep aaa 1.txt</td><td>在指定文件中查找包含指定内容的行，例：在1.txt中查找包含aaa的所有行</td></tr><tr><td>ln</td><td></td><td>ln 1.txt 1_bak.txt</td><td>建立链接文件</td></tr><tr><td></td><td>-s</td><td>ln -s 1.txt 1_bak.txt</td><td>对源文件建立符号连接，而非硬连接</td></tr></tbody></table><h3 id="系统常用命令"><a href="#系统常用命令" class="headerlink" title="系统常用命令"></a>系统常用命令</h3><table><thead><tr><th>命令</th><th>参数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>top</td><td></td><td>top</td><td>显示当前系统中耗费资源最多的进程</td></tr><tr><td>date</td><td></td><td>date</td><td>显示系统当前时间</td></tr><tr><td>ps</td><td></td><td></td><td>较少单独使用，配参数根据需求，ps -ef 或者 ps -aux</td></tr><tr><td></td><td>-e<br>/-A</td><td>ps -e</td><td>显示所有进程，环境变量</td></tr><tr><td></td><td>-f</td><td>ps -ef</td><td>全格式显示</td></tr><tr><td></td><td>-a</td><td>ps -a</td><td>显示所有用户的所有进程（包括其他用户）</td></tr><tr><td></td><td>-u</td><td>ps -au</td><td>按用户名和启动时间的顺序来显示进程</td></tr><tr><td></td><td>-x</td><td>ps -aux</td><td>显示无控制终端的进程</td></tr><tr><td>kill</td><td>-9</td><td>kill -9 pid</td><td>强制杀死一个进程</td></tr><tr><td>df</td><td></td><td>df</td><td>显示文件系统磁盘空间的使用情况</td></tr><tr><td></td><td>-h</td><td>df -h</td><td>以人类可读的方式显示，Kb，Mb，GB等</td></tr><tr><td>du</td><td></td><td></td><td>显示指定的目录及其子目录已使用的磁盘空间的总和</td></tr><tr><td></td><td>-s</td><td>du -s *</td><td>显示指定目录的总和，*当前目录下表示所有</td></tr><tr><td></td><td>-h</td><td>du -sh *</td><td>以人类可读的方式显示，Kb，Mb，GB等</td></tr><tr><td>free</td><td></td><td>free</td><td>显示当前内存和交换空间的使用情况</td></tr><tr><td>ifconfig</td><td></td><td>ifconfig</td><td>网卡网络配置，常用于查看当前IP地址</td></tr><tr><td></td><td></td><td>ifconfig eth0 192.168.12.22</td><td>临时修改系统IP（重启后失效）</td></tr><tr><td>ping</td><td></td><td>ping baidu.com</td><td>测试网络的连通性</td></tr><tr><td>hostname</td><td></td><td>hostname</td><td>查看主机名</td></tr><tr><td>shutdown</td><td>-r</td><td>shutdown -r</td><td>先关机再重启</td></tr><tr><td></td><td>-h</td><td>shutdown -h</td><td>关机后不重启</td></tr><tr><td>halt</td><td></td><td>halt</td><td>关机后关闭电源，相当于shutdown -h</td></tr><tr><td>reboot</td><td></td><td>reboot</td><td>重新启动，相当于shutdown -r</td></tr></tbody></table><h3 id="压缩解压缩"><a href="#压缩解压缩" class="headerlink" title="压缩解压缩"></a>压缩解压缩</h3><table><thead><tr><th>命令</th><th>参数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>gzip</td><td></td><td>gzip 1.txt</td><td>压缩后面的文件或者文件夹</td></tr><tr><td></td><td>-d</td><td>gzip -d 1.txt.gz</td><td>解压后面的压缩文件</td></tr><tr><td></td><td>-[num]</td><td>gzip -9 1.txt</td><td>用指定的数字num调整压缩的速度，-1或–fast表示最快压缩方法（低压缩比），-9或–best表示最慢压缩方法（高压缩比）。系统缺省值为6</td></tr><tr><td>tar</td><td>-c</td><td>tar -cvf 1.tar 1.txt</td><td>建立一个压缩文件的参数指令，例，将1.txt压缩为1.tar，也可指定多个文件或文件夹</td></tr><tr><td></td><td>-x</td><td>tar -xvf 1.tar 1.txt</td><td>解开一个压缩文件的参数指令</td></tr><tr><td></td><td>-z</td><td>tar -acvf 1.tar.gz 1.txt<br>tar -zxvf 1.tar.gz 1.txt</td><td>是否需要用gzip，使用gzip压缩或解压</td></tr><tr><td></td><td>-v</td><td></td><td>压缩的过程中显示文件</td></tr><tr><td></td><td>-f</td><td></td><td>使用档名，再f之后要立即接档名</td></tr></tbody></table><h3 id="SCP"><a href="#SCP" class="headerlink" title="SCP"></a>SCP</h3><p>scp命令用于Linux之间复制文件和目录。</p><p>scp是 secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从本地复制到远程</span></span><br><span class="line">scp local_file remote_username@remote_ip:remote_folder </span><br><span class="line">scp -r local_folder remote_username@remote_ip:remote_folder </span><br><span class="line"></span><br><span class="line"><span class="comment">#从远程复制到本地</span></span><br><span class="line">scp root@www.runoob.com:/home/root/others/music /home/space/music/1.mp3 </span><br><span class="line">scp -r www.runoob.com:/home/root/others/ /home/space/music/</span><br></pre></td></tr></table></figure><p>如果远程服务器防火墙有为scp命令设置了指定的端口，我们需要使用 -P 参数来设置命令的端口号，命令格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#scp 命令使用端口号 4588</span></span><br><span class="line">scp -P 4588 remote@www.runoob.com:/usr/<span class="built_in">local</span>/sin.sh /home/administrator</span><br></pre></td></tr></table></figure><h3 id="文件权限操作"><a href="#文件权限操作" class="headerlink" title="文件权限操作"></a>文件权限操作</h3><ul><li><p>linux文件权限的描述格式解读</p></li><li><p>r 可读权限，w可写权限，x可执行权限（也可以用二进制表示 111 110 100 –&gt; 764）</p></li><li><p>第1位：文件类型（d 目录，- 普通文件，l 链接文件）</p></li><li><p>第2-4位：所属用户权限，用u（user）表示</p></li><li><p>第5-7位：所属组权限，用g（group）表示</p></li><li><p>第8-10位：其他用户权限，用o（other）表示</p></li><li><p>第2-10位：表示所有的权限，用a（all）表示</p></li></ul><table><thead><tr><th>命令</th><th>参数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>chmod</td><td></td><td>chmod u+r 1.txt</td><td>修改文件或目录的权限<br>u表示当前用户，g表示同组用户，o表示其他用户，a表示所有用户<br>r表示可读，w表示可写，x表示可执行<br>例：修改1.txt文件给当前用户添加可执行权限</td></tr><tr><td></td><td>-R</td><td>chmod -R u+r dir1</td><td>修改指定目录及其子目录的所有文件的权限</td></tr><tr><td></td><td>三位数字</td><td>chmod 764 1.sh</td><td>直接指定文件的权限<br>7：表示可读可写可执行，4+2+1<br>6：表示可读可写，4+2<br>…</td></tr><tr><td>chown</td><td></td><td>chown user1:group1 1.txt</td><td>修改文件的所属用户和组<br>例：将1.txt文件的所属用户指定为user1，组为group1</td></tr><tr><td></td><td>-R</td><td>chown -R user1:group1 1.txt</td><td>修改目录下所有文件及子目录的所属用户和组，用数字来表示泉下（r=4，w=2，x=1，-=0）</td></tr></tbody></table><h1 id="linux系统常用快捷键及符号命令"><a href="#linux系统常用快捷键及符号命令" class="headerlink" title="linux系统常用快捷键及符号命令"></a>linux系统常用快捷键及符号命令</h1><table><thead><tr><th>命令</th><th>参数</th><th>实例</th><th>说明</th></tr></thead><tbody><tr><td>ctrl + c</td><td></td><td></td><td>停止进程</td></tr><tr><td>ctrl + l</td><td></td><td></td><td>清屏</td></tr><tr><td>ctrl + r</td><td></td><td></td><td>搜索历史命令</td></tr><tr><td>ctrl + q</td><td></td><td></td><td>退出</td></tr><tr><td>tab</td><td></td><td></td><td>自动不全</td></tr><tr><td>&gt;</td><td></td><td>echo “haha” &gt; 1.txt</td><td>将前一条命令的输出，写入到后面的文本中<br>将文本清空，然后写入</td></tr><tr><td>&gt;&gt;</td><td></td><td>echo “lala” &gt;&gt; 1.txt</td><td>将前一条命令的输出，写入到后面的文本中<br>不清空文本，追加到文本最后</td></tr><tr><td><code>&#124;</code></td><td></td><td><code>cat 1.txt &#124; grep ‘hello’</code></td><td>管道命令，以前一个命令的输出作为输入，然后进行运算<br>例：打印1.txt中带有hello字符串的行</td></tr><tr><td>*</td><td></td><td></td><td>通配符，指所有</td></tr></tbody></table><h1 id="查看物理内存大小"><a href="#查看物理内存大小" class="headerlink" title="查看物理内存大小"></a>查看物理内存大小</h1><p>这是因为free 命令看到的内存为可供kernel分配的物理内存，非全部物理内存，系统启动后，物理内存会保留一部分给BIOS，linux内核本身也要占用一部分，所以进行系统后可供分配的物理内存就少了一点</p><p>想看到全部物理内存可以用dmidecode命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmidecode -t memory | grep Size: | grep -v <span class="string">"No Module Installed"</span></span><br></pre></td></tr></table></figure><p>通过这个命令，不但能得到服务器总的内存大小，还可以知道服务器上具体插了几个内存条以及每条内存的大小，很好用</p><p><img src="https://i.loli.net/2020/03/10/CYoXLiqPJG8cfjd.png" alt="image.png"></p><h1 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h1><p>vi / vim是Linux上最常用的文本编辑器而且功能非常强大。</p><h3 id="修改文本"><a href="#修改文本" class="headerlink" title="修改文本"></a>修改文本</h3><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>i</td><td>在光标前插入</td></tr><tr><td>I</td><td>在光标当前行开始插入</td></tr><tr><td>a</td><td>在光标后插入</td></tr><tr><td>A</td><td>在光标当前行末尾插入</td></tr><tr><td>o</td><td>在光标当前行的下一行插入新行</td></tr><tr><td>O</td><td>在光标当前行的上一行插入新行</td></tr><tr><td>:wq</td><td>保存并退出</td></tr></tbody></table><h3 id="定位命令"><a href="#定位命令" class="headerlink" title="定位命令"></a>定位命令</h3><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>取消行号</td></tr><tr><td>gg</td><td>跳到首行</td></tr><tr><td>G</td><td>跳到末行</td></tr><tr><td>:n</td><td>跳到第n行</td></tr></tbody></table><h3 id="替换和取消命令"><a href="#替换和取消命令" class="headerlink" title="替换和取消命令"></a>替换和取消命令</h3><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>u</td><td>undo，取消上一步操作</td></tr><tr><td>ctrl + r</td><td>redo，返回到undo之前</td></tr><tr><td>r</td><td>替换光标所在处的字符</td></tr><tr><td>R</td><td>从光标所在处开始替换，按Esc键结束</td></tr></tbody></table><h3 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h3><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>x</td><td>删除光标所在处字符</td></tr><tr><td>nx</td><td>删除光标所在处后的n个字符</td></tr><tr><td>dd</td><td>删除光标所在行。ndd删除n行</td></tr><tr><td>dG</td><td>删除光标所在行到末尾行的所有内容</td></tr><tr><td>D</td><td>删除光标所在处到行尾的内容</td></tr><tr><td>:5,7d</td><td>删除指定范围的行</td></tr></tbody></table><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>Shift + zz</td><td>保存退出，与“:wq”作用相同</td></tr><tr><td>v</td><td>进入字符可视模式</td></tr><tr><td>V</td><td>进入行可视模式</td></tr><tr><td>ctrl + v</td><td>进入块可视模式</td></tr></tbody></table><h1 id="安装wget"><a href="#安装wget" class="headerlink" title="安装wget"></a>安装wget</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget</span><br></pre></td></tr></table></figure><h1 id="切割日志"><a href="#切割日志" class="headerlink" title="切割日志"></a>切割日志</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/2020-04-30 02:00:[0-9][0-9]/,/2020-04-30 03:00:[0-9][0-9]/p'</span> /mnt/hug/service/server/service-server.log&gt;/mnt/hug/service/server/lj0430.txt</span><br></pre></td></tr></table></figure><h1 id="查询日志关键字"><a href="#查询日志关键字" class="headerlink" title="查询日志关键字"></a>查询日志关键字</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 日志文件名.<span class="built_in">log</span> | grep <span class="string">"关键字"</span></span><br></pre></td></tr></table></figure><h1 id="JVM堆栈信息dump及问题排查"><a href="#JVM堆栈信息dump及问题排查" class="headerlink" title="JVM堆栈信息dump及问题排查"></a>JVM堆栈信息dump及问题排查</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#dump 方法栈信息</span></span><br><span class="line">jstack <span class="variable">$pid</span> &gt; /home/<span class="variable">$pid</span>/jstack.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#dump jvm内存使用情况</span></span><br><span class="line">jmap -heap <span class="variable">$pid</span> &gt; /home/<span class="variable">$pid</span>/jmapheap.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#dump jvm二进制的内存详细使用情况 （效果同在Tomcat的catalina.sh中添加 set JAVA_OPTS=%JAVA_OPTS% -server -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/home/heapdump  此文件需要借用内存分析工具如：Memory Analyzer (MAT)来分析）</span></span><br><span class="line">jmap -dump:format=b,file=/home/<span class="variable">$pid</span>/jmapdump.txt <span class="variable">$pid</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql定时任务</title>
      <link href="/posts/9917/"/>
      <url>/posts/9917/</url>
      
        <content type="html"><![CDATA[<p><strong>MySQL</strong> 从 <em>5.0</em> 开始自带了定时事件操作。</p><p>后台周期定时任务可以有多种解决方案，我所知道的大概有以下几种：</p><p>(1). 后台框架自带定时任务。比如  <strong>Php</strong>  中的  <strong>Laravel</strong>  框架里有提供定时任务操作接口，其他的框架大家可以单独针对了解。</p><p>(2). 服务器操作系统层面的定时。通常我们的服务器主要基于两大平台，一个  <strong>Windows Server</strong>, 它的定时任务系统有提供的。<strong>Linux</strong>  下也有，通常流行的是  <code>crontab</code>  工具实现的 ( 想了解这里有个  <a href="http://www.imooc.com/learn/216" target="_blank" rel="noopener">视频教程</a>  ), 但是  <code>crontab</code>  的定时任务通常定时操作脚本这样的文件，而直接定时操作数据库的就比较麻烦了。但是也有解决办法，就是在服务器端写一个  <code>get</code>  请求  <code>url</code>，在后台里完成要定时完成的数据库操作，这样我们只要实现定时访问该接口就行了，<strong>Linux</strong>  下的  <code>curl</code>  命令可以很方便发出  <code>get</code>  请求，我们只要写个包含访问该接口的脚本，再结合  <code>crontab</code>  就可以完成后台数据的定时更新操作了。</p><p>(3). 但是毕竟写个接口安全性不是太高，而大家用的如果是  <strong>MySQL</strong>  数据库，那就正好可以利用其自带的定时操作了，下面简单介绍  <strong>MySQL</strong>  定时操作的使用。</p><a id="more"></a><h3 id="Mysql配置"><a href="#Mysql配置" class="headerlink" title="Mysql配置"></a>Mysql配置</h3><p>查看定时策略是否开启，查看命令:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%event_sche%'</span>;</span><br></pre></td></tr></table></figure><p>显示的 <strong>event_scheduler</strong> 为 <em>OFF</em> 时用以下命令开启:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> event_scheduler=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>以上的改法在数据库重启后将会恢复为原来状态，要想数据库重启后也可以让 <strong>event_scheduler</strong> 开启，则需要在配置文件 <code>my.ini</code> 的设置。修改如下，然后重启 <strong>MySQL</strong> 服务即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">event_scheduler=ON // 这一行加入 mysqld 标签下</span><br></pre></td></tr></table></figure><h3 id="创建定时任务-event-事件"><a href="#创建定时任务-event-事件" class="headerlink" title="创建定时任务 event ( 事件 )"></a>创建定时任务 event ( 事件 )</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">event</span> second_event</span><br><span class="line"><span class="keyword">on</span> schedule every <span class="number">1</span> <span class="keyword">second</span></span><br><span class="line"><span class="keyword">on</span> completion <span class="keyword">preserve</span> <span class="keyword">disable</span></span><br><span class="line"><span class="keyword">do</span> <span class="keyword">call</span> test_proce();</span><br></pre></td></tr></table></figure><p>代码说明：</p><ol><li>第一行  <strong>create event day_event</strong>  是创建名为  <em>second_event</em>  的事件,注意此处没有括号；</li><li>第二行是创建周期定时的规则，本处的意思是每秒钟执行一次；</li><li>第三行  <strong>on completion preserve disable</strong>  是表示创建后并不开始生效；</li><li>第四行  <strong>do call test_proce()</strong>  是该  <em>event(事件)</em>  的操作内容，表示调用我们刚刚创建的  <em>test_proce()</em>  存储过程。</li></ol><h3 id="查看定时任务-event-事件"><a href="#查看定时任务-event-事件" class="headerlink" title="查看定时任务 event ( 事件 )"></a>查看定时任务 event ( 事件 )</h3><p>查看本机所有的事件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> event_name,event_definition,interval_value,interval_field,<span class="keyword">status</span> <span class="keyword">FROM</span> information_schema.EVENTS;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/06/NWewOr8ABKJTxRk.png" alt="NWewOr8ABKJTxRk"></p><h3 id="开启已经创建好的-event-事件"><a href="#开启已经创建好的-event-事件" class="headerlink" title="开启已经创建好的 event ( 事件 )"></a>开启已经创建好的 event ( 事件 )</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">event</span> second_event <span class="keyword">on</span> completion <span class="keyword">preserve</span> <span class="keyword">enable</span>;//开启定时任务</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">event</span> second_event <span class="keyword">on</span> completion <span class="keyword">preserve</span> <span class="keyword">disable</span>;//关闭定时任务</span><br></pre></td></tr></table></figure><h3 id="常见周期定时规则"><a href="#常见周期定时规则" class="headerlink" title="常见周期定时规则"></a>常见周期定时规则</h3><p><strong>① 周期执行 – 关键字 EVERY</strong></p><p>单位有：<strong>second, minute, hour, day, week(周), quarter(季度), month, year</strong>，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">on schedule every 1 second        //每秒执行1次</span><br><span class="line">on schedule every 2 minute        //每两分钟执行1次</span><br><span class="line">on schedule every 3 day            //每3天执行1次</span><br></pre></td></tr></table></figure><p><strong>② 在具体某个时间执行 – 关键字 AT</strong>, 如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">on schedule at current_timestamp()+interval 5 day    // 5天后执行</span><br><span class="line">on schedule at current_timestamp()+interval 10 minute    // 10分钟后执行</span><br><span class="line">on schedule at '2016-10-01 21:50:00'        // 在2016年10月1日，晚上9点50执行</span><br></pre></td></tr></table></figure><p><strong>③ 在某个时间段执行 – 关键字 STARTS ENDS</strong>, 如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">on schedule every 1 day starts current_timestamp()+interval 5 day ends current_timestamp()+interval 1 month // 5天后开始每天都执行执行到下个月底</span><br><span class="line">on schedule every 1 day ends current_timestamp()+interval 5 day //从现在起每天执行，执行5天</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下查看最消耗CPU、内存的进程</title>
      <link href="/posts/a3d8/"/>
      <url>/posts/a3d8/</url>
      
        <content type="html"><![CDATA[<h3 id="CPU占用最多的前10个进程"><a href="#CPU占用最多的前10个进程" class="headerlink" title="CPU占用最多的前10个进程"></a>CPU占用最多的前10个进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps auxw|head -1;ps auxw|sort -rn -k3|head -10</span><br></pre></td></tr></table></figure><h3 id="内存消耗最多的前10个进程"><a href="#内存消耗最多的前10个进程" class="headerlink" title="内存消耗最多的前10个进程"></a>内存消耗最多的前10个进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps auxw|head -1;ps auxw|sort -rn -k4|head -10</span><br></pre></td></tr></table></figure><h3 id="虚拟内存使用最多的前10个进程"><a href="#虚拟内存使用最多的前10个进程" class="headerlink" title="虚拟内存使用最多的前10个进程"></a>虚拟内存使用最多的前10个进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps auxw|head -1;ps auxw|sort -rn -k5|head -10</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="参数含义"><a href="#参数含义" class="headerlink" title="参数含义"></a>参数含义</h3><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>USER</td><td>进程所属用户</td></tr><tr><td>PID</td><td>进程ID</td></tr><tr><td>%CPU</td><td>进程占用CPU百分比</td></tr><tr><td>%MEM</td><td>进程的内存占用率</td></tr><tr><td>MAJFL</td><td>is the major page fault count</td></tr><tr><td>VSZ</td><td>进程所使用的虚存的大小，单位：kb（killobytes）</td></tr><tr><td>RSS</td><td>实际内存占用大小，单位：kb（killobytes）</td></tr><tr><td>TTY</td><td>与进程关联的终端</td></tr><tr><td>STAT</td><td>进程状态<br>D    不可中断     Uninterruptible sleep (usually IO)<br>R    正在运行，或在队列中的进程 <br>    S    处于休眠状态 <br>    T    停止或被追踪 <br>    Z    僵尸进程 <br>    W    进入内存交换（从内核2.6开始无效） <br>    X    死掉的进程 <br><br>    &lt;    高优先级 <br>    N    低优先级 <br>    L    有些页被锁进内存 <br>    s    包含子进程 <br>    +    位于后台的进程组； <br>    l    多线程，克隆线程  multi-threaded (using CLONE_THREAD, like NPTL pthreads do)</td></tr><tr><td>START</td><td>进程启动时刻</td></tr><tr><td>TIME</td><td>进程运行时长</td></tr><tr><td>COMMAND</td><td>启动进程的命令</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql存储过程</title>
      <link href="/posts/3657/"/>
      <url>/posts/3657/</url>
      
        <content type="html"><![CDATA[<p>MySQL 5.0 版本开始支持存储过程。</p><p>存储过程（Stored Procedure）是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象。</p><p>存储过程是为了完成特定功能的SQL语句集，经编译创建并保存在数据库中，用户可通过指定存储过程的名字并给定参数(需要时)来调用执行。</p><p>存储过程思想上很简单，就是数据库 SQL 语言层面的代码封装与重用。</p><a id="more"></a><p><strong>优点</strong></p><ul><li>存储过程可封装，并隐藏复杂的商业逻辑。</li><li>存储过程可以回传值，并可以接受参数。</li><li>存储过程无法使用 SELECT 指令来运行，因为它是子程序，与查看表，数据表或用户定义函数不同。</li><li>存储过程可以用在数据检验，强制实行商业逻辑等。</li></ul><p><strong>缺点</strong></p><ul><li>存储过程，往往定制化于特定的数据库上，因为支持的编程语言不同。当切换到其他厂商的数据库系统时，需要重写原有的存储过程。</li><li>存储过程的性能调校与撰写，受限于各种数据库系统。</li></ul><h2 id="存储过程的创建和调用"><a href="#存储过程的创建和调用" class="headerlink" title="存储过程的创建和调用"></a>存储过程的创建和调用</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span></span><br><span class="line">    [DEFINER = &#123; <span class="keyword">user</span> | <span class="keyword">CURRENT_USER</span> &#125;]</span><br><span class="line">　<span class="keyword">PROCEDURE</span> sp_name ([proc_parameter[,...]])</span><br><span class="line">    [characteristic ...] routine_body</span><br><span class="line"></span><br><span class="line">proc_parameter:</span><br><span class="line">    [ <span class="keyword">IN</span> | <span class="keyword">OUT</span> | INOUT ] param_name <span class="keyword">type</span></span><br><span class="line"></span><br><span class="line">characteristic:</span><br><span class="line">    <span class="keyword">COMMENT</span> <span class="string">'string'</span></span><br><span class="line">  | <span class="keyword">LANGUAGE</span> <span class="keyword">SQL</span></span><br><span class="line">  | [<span class="keyword">NOT</span>] <span class="keyword">DETERMINISTIC</span></span><br><span class="line">  | &#123; CONTAINS <span class="keyword">SQL</span> | <span class="keyword">NO</span> <span class="keyword">SQL</span> | <span class="keyword">READS</span> <span class="keyword">SQL</span> <span class="keyword">DATA</span> | MODIFIES <span class="keyword">SQL</span> <span class="keyword">DATA</span> &#125;</span><br><span class="line">  | <span class="keyword">SQL</span> <span class="keyword">SECURITY</span> &#123; DEFINER | INVOKER &#125;</span><br><span class="line"></span><br><span class="line">routine_body:</span><br><span class="line">　　Valid <span class="keyword">SQL</span> routine <span class="keyword">statement</span></span><br><span class="line"></span><br><span class="line">[begin_label:] <span class="keyword">BEGIN</span></span><br><span class="line">　　[statement_list]</span><br><span class="line">　　　　……</span><br><span class="line"><span class="keyword">END</span> [end_label]</span><br></pre></td></tr></table></figure><h3 id="MYSQL-存储过程中的关键语法"><a href="#MYSQL-存储过程中的关键语法" class="headerlink" title="MYSQL 存储过程中的关键语法"></a><strong>MYSQL 存储过程中的关键语法</strong></h3><p>声明语句结束符，可以自定义</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line">或</span><br><span class="line">DELIMITER //</span><br></pre></td></tr></table></figure><p>声明存储过程:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> demo_in_parameter(<span class="keyword">IN</span> p_in <span class="built_in">int</span>)</span><br></pre></td></tr></table></figure><p>存储过程开始和结束符号:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> .... <span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>变量赋值:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> @p_in=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>变量定义:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> l_int <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">default</span> <span class="number">4000000</span>;</span><br></pre></td></tr></table></figure><p>存储过程体</p><ul><li>存储过程体包含了在过程调用时必须执行的语句，例如：dml、ddl语句，if-then-else和while-do语句、声明变量的declare语句等</li><li>过程体格式：以begin开始，以end结束(可嵌套)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">　　<span class="keyword">BEGIN</span></span><br><span class="line">　　　　<span class="keyword">BEGIN</span></span><br><span class="line">　　　　　　statements; </span><br><span class="line">　　　　<span class="keyword">END</span></span><br><span class="line">　　<span class="keyword">END</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>每个嵌套块及其中的每条语句，必须以分号结束，表示过程体结束的begin-end块(又叫做复合语句compound statement)，则不需要分号。</p><p>为语句块贴标签:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[begin_label:] <span class="keyword">BEGIN</span></span><br><span class="line">　　[statement_list]</span><br><span class="line"><span class="keyword">END</span> [end_label]</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">label1: <span class="keyword">BEGIN</span></span><br><span class="line">　　label2: <span class="keyword">BEGIN</span></span><br><span class="line">　　　　label3: <span class="keyword">BEGIN</span></span><br><span class="line">　　　　　　statements; </span><br><span class="line">　　　　<span class="keyword">END</span> label3 ;</span><br><span class="line">　　<span class="keyword">END</span> label2;</span><br><span class="line"><span class="keyword">END</span> label1</span><br></pre></td></tr></table></figure><p>标签有两个作用：</p><ul><li>1、增强代码的可读性</li><li>2、在某些语句(例如:leave和iterate语句)，需要用到标签</li></ul><h2 id="存储过程的参数"><a href="#存储过程的参数" class="headerlink" title="存储过程的参数"></a>存储过程的参数</h2><p>MySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT,形式如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATEPROCEDURE 存储过程名([[IN |OUT |INOUT ] 参数名 数据类形...])</span><br></pre></td></tr></table></figure><ul><li>IN 输入参数：表示调用者向过程传入值（传入值可以是字面量或变量）</li><li>OUT 输出参数：表示过程向调用者传出值(可以返回多个值)（传出值只能是变量）</li><li>INOUT 输入输出参数：既表示调用者向过程传入值，又表示过程向调用者传出值（值只能是变量）</li></ul><h3 id="in-输入参数"><a href="#in-输入参数" class="headerlink" title="in 输入参数"></a>in 输入参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delimiter $$</span><br><span class="line">mysql&gt; create procedure in_param(<span class="keyword">in</span> p_in int)</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; 　　select p_in;</span><br><span class="line">    -&gt; 　　<span class="built_in">set</span> p_in=2;</span><br><span class="line">    -&gt;    select P_in;</span><br><span class="line">    -&gt; end$$</span><br><span class="line">mysql&gt; delimiter ;</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> @p_in=1;</span><br><span class="line"></span><br><span class="line">mysql&gt; call in_param(@p_in);</span><br><span class="line">+------+</span><br><span class="line">| p_in |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">+------+</span><br><span class="line">| P_in |</span><br><span class="line">+------+</span><br><span class="line">|    2 |</span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select @p_in;</span><br><span class="line">+-------+</span><br><span class="line">| @p_in |</span><br><span class="line">+-------+</span><br><span class="line">|     1 |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure><p>以上可以看出，p_in 在存储过程中被修改，但并不影响 @p_id 的值，因为前者为局部变量、后者为全局变量。</p><h3 id="out输出参数"><a href="#out输出参数" class="headerlink" title="out输出参数"></a>out输出参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delimiter //</span><br><span class="line">mysql&gt; create procedure out_param(out p_out int)</span><br><span class="line">    -&gt;   begin</span><br><span class="line">    -&gt;     select p_out;</span><br><span class="line">    -&gt;     <span class="built_in">set</span> p_out=2;</span><br><span class="line">    -&gt;     select p_out;</span><br><span class="line">    -&gt;   end</span><br><span class="line">    -&gt; //</span><br><span class="line">mysql&gt; delimiter ;</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> @p_out=1;</span><br><span class="line"></span><br><span class="line">mysql&gt; call out_param(@p_out);</span><br><span class="line">+-------+</span><br><span class="line">| p_out |</span><br><span class="line">+-------+</span><br><span class="line">|  NULL |</span><br><span class="line">+-------+</span><br><span class="line">　　<span class="comment">#因为out是向调用者输出参数，不接收输入的参数，所以存储过程里的p_out为null</span></span><br><span class="line">+-------+</span><br><span class="line">| p_out |</span><br><span class="line">+-------+</span><br><span class="line">|     2 |</span><br><span class="line">+-------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select @p_out;</span><br><span class="line">+--------+</span><br><span class="line">| @p_out |</span><br><span class="line">+--------+</span><br><span class="line">|      2 |</span><br><span class="line">+--------+</span><br><span class="line">　　<span class="comment">#调用了out_param存储过程，输出参数，改变了p_out变量的值</span></span><br></pre></td></tr></table></figure><h3 id="inout输入参数"><a href="#inout输入参数" class="headerlink" title="inout输入参数"></a>inout输入参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delimiter $$</span><br><span class="line">mysql&gt; create procedure inout_param(inout p_inout int)</span><br><span class="line">    -&gt;   begin</span><br><span class="line">    -&gt;     select p_inout;</span><br><span class="line">    -&gt;     <span class="built_in">set</span> p_inout=2;</span><br><span class="line">    -&gt;     select p_inout;</span><br><span class="line">    -&gt;   end</span><br><span class="line">    -&gt; $$</span><br><span class="line">mysql&gt; delimiter ;</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> @p_inout=1;</span><br><span class="line"></span><br><span class="line">mysql&gt; call inout_param(@p_inout);</span><br><span class="line">+---------+</span><br><span class="line">| p_inout |</span><br><span class="line">+---------+</span><br><span class="line">|       1 |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line">+---------+</span><br><span class="line">| p_inout |</span><br><span class="line">+---------+</span><br><span class="line">|       2 |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select @p_inout;</span><br><span class="line">+----------+</span><br><span class="line">| @p_inout |</span><br><span class="line">+----------+</span><br><span class="line">|        2 |</span><br><span class="line">+----------+</span><br><span class="line"><span class="comment">#调用了inout_param存储过程，接受了输入的参数，也输出参数，改变了变量</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>如果过程没有参数，也必须在过程名后面写上小括号例：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_name ([proc_parameter[,...]]) ……</span><br></pre></td></tr></table></figure><ol start="2"><li>确保参数的名字不等于列的名字，否则在过程体中，参数名被当做列名来处理</li></ol><p><strong>建议：</strong></p><ul><li>输入值使用in参数。</li><li>返回值使用out参数。</li><li>inout参数就尽量的少用。</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><p>局部变量声明一定要放在存储过程体的开始：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> variable_name [,variable_name...] datatype [<span class="keyword">DEFAULT</span> <span class="keyword">value</span>];</span><br></pre></td></tr></table></figure><p>其中，datatype 为 MySQL 的数据类型，如: int, float, date,varchar(length)</p><p>例如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> l_int <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">default</span> <span class="number">4000000</span>;  </span><br><span class="line"><span class="keyword">DECLARE</span> l_numeric <span class="built_in">number</span>(<span class="number">8</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="number">9.95</span>;  </span><br><span class="line"><span class="keyword">DECLARE</span> l_date <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="string">'1999-12-31'</span>;  </span><br><span class="line"><span class="keyword">DECLARE</span> l_datetime datetime <span class="keyword">DEFAULT</span> <span class="string">'1999-12-31 23:59:59'</span>;  </span><br><span class="line"><span class="keyword">DECLARE</span> l_varchar <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">'This will not be padded'</span>;</span><br></pre></td></tr></table></figure><h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> 变量名 = 表达式值 [,variable_name = expression ...]</span><br></pre></td></tr></table></figure><h3 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h3><p>在MySQL客户端使用用户变量:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; SELECT <span class="string">'Hello World'</span> into @x;  </span><br><span class="line">mysql &gt; SELECT @x;  </span><br><span class="line">+-------------+  </span><br><span class="line">|   @x        |  </span><br><span class="line">+-------------+  </span><br><span class="line">| Hello World |  </span><br><span class="line">+-------------+  </span><br><span class="line">mysql &gt; SET @y=<span class="string">'Goodbye Cruel World'</span>;  </span><br><span class="line">mysql &gt; SELECT @y;  </span><br><span class="line">+---------------------+  </span><br><span class="line">|     @y              |  </span><br><span class="line">+---------------------+  </span><br><span class="line">| Goodbye Cruel World |  </span><br><span class="line">+---------------------+  </span><br><span class="line"></span><br><span class="line">mysql &gt; SET @z=1+2+3;  </span><br><span class="line">mysql &gt; SELECT @z;  </span><br><span class="line">+------+  </span><br><span class="line">| @z   |  </span><br><span class="line">+------+  </span><br><span class="line">|  6   |  </span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><p>在存储过程中使用用户变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; CREATE PROCEDURE GreetWorld( ) SELECT CONCAT(@greeting,' World');  </span><br><span class="line">mysql &gt; SET @greeting='Hello';  </span><br><span class="line">mysql &gt; CALL GreetWorld( );  </span><br><span class="line">+<span class="comment">----------------------------+  </span></span><br><span class="line">| CONCAT(@greeting,' World') |  </span><br><span class="line">+<span class="comment">----------------------------+  </span></span><br><span class="line">|  Hello World               |  </span><br><span class="line">+<span class="comment">----------------------------+</span></span><br></pre></td></tr></table></figure><p>在存储过程间传递全局范围的用户变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE PROCEDURE p1()   SET @last_procedure='p1';  </span><br><span class="line">mysql&gt; CREATE PROCEDURE p2() SELECT CONCAT('Last procedure was ',@last_procedure);  </span><br><span class="line">mysql&gt; CALL p1( );  </span><br><span class="line">mysql&gt; CALL p2( );  </span><br><span class="line">+<span class="comment">-----------------------------------------------+  </span></span><br><span class="line">| CONCAT('Last procedure was ',@last_proc       |  </span><br><span class="line">+<span class="comment">-----------------------------------------------+  </span></span><br><span class="line">| Last procedure was p1                         |  </span><br><span class="line"> +<span class="comment">-----------------------------------------------+</span></span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li>1、用户变量名一般以@开头</li><li>2、滥用用户变量会导致程序难以理解及管理</li></ul><h3 id="执行动态sql"><a href="#执行动态sql" class="headerlink" title="执行动态sql"></a>执行动态sql</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> @<span class="keyword">sql</span> = <span class="keyword">sql</span> <span class="comment">--（预处理的sql语句，可以是用concat拼接的语句）</span></span><br><span class="line"><span class="keyword">PREPARE</span> stmt_name <span class="keyword">FROM</span> @<span class="keyword">sql</span>; <span class="comment">--预处理动态sql语句</span></span><br><span class="line"><span class="keyword">EXECUTE</span> stmt_name;  <span class="comment">--执行sql语句</span></span><br><span class="line"><span class="keyword">DEALLOCATE</span> <span class="keyword">PREPARE</span> stmt_name;  <span class="comment">--释放prepare</span></span><br></pre></td></tr></table></figure><h2 id="MySQL存储过程的控制语句"><a href="#MySQL存储过程的控制语句" class="headerlink" title="MySQL存储过程的控制语句"></a>MySQL存储过程的控制语句</h2><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>内部的变量在其作用域范围内享有更高的优先权，当执行到 end。变量时，内部变量消失，此时已经在其作用域外，变量不再可见了，应为在存储过程外再也不能找到这个申明的变量，但是你可以通过 out 参数或者将其值指派给会话变量来保存其值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; DELIMITER //  </span><br><span class="line">mysql &gt; CREATE PROCEDURE proc3()  </span><br><span class="line">     -&gt; begin </span><br><span class="line">     -&gt; <span class="built_in">declare</span> x1 varchar(5) default <span class="string">'outer'</span>;  </span><br><span class="line">     -&gt; begin </span><br><span class="line">     -&gt; <span class="built_in">declare</span> x1 varchar(5) default <span class="string">'inner'</span>;  </span><br><span class="line">      -&gt; select x1;  </span><br><span class="line">      -&gt; end;  </span><br><span class="line">       -&gt; select x1;  </span><br><span class="line">     -&gt; end;  </span><br><span class="line">     -&gt; //  </span><br><span class="line">mysql &gt; DELIMITER ;</span><br></pre></td></tr></table></figure><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p>if-then-else 语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; DELIMITER //  </span><br><span class="line">mysql &gt; CREATE PROCEDURE proc2(IN parameter int)  </span><br><span class="line">     -&gt; begin </span><br><span class="line">     -&gt; <span class="built_in">declare</span> var int;  </span><br><span class="line">     -&gt; <span class="built_in">set</span> var=parameter+1;  </span><br><span class="line">     -&gt; <span class="keyword">if</span> var=0 <span class="keyword">then</span> </span><br><span class="line">     -&gt; insert into t values(17);  </span><br><span class="line">     -&gt; end <span class="keyword">if</span>;  </span><br><span class="line">     -&gt; <span class="keyword">if</span> parameter=0 <span class="keyword">then</span> </span><br><span class="line">     -&gt; update t <span class="built_in">set</span> s1=s1+1;  </span><br><span class="line">     -&gt; <span class="keyword">else</span> </span><br><span class="line">     -&gt; update t <span class="built_in">set</span> s1=s1+2;  </span><br><span class="line">     -&gt; end <span class="keyword">if</span>;  </span><br><span class="line">     -&gt; end;  </span><br><span class="line">     -&gt; //  </span><br><span class="line">mysql &gt; DELIMITER ;</span><br></pre></td></tr></table></figure><p>case语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; DELIMITER //  </span><br><span class="line">mysql &gt; CREATE PROCEDURE proc3 (<span class="keyword">in</span> parameter int)  </span><br><span class="line">     -&gt; begin </span><br><span class="line">     -&gt; <span class="built_in">declare</span> var int;  </span><br><span class="line">     -&gt; <span class="built_in">set</span> var=parameter+1;  </span><br><span class="line">     -&gt; <span class="keyword">case</span> var  </span><br><span class="line">     -&gt; when 0 <span class="keyword">then</span>   </span><br><span class="line">     -&gt; insert into t values(17);  </span><br><span class="line">     -&gt; when 1 <span class="keyword">then</span>   </span><br><span class="line">     -&gt; insert into t values(18);  </span><br><span class="line">     -&gt; <span class="keyword">else</span>   </span><br><span class="line">     -&gt; insert into t values(19);  </span><br><span class="line">     -&gt; end <span class="keyword">case</span>;  </span><br><span class="line">     -&gt; end;  </span><br><span class="line">     -&gt; //  </span><br><span class="line">mysql &gt; DELIMITER ; </span><br><span class="line"><span class="keyword">case</span></span><br><span class="line">    when var=0 <span class="keyword">then</span></span><br><span class="line">        insert into t values(30);</span><br><span class="line">    when var&gt;0 <span class="keyword">then</span></span><br><span class="line">    when var&lt;0 <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">end <span class="keyword">case</span></span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>while ···· end while</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; DELIMITER //  </span><br><span class="line">mysql &gt; CREATE PROCEDURE proc4()  </span><br><span class="line">     -&gt; begin </span><br><span class="line">     -&gt; <span class="built_in">declare</span> var int;  </span><br><span class="line">     -&gt; <span class="built_in">set</span> var=0;  </span><br><span class="line">     -&gt; <span class="keyword">while</span> var&lt;6 <span class="keyword">do</span>  </span><br><span class="line">     -&gt; insert into t values(var);  </span><br><span class="line">     -&gt; <span class="built_in">set</span> var=var+1;  </span><br><span class="line">     -&gt; end <span class="keyword">while</span>;  </span><br><span class="line">     -&gt; end;  </span><br><span class="line">     -&gt; //  </span><br><span class="line">mysql &gt; DELIMITER ;</span><br></pre></td></tr></table></figure><p>repeat···· end repeat</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; DELIMITER //  </span><br><span class="line">mysql &gt; CREATE PROCEDURE proc5 ()  </span><br><span class="line">     -&gt; begin   </span><br><span class="line">     -&gt; <span class="built_in">declare</span> v int;  </span><br><span class="line">     -&gt; <span class="built_in">set</span> v=0;  </span><br><span class="line">     -&gt; repeat  </span><br><span class="line">     -&gt; insert into t values(v);  </span><br><span class="line">     -&gt; <span class="built_in">set</span> v=v+1;  </span><br><span class="line">     -&gt; until v&gt;=5  </span><br><span class="line">     -&gt; end repeat;  </span><br><span class="line">     -&gt; end;  </span><br><span class="line">     -&gt; //  </span><br><span class="line">mysql &gt; DELIMITER ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repeat</span><br><span class="line">    <span class="comment">--循环体</span></span><br><span class="line">until 循环条件  </span><br><span class="line"><span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br></pre></td></tr></table></figure><p>loop ·····endloop</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; DELIMITER //  </span><br><span class="line">mysql &gt; CREATE PROCEDURE proc6 ()  </span><br><span class="line">     -&gt; begin </span><br><span class="line">     -&gt; <span class="built_in">declare</span> v int;  </span><br><span class="line">     -&gt; <span class="built_in">set</span> v=0;  </span><br><span class="line">     -&gt; LOOP_LABLE:loop  </span><br><span class="line">     -&gt; insert into t values(v);  </span><br><span class="line">     -&gt; <span class="built_in">set</span> v=v+1;  </span><br><span class="line">     -&gt; <span class="keyword">if</span> v &gt;=5 <span class="keyword">then</span> </span><br><span class="line">     -&gt; leave LOOP_LABLE;  </span><br><span class="line">     -&gt; end <span class="keyword">if</span>;  </span><br><span class="line">     -&gt; end loop;  </span><br><span class="line">     -&gt; end;  </span><br><span class="line">     -&gt; //  </span><br><span class="line">mysql &gt; DELIMITER ;</span><br></pre></td></tr></table></figure><p>LABLES 标号：</p><p>标号可以用在 begin repeat while 或者 loop 语句前，语句标号只能在合法的语句前面使用。可以跳出循环，使运行指令达到复合语句的最后一步。</p><h3 id="ITERATE迭代"><a href="#ITERATE迭代" class="headerlink" title="ITERATE迭代"></a>ITERATE迭代</h3><p>ITERATE 通过引用复合语句的标号,来从新开始复合语句:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; DELIMITER //  </span><br><span class="line">mysql &gt; CREATE PROCEDURE proc10 ()  </span><br><span class="line">     -&gt; begin </span><br><span class="line">     -&gt; <span class="built_in">declare</span> v int;  </span><br><span class="line">     -&gt; <span class="built_in">set</span> v=0;  </span><br><span class="line">     -&gt; LOOP_LABLE:loop  </span><br><span class="line">     -&gt; <span class="keyword">if</span> v=3 <span class="keyword">then</span>   </span><br><span class="line">     -&gt; <span class="built_in">set</span> v=v+1;  </span><br><span class="line">     -&gt; ITERATE LOOP_LABLE;  </span><br><span class="line">     -&gt; end <span class="keyword">if</span>;  </span><br><span class="line">     -&gt; insert into t values(v);  </span><br><span class="line">     -&gt; <span class="built_in">set</span> v=v+1;  </span><br><span class="line">     -&gt; <span class="keyword">if</span> v&gt;=5 <span class="keyword">then</span> </span><br><span class="line">     -&gt; leave LOOP_LABLE;  </span><br><span class="line">     -&gt; end <span class="keyword">if</span>;  </span><br><span class="line">     -&gt; end loop;  </span><br><span class="line">     -&gt; end;  </span><br><span class="line">     -&gt; //  </span><br><span class="line">mysql &gt; DELIMITER ;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql常用命令</title>
      <link href="/posts/39d2/"/>
      <url>/posts/39d2/</url>
      
        <content type="html"><![CDATA[<h1 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @@<span class="keyword">version</span></span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="查看所有自定义函数"><a href="#查看所有自定义函数" class="headerlink" title="查看所有自定义函数"></a>查看所有自定义函数</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">function</span> <span class="keyword">status</span></span><br></pre></td></tr></table></figure><h1 id="查看所有自定义存储过程"><a href="#查看所有自定义存储过程" class="headerlink" title="查看所有自定义存储过程"></a>查看所有自定义存储过程</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">procedure</span> <span class="keyword">status</span></span><br></pre></td></tr></table></figure><h1 id="显示用户正在运行的线程"><a href="#显示用户正在运行的线程" class="headerlink" title="显示用户正在运行的线程"></a>显示用户正在运行的线程</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">processlist</span></span><br></pre></td></tr></table></figure><h1 id="查询数据库当前设置的最大连接数"><a href="#查询数据库当前设置的最大连接数" class="headerlink" title="查询数据库当前设置的最大连接数"></a>查询数据库当前设置的最大连接数</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%max_connection%'</span>;</span><br></pre></td></tr></table></figure><h1 id="查看最大连接数"><a href="#查看最大连接数" class="headerlink" title="查看最大连接数"></a>查看最大连接数</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Thread%'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/10/91LMwijZVtx4zdS.png" alt="image.png"></p><ul><li><p>Threads_cached ：代表当前此时此刻线程缓存中有多少空闲线程。</p></li><li><p>Threads_connected ：代表当前已建立连接的数量，因为一个连接就需要一个线程，所以也可以看成当前被使用的线程数。</p></li><li><p>Threads_created ：代表从最近一次服务启动，已创建线程的数量。</p></li><li><p>Threads_running ：代表当前激活的（非睡眠状态）线程数。并不是代表正在使用的线程数，有时候连接已建立，但是连接处于sleep状态，这里相对应的线程也是sleep状态。</p></li></ul><h1 id="查询最大连接数"><a href="#查询最大连接数" class="headerlink" title="查询最大连接数"></a>查询最大连接数</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'max_connections'</span>;</span><br></pre></td></tr></table></figure><h1 id="查询响应的连接数"><a href="#查询响应的连接数" class="headerlink" title="查询响应的连接数"></a>查询响应的连接数</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看响应的连接数：max_used_connections / max_connections * 100% （理想值≈ 85%）</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'max_used_connections'</span>;</span><br></pre></td></tr></table></figure><h1 id="查询客户端连接线程缓存数"><a href="#查询客户端连接线程缓存数" class="headerlink" title="查询客户端连接线程缓存数"></a>查询客户端连接线程缓存数</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'thread_cache_size'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java不重启服务动态加载properties文件</title>
      <link href="/posts/dba/"/>
      <url>/posts/dba/</url>
      
        <content type="html"><![CDATA[<p>Java动态读取properties配置文件，不需要重启服务。核心根据<strong>File.lastModified</strong>判断文件是否有变动，重新读取配置文件内容。</p><a id="more"></a><h3 id="PropertiesUtil-java"><a href="#PropertiesUtil-java" class="headerlink" title="PropertiesUtil.java"></a>PropertiesUtil.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.joinhealth.interview.common.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.joinhealth.celina.common.enums.FileTypeEnum;</span><br><span class="line"><span class="keyword">import</span> cn.joinhealth.celina.common.utils.StringUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties prop;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Long lastModified = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HUG_INTERVIEW_ENV = <span class="string">"hug_interview"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_PROPERTIES_PATH = <span class="string">"/cfg/server/server.properties"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String path = System.getenv(HUG_INTERVIEW_ENV);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isBlank(path)) &#123;</span><br><span class="line">                path = System.getProperty(HUG_INTERVIEW_ENV);</span><br><span class="line">            &#125;</span><br><span class="line">            FileInputStream in = <span class="keyword">new</span> FileInputStream(path + SERVER_PROPERTIES_PATH);</span><br><span class="line">            prop.load(in);</span><br><span class="line">            in.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">""</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断配置文件是否改动</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> returnValue ：true:改动过 ，false:没有改动过</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPropertiesModified</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> returnValue = <span class="keyword">false</span>;</span><br><span class="line">        String path = System.getenv(HUG_INTERVIEW_ENV);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(path)) &#123;</span><br><span class="line">            path = System.getProperty(HUG_INTERVIEW_ENV);</span><br><span class="line">        &#125;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path + SERVER_PROPERTIES_PATH);</span><br><span class="line">        <span class="keyword">if</span> (file.lastModified() &gt; lastModified) &#123;</span><br><span class="line">            log.info(<span class="string">"修改server.properties配置文件"</span>);</span><br><span class="line">            lastModified = file.lastModified();</span><br><span class="line">            returnValue = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取配置文件中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPropertiesValue</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prop == <span class="keyword">null</span> || isPropertiesModified()) &#123;</span><br><span class="line">            init();</span><br><span class="line">        &#125;</span><br><span class="line">        String value;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            value = prop.getProperty(key);</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                value = value.trim();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"getperty:"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="java-io-File-lastModified"><a href="#java-io-File-lastModified" class="headerlink" title="java.io.File.lastModified()"></a>java.io.File.lastModified()</h3><p>该方法返回表示此抽象路径名的文件的最后修改时间。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea 中Maven 多线程编译</title>
      <link href="/posts/9c1e/"/>
      <url>/posts/9c1e/</url>
      
        <content type="html"><![CDATA[<p>Maven3.X 里支持了<a href="https://cwiki.apache.org/confluence/display/MAVEN/Parallel+builds+in+Maven+3" target="_blank" rel="noopener">多线程编译</a>, 分析项目的依赖关系图, 并行构建各个模块:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mvn -T 4 clean install      <span class="comment">#指定起4个线程编译   </span></span><br><span class="line">mvn -T 1C clean install     <span class="comment">#每个CPU核心起1个线程</span></span><br><span class="line">mvn -T 1.5C clean install     <span class="comment">#每个CPU核心起1.5个线程</span></span><br><span class="line"></span><br><span class="line">mvn clean package -T 1C -Dmaven.test.skip=<span class="literal">true</span>  -Dmaven.compile.fork=<span class="literal">true</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="到底能提升多少编译的速度"><a href="#到底能提升多少编译的速度" class="headerlink" title="到底能提升多少编译的速度:"></a>到底能提升多少编译的速度:</h3><p>这很大程度上取决于项目的具体模块结构, 但官方的说法是: 速度能普遍提高20 - 50 %.</p><h3 id="那么如何在IDEA里开启这个功能"><a href="#那么如何在IDEA里开启这个功能" class="headerlink" title="那么如何在IDEA里开启这个功能:"></a>那么如何在IDEA里开启这个功能:</h3><p><img src="https://i.loli.net/2019/07/24/5d381a4d47ec370686.jpg" alt="5d381a4d47ec370686"></p><h3 id="什么是Wall"><a href="#什么是Wall" class="headerlink" title="什么是Wall"></a>什么是Wall</h3><p><img src="https://i.loli.net/2019/07/24/5d381c3a9702624222.jpg" alt="5d381c3a9702624222"></p><p>一个项目默认构建的总时间是<code>06:10 min</code>, 我们称之为必须的耗时.</p><p>但是因为你开启了多线程编译, 现在需要<code>03:32 min</code>, 我们称之为实际的耗时.</p><p>为了体现出是并行编译消耗了<code>03:32 min</code>, Maven把实际的耗时叫做Wall Clock.<br>非常形象的告诉你, 虽然项目编译需要六分钟, 但实际上编译完成时, 墙上的钟表才过去了三分钟:)</p>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>钉钉对接流程</title>
      <link href="/posts/e91f/"/>
      <url>/posts/e91f/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      
      
      <categories>
          
          <category> Jh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java调用SSL异常，javax.net.ssl.SSLHandshakeException: No appropriate protocol</title>
      <link href="/posts/f37a/"/>
      <url>/posts/f37a/</url>
      
        <content type="html"><![CDATA[<h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>jdk从1.7升级到1.8后，程序运行报错，错误信息如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">javax.net.ssl.SSLHandshakeException: <span class="function">No appropriate <span class="title">protocol</span> <span class="params">(protocol is disabled or cipher suites are inappropriate)</span></span></span><br><span class="line"><span class="function">at sun.security.ssl.Handshaker.<span class="title">activate</span><span class="params">(Handshaker.java:<span class="number">529</span>)</span></span></span><br><span class="line"><span class="function">at sun.security.ssl.SSLSocketImpl.<span class="title">kickstartHandshake</span><span class="params">(SSLSocketImpl.java:<span class="number">1492</span>)</span></span></span><br><span class="line"><span class="function">at sun.security.ssl.SSLSocketImpl.<span class="title">performInitialHandshake</span><span class="params">(SSLSocketImpl.java:<span class="number">1361</span>)</span></span></span><br><span class="line"><span class="function">at sun.security.ssl.SSLSocketImpl.<span class="title">startHandshake</span><span class="params">(SSLSocketImpl.java:<span class="number">1413</span>)</span></span></span><br><span class="line"><span class="function">at sun.security.ssl.SSLSocketImpl.<span class="title">startHandshake</span><span class="params">(SSLSocketImpl.java:<span class="number">1397</span>)</span></span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>jdk1.8版本导致SSL调用权限上有问题</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>找到jdk安装目录，jre\lib\security\java.security，找到对应的SSLv3，删除掉，重启项目即可。</p><p><img src="https://i.loli.net/2019/07/24/5d37bacb3db1714271.png" alt="5d37bacb3db1714271"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Maven实现一个protobuf</title>
      <link href="/posts/5613/"/>
      <url>/posts/5613/</url>
      
        <content type="html"><![CDATA[<h3 id="Protocol-Buffers"><a href="#Protocol-Buffers" class="headerlink" title="Protocol Buffers"></a>Protocol Buffers</h3><p>Protocal Buffers(简称protobuf)是谷歌的一项技术，用于结构化的数据序列化、反序列化，常用于RPC 系统（Remote Procedure Call Protocol System）和持续数据存储系统。</p><p>其类似于XML生成和解析，但protobuf的效率高于XML，不过protobuf生成的是<strong>字节码</strong>，可读性比XML差，类似的还有json、Java的Serializable等。</p><p>很适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。</p><a id="more"></a><h3 id="Idea安装protobuf插件"><a href="#Idea安装protobuf插件" class="headerlink" title="Idea安装protobuf插件"></a>Idea安装protobuf插件</h3><p><img src="https://i.loli.net/2019/07/18/5d3060475cce377729.png" alt="5d3060475cce377729"></p><h3 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h3><p>pom.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.protobuf&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;protobuf-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;extensions&gt;</span><br><span class="line">            &lt;extension&gt;</span><br><span class="line">                &lt;groupId&gt;kr.motd.maven&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;os-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.4.1.Final&lt;/version&gt;</span><br><span class="line">            &lt;/extension&gt;</span><br><span class="line">        &lt;/extensions&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.xolstice.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;protobuf-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;0.5.0&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;protocArtifact&gt;</span><br><span class="line">                        com.google.protobuf:protoc:3.1.0:exe:$&#123;os.detected.classifier&#125;</span><br><span class="line">                    &lt;/protocArtifact&gt;</span><br><span class="line">                    &lt;pluginId&gt;grpc-java&lt;/pluginId&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;compile&lt;/goal&gt;</span><br><span class="line">                            &lt;goal&gt;compile-custom&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><h3 id="书写proto文件"><a href="#书写proto文件" class="headerlink" title="书写proto文件"></a>书写proto文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line">option java_package = &quot;cn.joinhealth&quot;;</span><br><span class="line">option java_outer_classname = &quot;LicenseModel&quot;;</span><br><span class="line"></span><br><span class="line">message License &#123;</span><br><span class="line">    string permission = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转化成Java文件"><a href="#转化成Java文件" class="headerlink" title="转化成Java文件"></a>转化成Java文件</h3><p><img src="https://i.loli.net/2019/07/18/5d3061277ca3c30279.png" alt="5d3061277ca3c30279"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.joinhealth.interview.web.root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.protobuf.InvalidProtocolBufferException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Test</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jlin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-07-18 19:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvalidProtocolBufferException </span>&#123;</span><br><span class="line">        LicenseModel.License.Builder builder = LicenseModel.License.newBuilder();</span><br><span class="line">        builder.setPermission(<span class="string">"1,2,3,4,5,6,7,8,9,10"</span>);</span><br><span class="line"></span><br><span class="line">        LicenseModel.License license = builder.build();</span><br><span class="line">        System.out.println(<span class="string">"before:"</span> + license);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"===Person Byte:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span> b : license.toByteArray()) &#123;</span><br><span class="line">            System.out.print(b);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"================\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] byteArray = license.toByteArray();</span><br><span class="line">        LicenseModel.License license1 = LicenseModel.License.parseFrom(byteArray);</span><br><span class="line">        System.out.println(<span class="string">"after:"</span> + license1.getPermission());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">before:permission: <span class="string">"1,2,3,4,5,6,7,8,9,10"</span></span><br><span class="line"></span><br><span class="line">===Person Byte:</span><br><span class="line">10204944504451445244534454445544564457444948</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line">after:1,2,3,4,5,6,7,8,9,10</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> protobuf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> protobuf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SonarQube分析Maven</title>
      <link href="/posts/6f11/"/>
      <url>/posts/6f11/</url>
      
        <content type="html"><![CDATA[<h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>setting.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;pluginGroups&gt;</span><br><span class="line">        &lt;pluginGroup&gt;org.sonarsource.scanner.maven&lt;/pluginGroup&gt;</span><br><span class="line">    &lt;/pluginGroups&gt;</span><br><span class="line">    &lt;profiles&gt;</span><br><span class="line">        &lt;profile&gt;</span><br><span class="line">            &lt;id&gt;sonar&lt;/id&gt;</span><br><span class="line">            &lt;activation&gt;</span><br><span class="line">                &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">            &lt;/activation&gt;</span><br><span class="line">            &lt;properties&gt;</span><br><span class="line">                &lt;!-- Optional URL to server. Default value is http://localhost:9000 --&gt;</span><br><span class="line">                &lt;sonar.host.url&gt;</span><br><span class="line">                  http://myserver:9000</span><br><span class="line">                &lt;/sonar.host.url&gt;</span><br><span class="line">            &lt;/properties&gt;</span><br><span class="line">        &lt;/profile&gt;</span><br><span class="line">     &lt;/profiles&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="工程"><a href="#工程" class="headerlink" title="工程"></a>工程</h3><p>pom.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;profiles&gt;</span><br><span class="line">        &lt;profile&gt;</span><br><span class="line">            &lt;id&gt;sonar&lt;/id&gt;</span><br><span class="line">            &lt;activation&gt;</span><br><span class="line">                &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">            &lt;/activation&gt;</span><br><span class="line">            &lt;properties&gt;</span><br><span class="line">                &lt;!-- Optional URL to server. Default value is http://localhost:9000 --&gt;</span><br><span class="line">                &lt;sonar.host.url&gt;</span><br><span class="line">                    http://myserver:9000</span><br><span class="line">                &lt;/sonar.host.url&gt;</span><br><span class="line">            &lt;/properties&gt;</span><br><span class="line">        &lt;/profile&gt;</span><br><span class="line">    &lt;/profiles&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;pluginManagement&gt;</span><br><span class="line">            &lt;plugins&gt;</span><br><span class="line">                &lt;!-- 配置编译插件 --&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;3.8.0&lt;/version&gt;</span><br><span class="line">                    &lt;configuration&gt;</span><br><span class="line">                        &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">                        &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">                    &lt;/configuration&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line">                &lt;!-- 配置分析扫描插件 --&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;groupId&gt;org.sonarsource.scanner.maven&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;sonar-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;3.5.0.1254&lt;/version&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line">            &lt;/plugins&gt;</span><br><span class="line">        &lt;/pluginManagement&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install</span><br><span class="line">mvn sonar:sonar</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SonarQube </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SonarQube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac常用软件</title>
      <link href="/posts/ad3a/"/>
      <url>/posts/ad3a/</url>
      
        <content type="html"><![CDATA[<h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><p>Idea</p><p>Postman</p><p>Kafka Tool</p><p>Navicat</p><p>Charles（抓包）</p><p>Cyberduck（ftp）</p><a id="more"></a><p>iTerm2</p><p>SecureCRT</p><p>JD-GUI（反编译）</p><p>Alfred</p><p>Dash</p><p>rdm（redis）</p><p>tda（线程dump分析）</p><h1 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h1><p>TeamViewer</p><p>Microsoft Remote Desktop Beta</p><p>向日葵</p><h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><p>Chrome</p><h1 id="通讯"><a href="#通讯" class="headerlink" title="通讯"></a>通讯</h1><p>QQ</p><p>微信</p><p>钉钉</p><h1 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h1><p>网易云音乐</p><p>QQ音乐</p><p>Movist</p><h1 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h1><p>Sublime Text</p><p>Mark Text</p><h1 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h1><p>BetterZip</p><p>The Unarchiver</p><p>eZip</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>Focus Matrix</p><p>Hammerspoon</p><p>Flux</p><p>CleanMyMac 3</p><p>ShadowsocksX-NG</p><p>Parallels Desktop（虚拟机）</p><p>Xnip（截图）</p><p>uPic（上传图片）</p><p>Dozer（小图标隐藏）</p><p>LICEcap（录屏）</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Saas随访环境</title>
      <link href="/posts/866e/"/>
      <url>/posts/866e/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      
      
      <categories>
          
          <category> Jh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客加密功能添加</title>
      <link href="/posts/fa33/"/>
      <url>/posts/fa33/</url>
      
        <content type="html"><![CDATA[<h3 id="安装插件-hexo-blog-encrypt"><a href="#安装插件-hexo-blog-encrypt" class="headerlink" title="安装插件 hexo-blog-encrypt"></a>安装插件 <a href="https://github.com/MikeCoder/hexo-blog-encrypt" target="_blank" rel="noopener">hexo-blog-encrypt</a></h3><ul><li><p>在 hexo 根目录里找到<code>package.json</code>。</p></li><li><p>在<code>package.json</code>文件的<code>&quot;dependencies&quot;: {.....</code>里添加  <code>&quot;hexo-blog-encrypt&quot;: &quot;1.1.*&quot;</code></p></li><li><p>记得添加”hexo-blog-encrypt”: “1.1.*”之后加逗号<code>,</code>。<code>dependencies</code>中的每行代码都要有<code>,</code>隔开</p></li><li><p>接着在终端执行  <code>npm install</code>  命令</p></li><li><p>等待该插件自动安装</p></li></ul><p>注意：每个模板后台不同，我的<code>package.json</code>在<code>node_modules</code>文件下。</p><a id="more"></a><h3 id="启动插件"><a href="#启动插件" class="headerlink" title="启动插件"></a>启动插件</h3><ul><li>在根目录的<code>_config.yml</code>中启用该插件:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#Security</span><br><span class="line">encrypt: </span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><ul><li>然后在你文章的头部添加上对应的字段，如 password, abstract, message</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">title: 瑞士旅行准备</span><br><span class="line">date: 2019-07-11 20:45:38</span><br><span class="line">tags:</span><br><span class="line"> - Travel</span><br><span class="line">categories:</span><br><span class="line"> - Travel</span><br><span class="line">password: 123456</span><br><span class="line">abstract: Welcome to my blog, enter password to read.</span><br><span class="line">message: Welcome to my blog, enter password to read.</span><br></pre></td></tr></table></figure><ul><li><p>password: 是该博客加密使用的密码</p></li><li><p>abstract: 是该博客的摘要，会显示在博客的列表页</p></li><li><p>message: 这个是博客查看时，密码输入框上面的描述性文字</p></li></ul><p>其他，如对 TOC 进行加密、修改加密模板都可以在  <a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="noopener">官方ReadMe.zh.md</a>中找到。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot配置https访问</title>
      <link href="/posts/a6d8/"/>
      <url>/posts/a6d8/</url>
      
        <content type="html"><![CDATA[<h3 id="获取ssl证书"><a href="#获取ssl证书" class="headerlink" title="获取ssl证书"></a>获取ssl证书</h3><p>方式：</p><ul><li><p>通过keytool生成</p></li><li><p>通过证书授权机构购买</p></li></ul><a id="more"></a><p><img src="https://i.loli.net/2019/07/12/5d2828391650747699.png" alt="5d2828391650747699"></p><h3 id="https相关配置"><a href="#https相关配置" class="headerlink" title="https相关配置"></a>https相关配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8443</span><br><span class="line">  httpport: 8080</span><br><span class="line">  ssl:</span><br><span class="line">    key-store: classpath:keystore.p12</span><br><span class="line">    key-password: 123456</span><br><span class="line">    key-store-password: 123456</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.linjian.https;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Connector;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.SecurityCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.SecurityConstraint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.server.ServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpsApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    Integer httpsPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.httpport&#125;"</span>)</span><br><span class="line">    Integer httpPort;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HttpsApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletWebServerFactory <span class="title">servletContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TomcatServletWebServerFactory tomcat = <span class="keyword">new</span> TomcatServletWebServerFactory() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">                SecurityConstraint securityConstraint = <span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">                securityConstraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>);</span><br><span class="line">                SecurityCollection collection = <span class="keyword">new</span> SecurityCollection();</span><br><span class="line">                collection.addPattern(<span class="string">"/*"</span>);</span><br><span class="line">                securityConstraint.addCollection(collection);</span><br><span class="line">                context.addConstraint(securityConstraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        tomcat.addAdditionalTomcatConnectors(initiateHttpConnector());</span><br><span class="line">        <span class="keyword">return</span> tomcat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Connector <span class="title">initiateHttpConnector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connector connector = <span class="keyword">new</span> Connector(<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>);</span><br><span class="line">        connector.setScheme(<span class="string">"http"</span>);</span><br><span class="line">        connector.setPort(httpPort);</span><br><span class="line">        connector.setSecure(<span class="keyword">false</span>);</span><br><span class="line">        connector.setRedirectPort(httpsPort);</span><br><span class="line">        <span class="keyword">return</span> connector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pom.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;tomcat-embed-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;9.0.19&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞士旅行准备</title>
      <link href="/posts/c2bd/"/>
      <url>/posts/c2bd/</url>
      
        <content type="html"><![CDATA[<h3 id="物料"><a href="#物料" class="headerlink" title="物料"></a>物料</h3><ul><li style="list-style: none"><input type="checkbox"> 雨伞</li><li style="list-style: none"><input type="checkbox"> 高倍数防晒霜</li><li style="list-style: none"><input type="checkbox" checked> 转换插头</li><li style="list-style: none"><input type="checkbox" checked> 通讯（电话卡） 227</li><li style="list-style: none"><input type="checkbox" checked> Swiss Pass 5318</li><li style="list-style: none"><input type="checkbox"> 牙膏/牙刷/毛巾</li><li style="list-style: none"><input type="checkbox"> 登山鞋/冲锋衣/登山杖</li></ul><h3 id="中英文对照"><a href="#中英文对照" class="headerlink" title="中英文对照"></a>中英文对照</h3><table><thead><tr><th>中文</th><th>英文</th></tr></thead><tbody><tr><td>苏黎世</td><td>Zurich</td></tr><tr><td>卢塞恩</td><td>Lucerne</td></tr><tr><td>格林德瓦</td><td>Grindelwald</td></tr><tr><td>布里恩茨</td><td>Brienz</td></tr><tr><td>龙疆</td><td>Lungern</td></tr><tr><td>因特拉肯</td><td>Interlaken</td></tr><tr><td>施皮茨</td><td>Spiez</td></tr><tr><td>文根</td><td>Wengen</td></tr><tr><td>米伦</td><td>Murren</td></tr><tr><td>蒙特勒</td><td>Montreux</td></tr><tr><td>尼永</td><td>Nyon</td></tr><tr><td>采尔马特</td><td>Zermatt</td></tr><tr><td>门利兴</td><td>Mannlichen</td></tr><tr><td>小沙伊德克</td><td>Kleine Scheidegg</td></tr><tr><td>劳特布伦嫩</td><td>Lauterbrunnen</td></tr><tr><td>图恩</td><td>Thun</td></tr><tr><td>沃韦</td><td>Vevey</td></tr><tr><td>韦吉斯</td><td>Weggis</td></tr><tr><td>菲斯特</td><td>First</td></tr></tbody></table><h3 id="交通"><a href="#交通" class="headerlink" title="交通"></a>交通</h3>]]></content>
      
      
      <categories>
          
          <category> Travel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Travel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea中sonar插件使用</title>
      <link href="/posts/2610/"/>
      <url>/posts/2610/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在Idea Plugins中搜索sonar</p><p>选择<strong>SonarLint</strong>进行install</p><a id="more"></a><p><img src="https://i.loli.net/2019/07/10/5d258f76a1ae548618.png" alt="5d258f76a1ae548618"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li><p>配置General Settings</p><ul><li><p>添加SonarQube Servers，输入URL，User,Password这些</p><p><img src="https://i.loli.net/2019/07/10/5d2536c9ad41879689.png" alt="5d2536c9ad41879689"></p></li></ul></li><li><p>配置Project Settings</p><ul><li><p>绑定server，它会提醒你要update binding<em>在general settings中</em></p></li><li><p>选中在sonar服务上已经存在的project，事实上本地的一切代码都能在Issues窗口预览到规则下的改动</p><p><img src="https://i.loli.net/2019/07/10/5d25371921f3826192.png" alt="5d25371921f3826192"></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把Tomcat的http改为https的步骤方法</title>
      <link href="/posts/6cc2/"/>
      <url>/posts/6cc2/</url>
      
        <content type="html"><![CDATA[<h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -<span class="built_in">alias</span> tomcat -keyalg RSA -keystore D:\\a.keystore</span><br></pre></td></tr></table></figure><p>按步骤输入相关信息</p><a id="more"></a><h3 id="修改tomcat相关配置"><a href="#修改tomcat相关配置" class="headerlink" title="修改tomcat相关配置"></a>修改tomcat相关配置</h3><h5 id="conf-server-xml"><a href="#conf-server-xml" class="headerlink" title="conf/server.xml"></a>conf/server.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot; SSLEnabled=&quot;true&quot;  </span><br><span class="line">              maxThreads=&quot;150&quot; scheme=&quot;https&quot; secure=&quot;true&quot;  </span><br><span class="line">              clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot;   </span><br><span class="line">       keystoreFile=&quot;D:\a.keystore&quot;  </span><br><span class="line">       keystorePass=&quot;123456&quot; /&gt;</span><br></pre></td></tr></table></figure><h5 id="conf-web-xml"><a href="#conf-web-xml" class="headerlink" title="conf/web.xml"></a>conf/web.xml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;security-constraint&gt;    </span><br><span class="line">    &lt;web-resource-collection &gt;    </span><br><span class="line">        &lt;web-resource-name&gt;SSL&lt;/web-resource-name&gt;    </span><br><span class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;    </span><br><span class="line">    &lt;/web-resource-collection&gt;    </span><br><span class="line">    &lt;user-data-constraint&gt;    </span><br><span class="line">        &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;    </span><br><span class="line">    &lt;/user-data-constraint&gt;    </span><br><span class="line">&lt;/security-constraint&gt;</span><br></pre></td></tr></table></figure><p>### </p>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea中Java文件太长导致无法识别</title>
      <link href="/posts/1e54/"/>
      <url>/posts/1e54/</url>
      
        <content type="html"><![CDATA[<p>只需要修改配置文件help–&gt;Edit Custom Properties</p><p>增加配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idea.max.intellisense.filesize=9999</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="https://i.loli.net/2019/06/26/5d137ad82308967914.png" alt="5d137ad82308967914"></p>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea修改内存</title>
      <link href="/posts/431f/"/>
      <url>/posts/431f/</url>
      
        <content type="html"><![CDATA[<h3 id="Mac-Idea修改内存"><a href="#Mac-Idea修改内存" class="headerlink" title="Mac Idea修改内存"></a>Mac Idea修改内存</h3><p>配置文件路径：</p><p>/Users/linjian/Library/Preferences/IntelliJIdea2019.1/idea.vmoptions</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-Xms1024m</span><br><span class="line">-Xmx2048m</span><br><span class="line">-XX:ReservedCodeCacheSize=1024m</span><br><span class="line">-XX:+UseCompressedOops</span><br><span class="line">-Dfile.encoding=UTF-8</span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB=50</span><br><span class="line">-ea</span><br><span class="line">-Dsun.io.useCanonCaches=false</span><br><span class="line">-Djava.net.preferIPv4Stack=true</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:-OmitStackTraceInFastThrow</span><br><span class="line">-Xverify:none</span><br><span class="line"></span><br><span class="line">-XX:ErrorFile=$USER_HOME/java_error_in_idea_%p.log</span><br><span class="line">-XX:HeapDumpPath=$USER_HOME/java_error_in_idea.hprof</span><br><span class="line">-javaagent:/Applications/IntelliJ IDEA.app/Contents/bin/JetbrainsCrack.jar</span><br></pre></td></tr></table></figure><h3 id="Idea内存显示"><a href="#Idea内存显示" class="headerlink" title="Idea内存显示"></a>Idea内存显示</h3><p><img src="https://i.loli.net/2019/06/20/5d0b0160f352f54398.png" alt="5d0b0160f352f54398"></p><p><img src="https://i.loli.net/2019/06/20/5d0b2964d7a3523201.png" alt="5d0b2964d7a3523201"></p>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lombok</title>
      <link href="/posts/680b/"/>
      <url>/posts/680b/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Lombok </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lombok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>签证准备</title>
      <link href="/posts/7bfd/"/>
      <url>/posts/7bfd/</url>
      
        <content type="html"><![CDATA[<ul><li><p>[x] 签证申请表复印件</p></li><li><p>[x] 护照（原件和复印件）</p></li><li><p>[x] 2寸免冠近照（2张）</p></li><li><p>[x] 医疗保险（原件和复印件）</p></li><li><p>[x] 往返机票（复印件）</p></li><li><p>[x] 住宿证明（复印件）</p></li><li><p>[ ] 详细的行程单（复印件）</p></li><li><p>[ ] 近3个月银行卡流水</p></li><li><p>[x] 户口本（复印件）</p></li><li><p>[x] 工作单位证明</p></li><li><p>[x] 公司营业执照盖章（复印件）</p></li></ul><p><a href="http://www.vfsglobal.ch/switzerland/china/" target="_blank" rel="noopener">http://www.vfsglobal.ch/switzerland/china/</a></p><p>KMSW3230503404</p>]]></content>
      
      
      <categories>
          
          <category> Travel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Travel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo分类标签中关于大小写的bug</title>
      <link href="/posts/3077/"/>
      <url>/posts/3077/</url>
      
        <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当我的分类标签写的是Scrapy时，打开我的博客找到Scrapy标签，点击Scrapy却出现404页面。 当我把标签改为scrapy小写，再发布到网上，点击scrapy就不会出现404问题。 后来发现原来是git标签生成时忽略了大写，生成的实际标签为scrapy。 于是我来到我的Github中，找到Gladysgong.github.io/categories/爬虫/这个目录，发现实际生成的也是scrapy，所以 原因就在这里了。</span><br></pre></td></tr></table></figure><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">修改文件：</span><br><span class="line"> cd blog/.deploy_git</span><br><span class="line"> vi .git/config</span><br><span class="line"> 将ignorecase=true改为ignorecase=false</span><br><span class="line">删除Gladysgong.github.io中的文件并提交：</span><br><span class="line"> git rm -rm *</span><br><span class="line"> git commit -m &quot;clean all files&quot;</span><br><span class="line"> git push</span><br><span class="line">Hexo再次生成及部署：</span><br><span class="line"> cd ..</span><br><span class="line"> hexo clean</span><br><span class="line"> hexo g</span><br><span class="line"> hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试--基础篇</title>
      <link href="/posts/bdc1/"/>
      <url>/posts/bdc1/</url>
      
        <content type="html"><![CDATA[<h3 id="抽象和封装的不同点"><a href="#抽象和封装的不同点" class="headerlink" title="抽象和封装的不同点"></a>抽象和封装的不同点</h3><p>抽象和封装是互补的概念。一方面，抽象关注对象的行为。另一方面，封装关注对象行为的细节。一般是通过隐藏对象内部状态信息做到封装，因此，封装可以看成是用来提供抽象的一种策略。</p><a id="more"></a><h3 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h3><p>重载： 发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同，发生在编译时。</p><p>重写： 发生在父子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类；如果父类方法访问修饰符为private则子类就不能重写该方法。</p><h3 id="字符型常量和字符串常量的区别"><a href="#字符型常量和字符串常量的区别" class="headerlink" title="字符型常量和字符串常量的区别"></a>字符型常量和字符串常量的区别</h3><p>字符常量是单引号引起的一个字符 字符串常量是双引号引起的若干个字符字符常量相当于一个整形值(ASCII值),可以参加表达式运算 字符串常量代表一个地址值(该字符串在内存中存放位置)字符常量只占一个字节 字符串常量占若干个字节(至少一个字符结束标志)4.成员变量与局部变量的区别有那些？</p><p>从语法形式上，看成员变量是属于类的，而局部变量是在方法中定义的变量或是方法的参数；成员变量可以被public,private,static等修饰符所修饰，而局部变量不能被访问控制修饰符及static所修饰；但是，成员变量和局部变量都能被final所修饰；从变量在内存中的存储方式来看，成员变量是对象的一部分，而对象存在于堆内存，局部变量存在于栈内存从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。成员变量如果没有被赋初值，则会自动以类型的默认值而赋值（一种情况例外被final修饰但没有被static修饰的成员变量必须显示地赋值）；而局部变量则不会自动赋值。5.讲讲对static的理解？Java中是否可以覆盖一个private或者是static的方法？</p><p>如果一个类的变量或者方法前面有static修饰，那么表明这个方法或者变量属于这个类，也就是说可以在不创建对象的情况下直接使用</p><p>当父类的方法被private修饰时，表明该方法为父类私有，对其他任何类都是不可见的，因此如果子类定了一个与父类一样的方法，这对于子类来说相当于是一个新的私有方法，且如果要进行向上转型，然后去调用该“覆盖方法”，会产生编译错误</p><p>static方法时编译时静态绑定的，属于类，而覆盖是运行时动态绑定的(动态绑定的多态),因此不能覆盖.</p><h3 id="是否可以在static环境中访问非static变量？"><a href="#是否可以在static环境中访问非static变量？" class="headerlink" title="是否可以在static环境中访问非static变量？"></a>是否可以在static环境中访问非static变量？</h3><p>static变量在Java中是属于类的，它在所有的实例中的值是一样的。</p><p>当类被Java虚拟机载入的时候，会对static变量进行初始化。</p><p>如果代码尝试不用实例来访问非static的变量，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联上。</p><h3 id="Java支持的基本数据类型有哪些？"><a href="#Java支持的基本数据类型有哪些？" class="headerlink" title="Java支持的基本数据类型有哪些？"></a>Java支持的基本数据类型有哪些？</h3><p>java支持的基本数据类型有以下9种:byte,shot,int,long,float,double,char,boolean,void.</p><h3 id="怎么理解JAVA的自动拆箱装箱？"><a href="#怎么理解JAVA的自动拆箱装箱？" class="headerlink" title="怎么理解JAVA的自动拆箱装箱？"></a>怎么理解JAVA的自动拆箱装箱？</h3><p>所谓自动装箱就是将基本数据类型自动的转换为对应的对象包装类型，而拆箱就是将对象包装类型转换为基本数据类型。</p><p>java中的自动拆装箱通常发生在变量赋值的过程中，如：把int转化成Integer，double转化成double就是自动装箱，反之就是自动拆箱</p><p>在实际中，应该注意自动拆装箱，因为有时可能因为java自动装箱机制，而导致创建了许多对象，对于内存小的平台会造成压力。</p><h3 id="重写和重载是什么"><a href="#重写和重载是什么" class="headerlink" title="重写和重载是什么?"></a>重写和重载是什么?</h3><p>重写：发生在子类与父类之间，表示子类中的方法可以与父类中的某个方法的名称和参数完全相同，通过子类创建的实例对象调用这个方法时，将调用子类中的定义方法，这相当于把父类中定义的那个完全相同的方法给覆盖了，这也是面向对象编程的多态性的一种表现。重载：是指在一个类中，可以有多个相同名称的方法，但是他们的参数列表的个数或类型不同，当调用该方法时，根据传递的参数类型调用对应参数列表的方法。当参数列表相同但返回值不同时，将会出现编译错误，这并不是重载，因为jvm无法根据返回值类型来判断应该调用哪个方法。10.Java支持多继承么？如果不支持，如何实现?</p><p>不支持，Java不支持多继承。每个类都只能继承一个类，但是可以实现多个接口。</p><p>在java中是单继承的，也就是说一个类只能继承一个父类。</p><p>java中实现多继承有两种方式,一是接口，而是内部类.</p><h3 id="什么是值传递和引用传递？Java中是值传递还是引用传递，还是都有"><a href="#什么是值传递和引用传递？Java中是值传递还是引用传递，还是都有" class="headerlink" title="什么是值传递和引用传递？Java中是值传递还是引用传递，还是都有?"></a>什么是值传递和引用传递？Java中是值传递还是引用传递，还是都有?</h3><p>值传递：就是在方法调用的时候，实参是将自己的一份拷贝赋给形参，在方法内，对该参数值的修改不影响原来实参。引用传递：是在方法调用的时候，实参将自己的地址传递给形参，此时方法内对该参数值的改变，就是对该实参的实际操作。在java中只有一种传递方式，那就是值传递.可能比较让人迷惑的就是java中的对象传递时，对形参的改变依然会影响到该对象的内容。</p><h3 id="接口和抽象类的区别是什么"><a href="#接口和抽象类的区别是什么" class="headerlink" title="接口和抽象类的区别是什么?"></a>接口和抽象类的区别是什么?</h3><p>接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。类可以实现很多个接口，但是只能继承一个抽象类类如果要实现一个接口，它必须要实现接口声明的所有方法。但是，类可以不实现抽象类声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象的。抽象类可以在不提供接口方法实现的情况下实现接口。Java 接口中声明的变量默认都是 final 的。抽象类可以包含非 final 的变量。Java 接口中的成员函数默认是 public 的。抽象类的成员函数可以是 private，protected 或者是 public 。接口是绝对抽象的，不可以被实例化(java 8已支持在接口中实现默认的方法)。抽象类也不可以被实例化，但是，如果它包含 main 方法的话是可以被调用的。13.构造器（constructor）是否可被重写（override）?</p><p>构造方法是不能被子类重写的，但是构造方法可以重载</p><p>简单的讲，就是说一个类可以有多个构造方法。</p><h3 id="String-StringBuffer-StringBuilder的区别"><a href="#String-StringBuffer-StringBuilder的区别" class="headerlink" title="String, StringBuffer StringBuilder的区别"></a>String, StringBuffer StringBuilder的区别</h3><p>String 的长度是不可变的；StringBuffer的长度是可变的，线程安全；如果对一个字符串要经常改变的话，就一定不要用String,否则会创建许多无用的对象出来.</p><h3 id="HashMap的工作原理是什么"><a href="#HashMap的工作原理是什么" class="headerlink" title="HashMap的工作原理是什么?"></a>HashMap的工作原理是什么?</h3><p>HashMap内部是通过一个数组实现的，只是这个数组比较特殊，数组里存储的元素是一个Entry实体(在JAVA8中为Node)，这个Entry实体主要包含key、value以及一个指向自身的next指针。</p><p>HashMap是基于hashing实现的，当进行put操作时，根据传递的key值得到它的hashcode，然后再用这个hashcode与数组的长度进行模运算，得到一个int值，就是Entry要存储在数组的位置（下标）；当通过get方法获取指定key的值时，会根据这个key算出它的hash值（数组下标），根据这个hash值获取数组下标对应的Entry，然后判断Entry里的key，hash值或者通过equals()比较是否与要查找的相同，如果相同，返回value，否则的话，遍历该链表（有可能就只有一个Entry，此时直接返回null），直到找到为止，否则返回null。</p><p>HashMap之所以在每个数组元素存储的是一个链表，是为了解决hash冲突问题，当两个对象的hash值相等时，那么一个位置肯定是放不下两个值的，于是hashmap采用链表来解决这种冲突，hash值相等的两个元素会形成一个链表。</p><h3 id="HashMap与Hashtable的区别是什么"><a href="#HashMap与Hashtable的区别是什么" class="headerlink" title="HashMap与Hashtable的区别是什么?"></a>HashMap与Hashtable的区别是什么?</h3><p>Hashtable基于Dictionary类，而HashMap是基于AbstractMap。Dictionary是任何可将键映射到相应值的类的抽象父类，而AbstractMap是基于Map接口的实现，它以最大限度地减少实现此接口所需的工作。HashMap和Hashtable都实现了Map接口，Hashtable基于Dictionary类，而HashMap是基于AbstractMap。Dictionary是任何可将键映射到相应值的类的抽象父类，而AbstractMap是基于Map接口的实现，它以最大限度地减少实现此接口所需的工作。HashMap允许键和值是null，而Hashtable不允许键或者值是null。Hashtable是同步(线程安全)的，而HashMap不是同步(非线程安全)。因此，HashMap更适合于单线程环境，而Hashtable适合于多线程环境。HashMap提供了可供应用迭代的键的集合，因此，HashMap是快速失败的。另一方面，Hashtable提供了对键的列举(Enumeration)。</p><h3 id="CorrentHashMap的工作原理"><a href="#CorrentHashMap的工作原理" class="headerlink" title="CorrentHashMap的工作原理"></a>CorrentHashMap的工作原理</h3><p>ConcurrenHashMap说是HashMap的升级版</p><p>ConcurrentHashMap是线程安全的，但是与Hashtable相比，实现线程安全的方式不同。</p><p>Hashtable是通过对hash表结构进行锁定，是阻塞式的，当一个线程占有这个锁时，其他线程必须阻塞等待其释放锁。</p><p>ConcurrentHashMap是采用分离锁的方式，它并没有对整个hash表进行锁定，而是局部锁定，也就是说当一个线程占有这个局部锁时，不影响其他线程对hash表其他地方的访问。</p><p>ConcurrentHashMap内部有一个Segment&lt;K,V&gt;数组,该Segment对象可以充当锁。Segment对象内部有一个HashEntry&lt;K,V&gt;数组，于是每个Segment可以守护若干个桶(HashEntry),每个桶又有可能是一个HashEntry连接起来的链表，存储发生碰撞的元素。</p><p>每个ConcurrentHashMap在默认并发级下会创建包含16个Segment对象的数组，每个数组有若干个桶，当进行put方法时，通过hash方法对key进行计算，得到hash值，找到对应的segment，然后对该segment进行加锁，然后调用segment的put方法进行存储操作，此时其他线程就不能访问当前的segment，但可以访问其他的segment对象，不会发生阻塞等待。</p><p>在Java8中，ConcurrentHashMap不再使用Segment分离锁，而是采用一种乐观锁CAS算法来实现同步问题，但其底层还是“数组+链表-&gt;红黑树”的实现。</p><h3 id="Array和ArrayList有什么区别？"><a href="#Array和ArrayList有什么区别？" class="headerlink" title="Array和ArrayList有什么区别？"></a>Array和ArrayList有什么区别？</h3><p>Array可以容纳基本类型和对象，而ArrayList只能容纳对象。Array是指定大小的，而ArrayList大小是固定的Array可以包含基本类型和对象类型，ArrayList只能包含对象类型。Array大小是固定的，ArrayList的大小是动态变化的。19.ArrayList和LinkedList有什么区别？</p><p>ArrayList和LinkedList都实现了List接口ArrayList是基于数组实现，它的底层是数组。它可以以O(1)时间复杂度对元素进行随机访问。LinkedList是基于链表实现，每一个元素都和它的前一个和后一个元素链接在一起，在这种情况下，查找某个元素的时间复杂度是O(n)。ArrayList在查找时速度快LinkedList的插入，添加，删除操作速度更快，因为当元素被添加到集合任意位置的时候，不需要像数组那样重新计算大小或者是更新索引。LinkedList比ArrayList更占内存，因为LinkedList为每一个节点存储了两个引用，一个指向前一个元素，一个指向下一个元素。</p><h3 id="哪些集合类提供对元素的随机访问？"><a href="#哪些集合类提供对元素的随机访问？" class="headerlink" title="哪些集合类提供对元素的随机访问？"></a>哪些集合类提供对元素的随机访问？</h3><p>ArrayList、HashMap、TreeMap和HashTable类提供对元素的随机访问。</p><h3 id="HashSet的底层实现是什么"><a href="#HashSet的底层实现是什么" class="headerlink" title="HashSet的底层实现是什么?"></a>HashSet的底层实现是什么?</h3><p>HashSet的实现是依赖于HashMap的，HashSet的值都是存储在HashMap中的。</p><p>在HashSet的构造法中会初始化一个HashMap对象，HashSet不允许值重复。</p><p>因此，HashSet的值是作为HashMap的key存储在HashMap中的，当存储的值已经存在时返回false。</p><h3 id="Comparable和Comparator接口的区别。"><a href="#Comparable和Comparator接口的区别。" class="headerlink" title="Comparable和Comparator接口的区别。"></a>Comparable和Comparator接口的区别。</h3><p>Comparable接口只包含一个compareTo()方法。这个方法可以个给两个对象排序。具体来说，它返回负数，0，正数来表明输入对象小于，等于，大于已经存在的对象。Comparator接口包含compare()和equals()两个方法。compare()方法用来给两个输入参数排序，返回负数，0，正数表明第一个参数是小于，等于，大于第二个参数。</p><p>equals()方法需要一个对象作为参数，它用来决定输入参数是否和comparator相等。只有当输入参数也是一个comparator并且输入参数和当前comparator的排序结果是相同的时候，这个方法才返回true。</p><h3 id="HashSet和TreeSet有什么区别？"><a href="#HashSet和TreeSet有什么区别？" class="headerlink" title="HashSet和TreeSet有什么区别？"></a>HashSet和TreeSet有什么区别？</h3><p>HashSet是由一个hash表来实现的，因此，它的元素是无序的。add()，remove()，contains()方法的时间复杂度是O(1)。TreeSet是由一个树形的结构来实现的，它里面的元素是有序的。因此，add()，remove()，contains()方法的时间复杂度是O(logn)。</p><h3 id="Java中-与equals的区别"><a href="#Java中-与equals的区别" class="headerlink" title="Java中==与equals的区别"></a>Java中==与equals的区别</h3><p>“==” 的作用是判断两个对象的地址是不是相等。即判断两个对象是不是同一个对象。(基本数据类型==比较的是值，引用数据类型==比较的是内存地址)equals() : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：类没有覆盖equals()方法。则通过equals()比较该类的两个对象时，等价于通过“==”比较这两个对象。类覆盖了equals()方法。一般，我们都覆盖equals()方法来两个对象的内容相等；若它们的内容相等，则返回true(即，认为这两个对象相等)。</p><h3 id="你重写过-hashcode-和-equals-么，为什么重写equals时必须重写hashCode方法？"><a href="#你重写过-hashcode-和-equals-么，为什么重写equals时必须重写hashCode方法？" class="headerlink" title="你重写过 hashcode 和 equals 么，为什么重写equals时必须重写hashCode方法？"></a>你重写过 hashcode 和 equals 么，为什么重写equals时必须重写hashCode方法？</h3><p>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。如果两个对象相等，则hashcode一定也是相同的如果两个对象相等,对两个对象分别调用equals方法都返回true如果两个对象有相同的hashcode值，它们也不一定是相等的因此，equals方法被覆盖过，则hashCode方法也必须被覆盖</p><p>hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</p><h3 id="Java的四种引用，强弱软虚，用到的场景"><a href="#Java的四种引用，强弱软虚，用到的场景" class="headerlink" title="Java的四种引用，强弱软虚，用到的场景"></a>Java的四种引用，强弱软虚，用到的场景</h3><p>强引用：如果一个对象具有强引用，它就不会被垃圾回收器回收。即使当前内存空间不足，JVM也不会回收它，而是抛出 OutOfMemoryError 错误，使程序异常终止。如果想中断强引用和某个对象之间的关联，可以显式地将引用赋值为null，这样一来的话，JVM在合适的时间就会回收该对象软引用：在使用软引用时，如果内存的空间足够，软引用就能继续被使用，而不会被垃圾回收器回收，只有在内存不足时，软引用才会被垃圾回收器回收。弱引用：具有弱引用的对象拥有的生命周期更短暂。因为当 JVM 进行垃圾回收，一旦发现弱引用对象，无论当前内存空间是否充足，都会将弱引用回收。不过由于垃圾回收器是一个优先级较低的线程，所以并不一定能迅速发现弱引用对象虚引用：顾名思义，就是形同虚设，如果一个对象仅持有虚引用，那么它相当于没有引用，在任何时候都可能被垃圾回收器回收。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Innotop</title>
      <link href="/posts/9948/"/>
      <url>/posts/9948/</url>
      
        <content type="html"><![CDATA[<h3 id="mac安装"><a href="#mac安装" class="headerlink" title="mac安装"></a>mac安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install innotop</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><p>编辑配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bash_profile</span><br></pre></td></tr></table></figure><p>添加配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LDFLAGS=<span class="string">"-L/usr/local/opt/mysql-client/lib"</span></span><br><span class="line"><span class="built_in">export</span> CPPFLAGS=<span class="string">"-I/usr/local/opt/mysql-client/include"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/usr/local/opt/mysql-client/bin:<span class="variable">$PATH</span>"</span></span><br></pre></td></tr></table></figure><p>使配置文件生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql优化配置</title>
      <link href="/posts/c1b1/"/>
      <url>/posts/c1b1/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port = 3306  </span><br><span class="line">socket = /var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">#这个配置段设置启动MySQL服务的条件；在这种情况下，no-auto-rehash确保这个服务启动得比较快。</span><br><span class="line">no-auto-rehash</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">user = mysql  </span><br><span class="line">port = 3306  </span><br><span class="line">socket = /var/lib/mysql/mysql.sock  </span><br><span class="line">basedir = /usr/local/mysql  </span><br><span class="line">datadir = /data/mysql/data/  </span><br><span class="line">open_files_limit = 10240</span><br><span class="line"></span><br><span class="line">back_log = 600  </span><br><span class="line">#在MYSQL暂时停止响应新请求之前，短时间内的多少个请求可以被存在堆栈中。如果系统在短时间内有很多连接，则需要增大该参数的值，该参数值指定到来的TCP/IP连接的监听队列的大小。默认值80。</span><br><span class="line"></span><br><span class="line">max_connections = 3000  </span><br><span class="line">#MySQL允许最大的进程连接数，如果经常出现Too Many Connections的错误提示，则需要增大此值。默认151</span><br><span class="line"></span><br><span class="line">max_connect_errors = 6000  </span><br><span class="line">#设置每个主机的连接请求异常中断的最大次数，当超过该次数，MYSQL服务器将禁止host的连接请求，直到mysql服务器重启或通过flush hosts命令清空此host的相关信息。默认100</span><br><span class="line"></span><br><span class="line">external-locking = FALSE  </span><br><span class="line">#使用–skip-external-locking MySQL选项以避免外部锁定。该选项默认开启</span><br><span class="line"></span><br><span class="line">max_allowed_packet = 32M  </span><br><span class="line">#设置在网络传输中一次消息传输量的最大值。系统默认值 为4MB，最大值是1GB，必须设置1024的倍数。</span><br><span class="line"></span><br><span class="line">#sort_buffer_size = 2M  </span><br><span class="line"># Sort_Buffer_Size 是一个connection级参数，在每个connection（session）第一次需要使用这个buffer的时候，一次性分配设置的内存。</span><br><span class="line">#Sort_Buffer_Size 并不是越大越好，由于是connection级的参数，过大的设置+高并发可能会耗尽系统内存资源。例如：500个连接将会消耗 500*sort_buffer_size(8M)=4G内存</span><br><span class="line">#Sort_Buffer_Size 超过2KB的时候，就会使用mmap() 而不是 malloc() 来进行内存分配，导致效率降低。 系统默认2M，使用默认值即可</span><br><span class="line"></span><br><span class="line">#join_buffer_size = 2M  </span><br><span class="line">#用于表间关联缓存的大小，和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享。系统默认2M，使用默认值即可</span><br><span class="line"></span><br><span class="line">thread_cache_size = 300  </span><br><span class="line"># 默认8</span><br><span class="line"># 服务器线程缓存这个值表示可以重新利用保存在缓存中线程的数量,当断开连接时如果缓存中还有空间,那么客户端的线程将被放到缓存中,如果线程重新被请求，那么请求将从缓存中读取,如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，增加这个值可以改善系统性能.通过比较 Connections 和 Threads_created 状态的变量，可以看到这个变量的作用。设置规则如下：1GB 内存配置为8，2GB配置为16，3GB配置为32，4GB或更高内存，可配置更大。</span><br><span class="line"></span><br><span class="line">#thread_concurrency = 8  </span><br><span class="line">#系统默认为10，使用10先观察</span><br><span class="line"># 设置thread_concurrency的值的正确与否, 对mysql的性能影响很大, 在多个cpu(或多核)的情况下，错误设置了thread_concurrency的值, 会导致mysql不能充分利用多cpu(或多核), 出现同一时刻只能一个cpu(或核)在工作的情况。thread_concurrency应设为CPU核数的2倍. 比如有一个双核的CPU, 那么thread_concurrency的应该为4; 2个双核的cpu, thread_concurrency的值应为8</span><br><span class="line"></span><br><span class="line">query_cache_size = 64M  </span><br><span class="line">#在MyISAM引擎优化中，这个参数也是一个重要的优化参数。但也爆露出来一些问题。机器的内存越来越大，习惯性把参数分配的值越来越大。这个参数加大后也引发了一系列问题。我们首先分析一下 query_cache_size的工作原理：一个SELECT查询在DB中工作后，DB会把该语句缓存下来，当同样的一个SQL再次来到DB里调用时，DB在该表没发生变化的情况下把结果从缓存中返回给Client。这里有一个关建点，就是DB在利用Query_cache工作时，要求该语句涉及的表在这段时间内没有发生变更。那如果该表在发生变更时，Query_cache里的数据又怎么处理呢？首先要把Query_cache和该表相关的语句全部置为失效，然后在写入更新。那么如果Query_cache非常大，该表的查询结构又比较多，查询语句失效也慢，一个更新或是Insert就会很慢，这样看到的就是Update或是Insert怎么这么慢了。所以在数据库写入量或是更新量也比较大的系统，该参数不适合分配过大。而且在高并发，写入量大的系统，建议把该功能禁掉。</span><br><span class="line"></span><br><span class="line">query_cache_limit = 4M  </span><br><span class="line">#指定单个查询能够使用的缓冲区大小，缺省为1M</span><br><span class="line"></span><br><span class="line">query_cache_min_res_unit = 2k  </span><br><span class="line">#默认是4KB，设置值大对大数据查询有好处，但如果你的查询都是小数据查询，就容易造成内存碎片和浪费</span><br><span class="line">#查询缓存碎片率 = Qcache_free_blocks / Qcache_total_blocks * 100%</span><br><span class="line">#如果查询缓存碎片率超过20%，可以用FLUSH QUERY CACHE整理缓存碎片，或者试试减小query_cache_min_res_unit，如果你的查询都是小数据量的话。</span><br><span class="line">#查询缓存利用率 = (query_cache_size – Qcache_free_memory) / query_cache_size * 100%</span><br><span class="line">#查询缓存利用率在25%以下的话说明query_cache_size设置的过大，可适当减小;查询缓存利用率在80%以上而且Qcache_lowmem_prunes &gt; 50的话说明query_cache_size可能有点小，要不就是碎片太多。</span><br><span class="line">#查询缓存命中率 = (Qcache_hits – Qcache_inserts) / Qcache_hits * 100%</span><br><span class="line"></span><br><span class="line">#default-storage-engine = MyISAM</span><br><span class="line">#default_table_type = InnoDB #开启失败</span><br><span class="line"></span><br><span class="line">#thread_stack = 192K  </span><br><span class="line">#设置MYSQL每个线程的堆栈大小，默认值足够大，可满足普通操作。可设置范围为128K至4GB，默认为256KB，使用默认观察</span><br><span class="line"></span><br><span class="line">transaction_isolation = READ-COMMITTED  </span><br><span class="line"># 设定默认的事务隔离级别.可用的级别如下:READ UNCOMMITTED-读未提交 READ COMMITTE-读已提交 REPEATABLE READ -可重复读 SERIALIZABLE -串行</span><br><span class="line"></span><br><span class="line">tmp_table_size = 256M  </span><br><span class="line"># tmp_table_size 的默认大小是 32M。如果一张临时表超出该大小，MySQL产生一个 The table tbl_name is full 形式的错误，如果你做很多高级 GROUP BY 查询，增加 tmp_table_size 值。如果超过该值，则会将临时表写入磁盘。</span><br><span class="line">max_heap_table_size = 256M</span><br><span class="line"></span><br><span class="line">expire_logs_days = 7  </span><br><span class="line">key_buffer_size = 2048M  </span><br><span class="line">#批定用于索引的缓冲区大小，增加它可以得到更好的索引处理性能，对于内存在4GB左右的服务器来说，该参数可设置为256MB或384MB。</span><br><span class="line"></span><br><span class="line">read_buffer_size = 1M  </span><br><span class="line">#默认128K</span><br><span class="line"># MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能。和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享。</span><br><span class="line"></span><br><span class="line">read_rnd_buffer_size = 16M  </span><br><span class="line"># MySql的随机读（查询操作）缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。</span><br><span class="line"></span><br><span class="line">bulk_insert_buffer_size = 64M  </span><br><span class="line">#批量插入数据缓存大小，可以有效提高插入效率，默认为8M</span><br><span class="line"></span><br><span class="line">myisam_sort_buffer_size = 128M  </span><br><span class="line"># MyISAM表发生变化时重新排序所需的缓冲 默认8M</span><br><span class="line"></span><br><span class="line">myisam_max_sort_file_size = 10G  </span><br><span class="line"># MySQL重建索引时所允许的最大临时文件的大小 (当 REPAIR, ALTER TABLE 或者 LOAD DATA INFILE).</span><br><span class="line"># 如果文件大小比此值更大,索引会通过键值缓冲创建(更慢)</span><br><span class="line"></span><br><span class="line">#myisam_max_extra_sort_file_size = 10G 5.6无此值设置</span><br><span class="line">#myisam_repair_threads = 1   默认为1</span><br><span class="line"># 如果一个表拥有超过一个索引, MyISAM 可以通过并行排序使用超过一个线程去修复他们.</span><br><span class="line"># 这对于拥有多个CPU以及大量内存情况的用户,是一个很好的选择.</span><br><span class="line"></span><br><span class="line">myisam_recover  </span><br><span class="line">#自动检查和修复没有适当关闭的 MyISAM 表</span><br><span class="line">skip-name-resolve  </span><br><span class="line">lower_case_table_names = 1  </span><br><span class="line">server-id = 1</span><br><span class="line"></span><br><span class="line">innodb_additional_mem_pool_size = 16M  </span><br><span class="line">#这个参数用来设置 InnoDB 存储的数据目录信息和其它内部数据结构的内存池大小，类似于Oracle的library cache。这不是一个强制参数，可以被突破。</span><br><span class="line"></span><br><span class="line">innodb_buffer_pool_size = 2048M  </span><br><span class="line"># 这对Innodb表来说非常重要。Innodb相比MyISAM表对缓冲更为敏感。MyISAM可以在默认的 key_buffer_size 设置下运行的可以，然而Innodb在默认的 innodb_buffer_pool_size 设置下却跟蜗牛似的。由于Innodb把数据和索引都缓存起来，无需留给操作系统太多的内存，因此如果只需要用Innodb的话则可以设置它高达 70-80% 的可用内存。一些应用于 key_buffer 的规则有 — 如果你的数据量不大，并且不会暴增，那么无需把 innodb_buffer_pool_size 设置的太大了</span><br><span class="line"></span><br><span class="line">#innodb_data_file_path = ibdata1:1024M:autoextend 设置过大导致报错，默认12M观察</span><br><span class="line">#表空间文件 重要数据</span><br><span class="line"></span><br><span class="line">#innodb_file_io_threads = 4   不明确，使用默认值</span><br><span class="line">#文件IO的线程数，一般为 4，但是在 Windows 下，可以设置得较大。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">innodb_thread_concurrency = 8  </span><br><span class="line">#服务器有几个CPU就设置为几，建议用默认设置，一般为8.</span><br><span class="line"></span><br><span class="line">innodb_flush_log_at_trx_commit = 2  </span><br><span class="line"># 如果将此参数设置为1，将在每次提交事务后将日志写入磁盘。为提供性能，可以设置为0或2，但要承担在发生故障时丢失数据的风险。设置为0表示事务日志写入日志文件，而日志文件每秒刷新到磁盘一次。设置为2表示事务日志将在提交时写入日志，但日志文件每次刷新到磁盘一次。</span><br><span class="line"></span><br><span class="line">#innodb_log_buffer_size = 16M   使用默认8M</span><br><span class="line">#此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据.MySQL开发人员建议设置为1－8M之间</span><br><span class="line"></span><br><span class="line">#innodb_log_file_size = 128M  使用默认48M</span><br><span class="line">#此参数确定数据日志文件的大小，以M为单位，更大的设置可以提高性能，但也会增加恢复故障数据库所需的时间</span><br><span class="line"></span><br><span class="line">#innodb_log_files_in_group = 3   使用默认2</span><br><span class="line">#为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3M</span><br><span class="line"></span><br><span class="line">#innodb_max_dirty_pages_pct = 90  使用默认75观察</span><br><span class="line">#推荐阅读 http://www.taobaodba.com/html/221_innodb_max_dirty_pages_pct_checkpoint.html</span><br><span class="line"># Buffer_Pool中Dirty_Page所占的数量，直接影响InnoDB的关闭时间。参数innodb_max_dirty_pages_pct 可以直接控制了Dirty_Page在Buffer_Pool中所占的比率，而且幸运的是innodb_max_dirty_pages_pct是可以动态改变的。所以，在关闭InnoDB之前先将innodb_max_dirty_pages_pct调小，强制数据块Flush一段时间，则能够大大缩短 MySQL关闭的时间。</span><br><span class="line"></span><br><span class="line">innodb_lock_wait_timeout = 120  </span><br><span class="line">#默认为50秒 </span><br><span class="line"># InnoDB 有其内置的死锁检测机制，能导致未完成的事务回滚。但是，如果结合InnoDB使用MyISAM的lock tables 语句或第三方事务引擎,则InnoDB无法识别死锁。为消除这种可能性，可以将innodb_lock_wait_timeout设置为一个整数值，指示 MySQL在允许其他事务修改那些最终受事务回滚的数据之前要等待多长时间(秒数)</span><br><span class="line"></span><br><span class="line">innodb_file_per_table = ON</span><br><span class="line">#MySQL 5.6中，这个属性默认值是ON</span><br><span class="line">#独享表空间（关闭/开启）</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick  </span><br><span class="line"># max_allowed_packet = 32M</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/data/mysql/mysql_oldboy.err  </span><br><span class="line">pid-file=/data/mysql/mysqld.pid</span><br><span class="line"></span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intellij IDEA 去掉@AutoWired注入bean报错</title>
      <link href="/posts/b77a/"/>
      <url>/posts/b77a/</url>
      
        <content type="html"><![CDATA[<p>有时开发项目时，会遇到注入的bean报红，但是并不影响运行。</p><p>解决方案：调整IDE对于@Autowired的检查级别</p><a id="more"></a><p><img src="https://i.loli.net/2019/06/11/5cff5ad438f3957575.png" alt="5cff5ad438f3957575"></p>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful API设计规范</title>
      <link href="/posts/8e30/"/>
      <url>/posts/8e30/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth 2.0 协议</title>
      <link href="/posts/fec1/"/>
      <url>/posts/fec1/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是-OAuth-2-0"><a href="#什么是-OAuth-2-0" class="headerlink" title="什么是 OAuth 2.0"></a>什么是 OAuth 2.0</h3><p>OAuth 2.0 是一个行业的标准授权协议。OAuth 2.0 专注于简化客户端开发人员，同时为 Web 应用程序，桌面应用程序，手机和客厅设备提供特定的授权流程。</p><p>它的最终目的是为第三方应用颁发一个有时效性的令牌 token。使得第三方应用能够通过该令牌获取相关的资源。常见的场景就是：第三方登录。当你想要登录某个论坛，但没有账号，而这个论坛接入了如 QQ、Facebook 等登录功能，在你使用 QQ 登录的过程中就使用的 OAuth 2.0 协议。</p><p>如果你想了解更多，其官方网址为：<a href="https://oauth.net/2/" target="_blank" rel="noopener">https://oauth.net/2/</a>。下面我们来了解下 OAuth 协议的基本原理</p><a id="more"></a><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p>首先需要介绍的是 OAuth 2.0 协议中的一些角色，整个授权协议的流程都将围绕着这些角色：</p><ul><li><code>resource owner</code>，资源所有者，能够允许访问受保护资源的实体。如果是个人，被称为 end-user。</li><li><code>resource server</code>，资源服务器，托管受保护资源的服务器。</li><li><code>client</code>，客户端，使用资源所有者的授权代表资源所有者发起对受保护资源的请求的应用程序。如：web网站，移动应用等。</li><li><code>authorization server</code>，授权服务器，能够向客户端颁发令牌。</li><li><code>user-agent</code>，用户代理，帮助资源所有者与客户端沟通的工具，一般为 web 浏览器，移动 APP 等。</li></ul><p>可能有些朋友依然不太理解，这里举例说明：假如我想要在  <code>coding.net</code>  这个网站上用  <code>github.com</code>  的账号登录。那么 coding 相对于 github 就是一个客户端。而我们用什么操作的呢？浏览器，这就是一个用户代理。当从 github 的授权服务器获得 token 后，coding 是需要请求 github 账号信息的，从哪请求？从 github 的资源服务器。</p><h3 id="协议流程"><a href="#协议流程" class="headerlink" title="协议流程"></a>协议流程</h3><p><img src="https://st.deepzz.com/blog/img/oauth2-roles.jpg" alt="oauth2-roles"></p><p>上图详细的描述了这四个角色之间的步骤流程：</p><ul><li>(A) Client 请求 Resource Owner 的授权。授权请求可以直接向 Resource Owner 请求，也可以通过 Authorization Server 间接的进行。</li><li>(B) Client 获得授权许可。</li><li>© Client 向 Authorization Server 请求访问令牌。</li><li>(D) Authorization Server 验证授权许可，如果有效则颁发访问令牌。</li><li>(E) Client 通过访问令牌从 Resource Server 请求受保护资源。</li><li>(F) Resource Server 验证访问令牌，有效则响应请求。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">+--------+                               +---------------+</span><br><span class="line">|        |--(A)- Authorization Request -&gt;|   Resource    |</span><br><span class="line">|        |                               |     Owner     |</span><br><span class="line">|        |&lt;-(B)-- Authorization Grant ---|               |</span><br><span class="line">|        |                               +---------------+</span><br><span class="line">|        |</span><br><span class="line">|        |                               +---------------+</span><br><span class="line">|        |--(C)-- Authorization Grant --&gt;| Authorization |</span><br><span class="line">| Client |                               |     Server    |</span><br><span class="line">|        |&lt;-(D)----- Access Token -------|               |</span><br><span class="line">|        |                               +---------------+</span><br><span class="line">|        |</span><br><span class="line">|        |                               +---------------+</span><br><span class="line">|        |--(E)----- Access Token ------&gt;|    Resource   |</span><br><span class="line">|        |                               |     Server    |</span><br><span class="line">|        |&lt;-(F)--- Protected Resource ---|               |</span><br><span class="line">+--------+                               +---------------+</span><br><span class="line"></span><br><span class="line">                Figure 1: Abstract Protocol Flow</span><br></pre></td></tr></table></figure><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>一个客户端想要获得授权，就需要先到服务商那注册你的应用。一般需要你提供下面这些信息：</p><ul><li>应用名称</li><li>应用网站</li><li>重定向 URI 或回调 URL（redirect_uri）</li></ul><p>重定向 URI 是服务商在用户授权（或拒绝）应用程序之后重定向用户的地址，因此也是用于处理授权代码或访问令牌的应用程序的一部分。在你注册成功之后，你会从服务商那获取到你的应用相关的信息：</p><ul><li>客户端标识 client_id</li><li>客户端密钥 client_secret</li></ul><p><code>client_id</code>  用来表识客户端（公开），<code>client_secret</code>  用来验证客户端身份（保密）。</p><h4 id="授权类型"><a href="#授权类型" class="headerlink" title="授权类型"></a>授权类型</h4><p>OAuth 2.0 列举了四种授权类型，分别用于不同的场景：</p><ul><li>Authorization Code（授权码 code）：服务器与客户端配合使用。</li><li>Implicit（隐式 token）：用于移动应用程序或 Web 应用程序（在用户设备上运行的应用程序）。</li><li>Resource Owner Password Credentials（资源所有者密码凭证 password）：资源所有者和客户端之间具有高度信任时（例如，客户端是设备的操作系统的一部分，或者是一个高度特权应用程序），以及当其他授权许可类型（例如授权码）不可用时被使用。</li><li>Client Credentials（客户端证书 client_credentials）：当客户端代表自己表演（客户端也是资源所有者）或者基于与授权服务器事先商定的授权请求对受保护资源的访问权限时，客户端凭据被用作为授权许可。</li></ul><p>下面来具体说说这四种授权。注意重定向一定要用 302。</p><p><strong>授权码模式</strong></p><p>该方式需要资源服务器的参与，应用场景大概是：</p><ol><li>资源拥有者（用户）需要登录客户端（APP），他选择了第三方登录。</li><li>客户端（APP）重定向到第三方授权服务器。此时客户端携带了客户端标识（client_id），那么第三方就知道这是哪个客户端，资源拥有者确定（拒绝）授权后需要重定向到哪里。</li><li>用户确认授权，客户端（APP）被重定向到注册时给定的 URI，并携带了第三方给定的 code。</li><li>在重定向的过程中，客户端拿到 code 与  <code>client_id</code>、<code>client_secret</code>  去授权服务器请求令牌，如果成功，直接请求资源服务器获取资源，整个过程，用户代理是不会拿到令牌 token 的。</li><li>客户端（APP）拿到令牌 token 后就可以向第三方的资源服务器请求资源了。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  +----------+</span><br><span class="line">  | Resource |</span><br><span class="line">  |   Owner  |</span><br><span class="line">  |          |</span><br><span class="line">  +----------+</span><br><span class="line">       ^</span><br><span class="line">       |</span><br><span class="line">      (B)</span><br><span class="line">  +----|-----+          Client Identifier      +---------------+</span><br><span class="line">  |         -+----(A)-- &amp; Redirection URI ----&gt;|               |</span><br><span class="line">  |  User-   |                                 | Authorization |</span><br><span class="line">  |  Agent  -+----(B)-- User authenticates ---&gt;|     Server    |</span><br><span class="line">  |          |                                 |               |</span><br><span class="line">  |         -+----(C)-- Authorization Code ---&lt;|               |</span><br><span class="line">  +-|----|---+                                 +---------------+</span><br><span class="line">    |    |                                         ^      v</span><br><span class="line">   (A)  (C)                                        |      |</span><br><span class="line">    |    |                                         |      |</span><br><span class="line">    ^    v                                         |      |</span><br><span class="line">  +---------+                                      |      |</span><br><span class="line">  |         |&gt;---(D)-- Authorization Code ---------&apos;      |</span><br><span class="line">  |  Client |          &amp; Redirection URI                  |</span><br><span class="line">  |         |                                             |</span><br><span class="line">  |         |&lt;---(E)----- Access Token -------------------&apos;</span><br><span class="line">  +---------+       (w/ Optional Refresh Token)</span><br><span class="line"></span><br><span class="line">Note: The lines illustrating steps (A), (B), and (C) are broken into</span><br><span class="line">two parts as they pass through the user-agent.</span><br><span class="line"></span><br><span class="line">                  Figure 3: Authorization Code Flow</span><br></pre></td></tr></table></figure><p>具体说明，这里以 coding 和 github 为例。当我想在 coding 上通过 github 账号登录时：</p><p>1、<code>GET 请求</code>  点击登录，重定向到 github 的授权端点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/login/oauth/authorize?</span><br><span class="line">  response_type=code&amp;</span><br><span class="line">  client_id=a5ce5a6c7e8c39567ca0&amp;</span><br><span class="line">  redirect_uri=https://coding.net/api/oauth/github/callback&amp;</span><br><span class="line">  scope=user:email</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>response_type</td><td>必须，固定为 code，表示这是一个授权码请求。</td></tr><tr><td>client_id</td><td>必须，在 github 注册获得的客户端 ID。</td></tr><tr><td>redirect_uri</td><td>可选，通过客户端注册的重定向 URI（一般要求且与注册时一致）。</td></tr><tr><td>scope</td><td>可选，请求资源范围，多个空格隔开。</td></tr><tr><td>state</td><td>可选（推荐），如果存在，原样返回给客户端。</td></tr></tbody></table><p>返回值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://coding.net/api/oauth/github/callback?code=fb6a88dc09e843b33f</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>code</td><td>必须。授权码</td></tr><tr><td>state</td><td>如果出现在请求中，必须包含。</td></tr></tbody></table><p><strong>授权错误</strong></p><p>第一种，客户端没有被识别或错误的重定向 URI，授权服务器没有必要重定向资源拥有者到重定向URI，而是通知资源拥有者发生了错误。</p><p>第二种，客户端被正确地授权了，但是其他某些事情失败了。这种情况下下面地错误响应会被发送到客户端，包括在重定向 URI 中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://coding.net/api/oauth/github/callback?</span><br><span class="line">  error=redirect_uri_mismatch&amp;</span><br><span class="line">  error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.&amp;</span><br><span class="line">  error_uri=https%3A%2F%2Fdeveloper.github.com%2Fapps%2Fmanaging-oauth-apps%2Ftroubleshooting-authorization-request-errors%2F%23redirect-uri-mismatch</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>error</td><td>必须，必须是预先定义的错误码。</td></tr><tr><td>error_description</td><td>可选，错误描述</td></tr><tr><td>error_uri</td><td>可选，指向可解读错误的 URI</td></tr><tr><td>state</td><td>必须，如果出现在授权请求中</td></tr></tbody></table><p>2、<code>POST 请求</code>  获取令牌 token，当获取到授权码 code 后，客户端需要用它获取访问令牌：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/login/oauth/access_token?</span><br><span class="line">  client_id=a5ce5a6c7e8c39567ca0&amp;</span><br><span class="line">  client_secret=xxxx&amp;</span><br><span class="line">  grant_type=authorization_code&amp;</span><br><span class="line">  code=fb6a88dc09e843b33f&amp;</span><br><span class="line">  redirect_uri=https://coding.net/api/oauth/github/callback</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>client_id</td><td>必须，客户端标识。</td></tr><tr><td>client_secret</td><td>必须，客户端密钥。</td></tr><tr><td>grant_type</td><td>必须，固定为 authorization_code／refresh_token。</td></tr><tr><td>code</td><td>必须，上一步获取到的授权码。</td></tr><tr><td>redirect_uri</td><td>必须，完成授权后的回调地址，与注册时一致。</td></tr></tbody></table><p>返回值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;access_token&quot;:&quot;a14afef0f66fcffce3e0fcd2e34f6ff4&quot;,</span><br><span class="line">  &quot;token_type&quot;:&quot;bearer&quot;,</span><br><span class="line">  &quot;expires_in&quot;:3920,</span><br><span class="line">  &quot;refresh_token&quot;:&quot;5d633d136b6d56a41829b73a424803ec&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>access_token</td><td>这个就是最终获取到的令牌。</td></tr><tr><td>token_type</td><td>令牌类型，常见有 bearer/mac/token（可自定义）。</td></tr><tr><td>expires_in</td><td>失效时间。</td></tr><tr><td>refresh_token</td><td>刷新令牌，用来刷新 access_token。</td></tr></tbody></table><p>3、获取资源服务器资源，拿着 access_token 就可以获取账号的相关信息了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Authorization: token a14afef0f66fcffce3e0fcd2e34f6ff4&quot; https://api.github.com/user</span><br></pre></td></tr></table></figure><p>4、<code>POST 请求</code>  刷新令牌</p><p>我们的 access_token 是有时效性的，当在获取 github 用户信息时，如果返回 token 过期：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/login/oauth/access_token?</span><br><span class="line">  client_id=a5ce5a6c7e8c39567ca0&amp;</span><br><span class="line">  client_secret=xxxx&amp;</span><br><span class="line">  redirect_uri=https://coding.net/api/oauth/github/callback&amp;</span><br><span class="line">  grant_type=refresh_token&amp;</span><br><span class="line">  refresh_token=5d633d136b6d56a41829b73a424803ec</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>client_id</td><td>必须</td></tr><tr><td>client_secret</td><td>必须</td></tr><tr><td>redirect_uri</td><td>必须</td></tr><tr><td>grant_type</td><td>必须，固定为 refresh_token</td></tr><tr><td>refresh_token</td><td>必须，上面获取到的 refresh_token</td></tr></tbody></table><p>返回值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;access_token&quot;:&quot;a14afef0f66fcffce3e0fcd2e34f6ee4&quot;,</span><br><span class="line">  &quot;token_type&quot;:&quot;bearer&quot;,</span><br><span class="line">  &quot;expires_in&quot;:3920,</span><br><span class="line">  &quot;refresh_token&quot;:&quot;4a633d136b6d56a41829b73a424803vd&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>refresh_token 只有在 access_token 过期时才能使用，并且只能使用一次。当换取到的 access_token 再次过期时，使用新的 refresh_token 来换取 access_token</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">+--------+                                           +---------------+</span><br><span class="line">|        |--(A)------- Authorization Grant ---------&gt;|               |</span><br><span class="line">|        |                                           |               |</span><br><span class="line">|        |&lt;-(B)----------- Access Token -------------|               |</span><br><span class="line">|        |               &amp; Refresh Token             |               |</span><br><span class="line">|        |                                           |               |</span><br><span class="line">|        |                            +----------+   |               |</span><br><span class="line">|        |--(C)---- Access Token ----&gt;|          |   |               |</span><br><span class="line">|        |                            |          |   |               |</span><br><span class="line">|        |&lt;-(D)- Protected Resource --| Resource |   | Authorization |</span><br><span class="line">| Client |                            |  Server  |   |     Server    |</span><br><span class="line">|        |--(E)---- Access Token ----&gt;|          |   |               |</span><br><span class="line">|        |                            |          |   |               |</span><br><span class="line">|        |&lt;-(F)- Invalid Token Error -|          |   |               |</span><br><span class="line">|        |                            +----------+   |               |</span><br><span class="line">|        |                                           |               |</span><br><span class="line">|        |--(G)----------- Refresh Token -----------&gt;|               |</span><br><span class="line">|        |                                           |               |</span><br><span class="line">|        |&lt;-(H)----------- Access Token -------------|               |</span><br><span class="line">+--------+           &amp; Optional Refresh Token        +---------------+</span><br><span class="line"></span><br><span class="line">             Figure 2: Refreshing an Expired Access Token</span><br></pre></td></tr></table></figure><p><strong>隐式模式</strong></p><p>该方式一般用于移动客户端或网页客户端。隐式授权类似于授权码授权，但 token 被返回给用户代理再转发到客户端（APP），因此它可能会暴露给用户和用户设备上的其它客户端（APP）。此外，此流程不会对客户端（APP）的身份进行身份验证，并且依赖重定向 URI（已在服务商中注册）来实现此目的。</p><p>基本原理：要求用户授权应用程序，然后授权服务器将访问令牌传回给用户代理，用户代理将其传递给客户端。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">  +----------+</span><br><span class="line">  | Resource |</span><br><span class="line">  |  Owner   |</span><br><span class="line">  |          |</span><br><span class="line">  +----------+</span><br><span class="line">       ^</span><br><span class="line">       |</span><br><span class="line">      (B)</span><br><span class="line">  +----|-----+          Client Identifier     +---------------+</span><br><span class="line">  |         -+----(A)-- &amp; Redirection URI ---&gt;|               |</span><br><span class="line">  |  User-   |                                | Authorization |</span><br><span class="line">  |  Agent  -|----(B)-- User authenticates --&gt;|     Server    |</span><br><span class="line">  |          |                                |               |</span><br><span class="line">  |          |&lt;---(C)--- Redirection URI ----&lt;|               |</span><br><span class="line">  |          |          with Access Token     +---------------+</span><br><span class="line">  |          |            in Fragment</span><br><span class="line">  |          |                                +---------------+</span><br><span class="line">  |          |----(D)--- Redirection URI ----&gt;|   Web-Hosted  |</span><br><span class="line">  |          |          without Fragment      |     Client    |</span><br><span class="line">  |          |                                |    Resource   |</span><br><span class="line">  |     (F)  |&lt;---(E)------- Script ---------&lt;|               |</span><br><span class="line">  |          |                                +---------------+</span><br><span class="line">  +-|--------+</span><br><span class="line">    |    |</span><br><span class="line">   (A)  (G) Access Token</span><br><span class="line">    |    |</span><br><span class="line">    ^    v</span><br><span class="line">  +---------+</span><br><span class="line">  |         |</span><br><span class="line">  |  Client |</span><br><span class="line">  |         |</span><br><span class="line">  +---------+</span><br><span class="line"></span><br><span class="line">Note: The lines illustrating steps (A) and (B) are broken into two</span><br><span class="line">parts as they pass through the user-agent.</span><br><span class="line"></span><br><span class="line">                    Figure 4: Implicit Grant Flow</span><br></pre></td></tr></table></figure><p>1、同样以 coding 和 github 为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/login/oauth/authorize?</span><br><span class="line">  response_type=token&amp;</span><br><span class="line">  client_id=a5ce5a6c7e8c39567ca0&amp;</span><br><span class="line">  redirect_uri=https://coding.net/api/oauth/github/callback&amp;</span><br><span class="line">  scope=user:email</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>response_type</td><td>必须，固定为 token。</td></tr><tr><td>client_id</td><td>必须。当客户端被注册时，有授权服务器分配的客户端标识。</td></tr><tr><td>redirect_uri</td><td>可选。由客户端注册的重定向URI。</td></tr><tr><td>scope</td><td>可选。请求可能的作用域。</td></tr><tr><td>state</td><td>可选(推荐)。任何需要被传递到客户端请求的URI客户端的状态。</td></tr></tbody></table><p>返回值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://coding.net/api/oauth/github/callback#</span><br><span class="line">  access_token=a14afef0f66fcffce3e0fcd2e34f6ff4&amp;</span><br><span class="line">  token_type=token&amp;</span><br><span class="line">  expires_in=3600</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>access_token</td><td>必须。授权服务器分配的访问令牌。</td></tr><tr><td>token_type</td><td>必须。令牌类型。</td></tr><tr><td>expires_in</td><td>推荐，访问令牌过期的秒数。</td></tr><tr><td>scope</td><td>可选，访问令牌的作用域。</td></tr><tr><td>state</td><td>必须，如果出现在授权请求期间，和请求中的 state 参数一样。</td></tr></tbody></table><p>授权错误和上面一样</p><p>2、用户代理提取令牌 token 并提交给 coding</p><p>3、coding 拿到 token 就可以获取用户信息了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Authorization: token a14afef0f66fcffce3e0fcd2e34f6ff4&quot; https://api.github.com/user</span><br></pre></td></tr></table></figure><p><strong>资源所有者密码模式</strong></p><p>用户将其服务凭证（用户名和密码）直接提供给客户端，该客户端使用凭据从服务获取访问令牌。如果其它方式不可行，则只应在授权服务器上启用该授权类型。此外，只有在客户端受到用户信任时才能使用它（例如，它由服务商自有，或用户的桌面操作系统）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">+----------+</span><br><span class="line">| Resource |</span><br><span class="line">|  Owner   |</span><br><span class="line">|          |</span><br><span class="line">+----------+</span><br><span class="line">     v</span><br><span class="line">     |    Resource Owner</span><br><span class="line">    (A) Password Credentials</span><br><span class="line">     |</span><br><span class="line">     v</span><br><span class="line">+---------+                                  +---------------+</span><br><span class="line">|         |&gt;--(B)---- Resource Owner -------&gt;|               |</span><br><span class="line">|         |         Password Credentials     | Authorization |</span><br><span class="line">| Client  |                                  |     Server    |</span><br><span class="line">|         |&lt;--(C)---- Access Token ---------&lt;|               |</span><br><span class="line">|         |    (w/ Optional Refresh Token)   |               |</span><br><span class="line">+---------+                                  +---------------+</span><br><span class="line"></span><br><span class="line">       Figure 5: Resource Owner Password Credentials Flow</span><br></pre></td></tr></table></figure><p><code>POST 请求</code>  密码凭证流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://oauth.example.com/token?grant_type=password&amp;username=USERNAME&amp;password=PASSWORD&amp;client_id=CLIENT_ID</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>grant_type</td><td>必须，固定为 password。</td></tr><tr><td>username</td><td>必须，UTF-8 编码的资源拥有者用户名。</td></tr><tr><td>password</td><td>必须，UTF-8 编码的资源拥有者密码。</td></tr><tr><td>scope</td><td>可选，授权范围。</td></tr></tbody></table><p>返回值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  &quot;access_token&quot;  : &quot;...&quot;,</span><br><span class="line">  &quot;token_type&quot;    : &quot;...&quot;,</span><br><span class="line">  &quot;expires_in&quot;    : &quot;...&quot;,</span><br><span class="line">  &quot;refresh_token&quot; : &quot;...&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果授权服务器验证成功，那么将直接返回令牌 token，改客户端已被授权。</p><p><strong>客户端模式</strong></p><p>这种模式只需要提供  <code>client_id</code>  和  <code>client_secret</code>  即可获取授权。一般用于后端 API 的相关操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------+                                  +---------------+</span><br><span class="line">|         |                                  |               |</span><br><span class="line">|         |&gt;--(A)- Client Authentication ---&gt;| Authorization |</span><br><span class="line">| Client  |                                  |     Server    |</span><br><span class="line">|         |&lt;--(B)---- Access Token ---------&lt;|               |</span><br><span class="line">|         |                                  |               |</span><br><span class="line">+---------+                                  +---------------+</span><br><span class="line"></span><br><span class="line">                Figure 6: Client Credentials Flow</span><br></pre></td></tr></table></figure><p><code>POST 请求</code>  客户端凭证流程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://oauth.example.com/token?grant_type=client_credentials&amp;client_id=CLIENT_ID&amp;client_secret=CLIENT_SECRET</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>grant_type</td><td>必须。必须设置到客户端证书中。</td></tr><tr><td>scope</td><td>可选。授权的作用域。</td></tr></tbody></table><p>返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  &quot;access_token&quot;  : &quot;...&quot;,</span><br><span class="line">  &quot;token_type&quot;    : &quot;...&quot;,</span><br><span class="line">  &quot;expires_in&quot;    : &quot;...&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果授权服务器验证成功，那么将直接返回令牌 token，改客户端已被授权。</p><h3 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h3><p>[1]  <a href="https://developers.douban.com/wiki/?title=oauth2" target="_blank" rel="noopener">https://developers.douban.com/wiki/?title=oauth2</a></p><p>[2]  <a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2</a></p><p>[3]  <a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc6749</a></p><p>[4]  <a href="https://oauth.net/2/" target="_blank" rel="noopener">https://oauth.net/2/</a></p><p>本文链接：<a href="https://deepzz.com/post/what-is-oauth2-protocol.html" title="Permalink to 10 分钟理解什么是 OAuth 2.0 协议" target="_blank" rel="noopener">https://deepzz.com/post/what-is-oauth2-protocol.html</a></p>]]></content>
      
      
      <categories>
          
          <category> OAuth2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OAuth2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Interceptor VS Filter 拦截器和过滤器的区别</title>
      <link href="/posts/2ef0/"/>
      <url>/posts/2ef0/</url>
      
        <content type="html"><![CDATA[<p>Spring的Interceptor(拦截器)与Servlet的Filter有相似之处，都能实现权限检查、日志记录等。不同的是：</p><a id="more"></a><table><thead><tr><th>Filter</th><th>Interceptor</th><th>Summary</th></tr></thead><tbody><tr><td>Filter 接口定义在 javax.servlet 包中</td><td>接口 HandlerInterceptor 定义在org.springframework.web.servlet 包中</td><td></td></tr><tr><td>Filter 定义在 web.xml 中</td><td></td><td></td></tr><tr><td>Filter在只在 Servlet 前后起作用。Filters 通常将 请求和响应（request/response） 当做黑盒子，Filter 通常不考虑servlet 的实现。</td><td>拦截器能够深入到方法前后、异常抛出前后等，因此拦截器的使用具有更大的弹性。允许用户介入（hook into）请求的生命周期，在请求过程中获取信息，Interceptor 通常和请求更加耦合。</td><td>在Spring构架的程序中，要优先使用拦截器。几乎所有 Filter 能够做的事情， interceptor 都能够轻松的实现</td></tr><tr><td>Filter 是 Servlet 规范规定的。</td><td>而拦截器既可以用于Web程序，也可以用于Application、Swing程序中。</td><td>使用范围不同</td></tr><tr><td>Filter 是在 Servlet 规范中定义的，是 Servlet 容器支持的。</td><td>而拦截器是在 Spring容器内的，是Spring框架支持的。</td><td>规范不同</td></tr><tr><td>Filter 不能够使用 Spring 容器资源</td><td>拦截器是一个Spring的组件，归Spring管理，配置在Spring文件中，因此能使用Spring里的任何资源、对象，例如 Service对象、数据源、事务管理等，通过IoC注入到拦截器即可</td><td>Spring 中使用 interceptor 更容易</td></tr><tr><td>Filter 是被 Server(like Tomcat) 调用</td><td>Interceptor 是被 Spring 调用</td><td>因此 Filter 总是优先于 Interceptor 执行</td></tr></tbody></table><h3 id="Interceptor-使用"><a href="#Interceptor-使用" class="headerlink" title="Interceptor 使用"></a>Interceptor 使用</h3><p>interceptor 的执行顺序大致为：</p><ol><li>请求到达 DispatcherServlet</li><li>DispatcherServlet 发送至 Interceptor ，执行 preHandle</li><li>请求达到 Controller</li><li>请求结束后，postHandle 执行</li></ol><p>Spring 中主要通过 HandlerInterceptor 接口来实现请求的拦截，实现 HandlerInterceptor 接口需要实现下面三个方法：</p><ul><li><strong>preHandle()</strong>  – 在handler执行之前，返回 boolean 值，true 表示继续执行，false 为停止执行并返回。</li><li><strong>postHandle()</strong>  – 在handler执行之后, 可以在返回之前对返回的结果进行修改</li><li><strong>afterCompletion()</strong>  – 在请求完全结束后调用，可以用来统计请求耗时等等</li></ul><p>统计请求耗时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecuteTimeInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(ExecuteTimeInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//before the actual handler will be executed</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">        HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        request.setAttribute(<span class="string">"startTime"</span>, startTime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//after the handler is executed</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">        Object handler, ModelAndView modelAndView)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime = (Long)request.getAttribute(<span class="string">"startTime"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> executeTime = endTime - startTime;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//modified the exisitng modelAndView</span></span><br><span class="line">        modelAndView.addObject(<span class="string">"executeTime"</span>,executeTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//log it</span></span><br><span class="line">        <span class="keyword">if</span>(logger.isDebugEnabled())&#123;</span><br><span class="line">           logger.debug(<span class="string">"["</span> + handler + <span class="string">"] executeTime : "</span> + executeTime + <span class="string">"ms"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用mvc:interceptors标签来声明需要加入到SpringMVC拦截器链中的拦截器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:interceptors&gt;  </span><br><span class="line">&lt;!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 --&gt;  </span><br><span class="line">&lt;bean class=&quot;com.company.app.web.interceptor.AllInterceptor&quot;/&gt;  </span><br><span class="line">    &lt;mvc:interceptor&gt;  </span><br><span class="line">         &lt;mvc:mapping path=&quot;/**&quot;/&gt;  </span><br><span class="line">         &lt;mvc:exclude-mapping path=&quot;/parent/**&quot;/&gt;  </span><br><span class="line">         &lt;bean class=&quot;com.company.authorization.interceptor.SecurityInterceptor&quot; /&gt;  </span><br><span class="line">    &lt;/mvc:interceptor&gt;  </span><br><span class="line">    &lt;mvc:interceptor&gt;  </span><br><span class="line">         &lt;mvc:mapping path=&quot;/parent/**&quot;/&gt;  </span><br><span class="line">         &lt;bean class=&quot;com.company.authorization.interceptor.SecuritySystemInterceptor&quot; /&gt;  </span><br><span class="line">    &lt;/mvc:interceptor&gt;  </span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure><p>可以利用mvc:interceptors标签声明一系列的拦截器，然后它们就可以形成一个拦截器链，拦截器的执行顺序是按声明的先后顺序执行的，先声明的拦截器中的preHandle方法会先执行，然而它的postHandle方法和afterCompletion方法却会后执行。</p><p>在mvc:interceptors标签下声明interceptor主要有两种方式：</p><ul><li>直接定义一个Interceptor实现类的bean对象。使用这种方式声明的Interceptor拦截器将会对所有的请求进行拦截。</li><li>使用mvc:interceptor标签进行声明。使用这种方式进行声明的Interceptor可以通过mvc:mapping子标签来定义需要进行拦截的请求路径。</li></ul><p>经过上述两步之后，定义的拦截器就会发生作用对特定的请求进行拦截了。</p><h3 id="Filter-使用"><a href="#Filter-使用" class="headerlink" title="Filter 使用"></a>Filter 使用</h3><p>Servlet 的 Filter 接口需要实现如下方法：</p><ul><li><code>void init(FilterConfig paramFilterConfig)</code>  – 当容器初始化 Filter 时调用，该方法在 Filter 的生命周期只会被调用一次，一般在该方法中初始化一些资源，FilterConfig 是容器提供给 Filter 的初始化参数，在该方法中可以抛出 ServletException 。init 方法必须执行成功，否则 Filter 可能不起作用，出现以下两种情况时，web 容器中 Filter 可能无效： 1）抛出 ServletException 2）超过 web 容器定义的执行时间。</li><li><code>doFilter(ServletRequest paramServletRequest, ServletResponse paramServletResponse, FilterChain paramFilterChain)</code>  – Web 容器每一次请求都会调用该方法。该方法将容器的请求和响应作为参数传递进来， FilterChain 用来调用下一个 Filter。</li><li><code>void destroy()</code>  – 当容器销毁 Filter 实例时调用该方法，可以在方法中销毁资源，该方法在 Filter 的生命周期只会被调用一次。</li></ul><h3 id="Filter-和-Interceptor-的一些用途"><a href="#Filter-和-Interceptor-的一些用途" class="headerlink" title="Filter 和 Interceptor 的一些用途"></a>Filter 和 Interceptor 的一些用途</h3><ul><li>Authentication Filters</li><li>Logging and Auditing Filters</li><li>Image conversion Filters</li><li>Data compression Filters</li><li>Encryption Filters</li><li>Tokenizing Filters</li><li>Filters that trigger resource access events</li><li>XSL/T filters</li><li>Mime-type chain Filter</li></ul><p>Request Filters 可以:</p><ul><li>执行安全检查 perform security checks</li><li>格式化请求头和主体 reformat request headers or bodies</li><li>审查或者记录日志 audit or log requests</li><li>根据请求内容授权或者限制用户访问 Authentication-Blocking requests based on user identity.</li><li>根据请求频率限制用户访问</li></ul><p>Response Filters 可以:</p><ul><li>压缩响应内容,比如让下载的内容更小 Compress the response stream</li><li>追加或者修改响应 append or alter the response stream</li><li>创建或者整体修改响应 create a different response altogether</li><li>根据地方不同修改响应内容 Localization-Targeting the request and response to a particular locale.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot Restful API拦截方式</title>
      <link href="/posts/c914/"/>
      <url>/posts/c914/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot RestFul API拦截大概有三种方式：Filter、Interceptor、Aspect。</p><a id="more"></a><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Time  filter init"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Time filter start"</span>);</span><br><span class="line">        <span class="keyword">long</span> startTime = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"time filter:"</span>+(<span class="keyword">new</span> Date().getTime()-startTime));</span><br><span class="line">        System.out.println(<span class="string">"time filter finish"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Time filter destroy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Convert;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * this is spring interceptor</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hsj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-11-11 18:16</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制器方法处理之前</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"preHandle"</span>);</span><br><span class="line">        System.out.println(((HandlerMethod) handler).getBean().getClass().getName());</span><br><span class="line">        System.out.println(((HandlerMethod) handler).getMethod().getName());</span><br><span class="line">        httpServletRequest.setAttribute(<span class="string">"startTime"</span>, <span class="keyword">new</span> Date().getTime());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制器方法处理之后</span></span><br><span class="line"><span class="comment">     * 控制器方法调用不抛异常调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"postHandle"</span>);</span><br><span class="line">        Long startTime = (Long) httpServletRequest.getAttribute(<span class="string">"startTime"</span>);</span><br><span class="line">        System.out.println(<span class="string">"time interceptor 耗时"</span> + (<span class="keyword">new</span> Date().getTime() - startTime));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制器方法抛不抛异常都会被调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterCompletion"</span>);</span><br><span class="line">        Long startTime = (Long) httpServletRequest.getAttribute(<span class="string">"startTime"</span>);</span><br><span class="line">        System.out.println(<span class="string">"time interceptor 耗时"</span> + (<span class="keyword">new</span> Date().getTime() - startTime));</span><br><span class="line">        System.out.println(<span class="string">"ex is"</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Aspect"><a href="#Aspect" class="headerlink" title="Aspect"></a>Aspect</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * this is a acpect</span></span><br><span class="line"><span class="comment"> * 切入点</span></span><br><span class="line"><span class="comment"> * 在那些方法上起作用</span></span><br><span class="line"><span class="comment"> * 在什么时候起作用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hsj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-11-11 20:52</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* com.nbkj.controller.UserController.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">handleControllerMethod</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"time aspect start"</span>);</span><br><span class="line">        Object[] args = proceedingJoinPoint.getArgs();</span><br><span class="line">        <span class="keyword">for</span> (Object arg : args) &#123;</span><br><span class="line">            System.out.println(arg.getClass().getName());</span><br><span class="line">            System.out.println(<span class="string">"arg is "</span> + arg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> startTime = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">        Object obj = proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">"time aspect 耗时"</span> + (<span class="keyword">new</span> Date().getTime() - startTime));</span><br><span class="line">        System.out.println(<span class="string">"time aspect end"</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>过滤器（Filter） ：可以拿到原始的http请求，但是拿不到你请求的控制器和请求控制器中的方法的信息。</p></li><li><p>拦截器（Interceptor）：可以拿到你请求的控制器和方法，却拿不到请求方法的参数。</p></li><li><p>切片 （Aspect） : 可以拿到方法的参数，但是却拿不到http请求和响应的对象</p><p><img src alt></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot使用HandlerInterceptor拦截器</title>
      <link href="/posts/f31b/"/>
      <url>/posts/f31b/</url>
      
        <content type="html"><![CDATA[<h4 id="编写一个拦截器，实现HandlerInterceptor接口"><a href="#编写一个拦截器，实现HandlerInterceptor接口" class="headerlink" title="编写一个拦截器，实现HandlerInterceptor接口"></a>编写一个拦截器，实现<code>HandlerInterceptor</code>接口</h4><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TimerInterceptor</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jlin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-05-30 09:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This implementation always returns &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"收到请求--&gt;&#123;&#125;"</span>, request.getRequestURI());</span><br><span class="line">        request.setAttribute(<span class="string">"startTime"</span>, System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制器方法抛不抛异常都会被调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Long startTime = (Long) request.getAttribute(<span class="string">"startTime"</span>);</span><br><span class="line">        log.debug(<span class="string">"请求耗时--&gt;url:&#123;&#125;--&gt;time:&#123;&#125;,"</span>, request.getRequestURI(), (System.currentTimeMillis() - startTime));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写一个类，继承WebMvcConfigurerAdapter抽象类，将其放入Spring容器中，然后重写addInterceptors-方法，并调用给的参数InterceptorRegistry-addInterceptor-把自己编写的那个拦截器作为参数加进去。"><a href="#编写一个类，继承WebMvcConfigurerAdapter抽象类，将其放入Spring容器中，然后重写addInterceptors-方法，并调用给的参数InterceptorRegistry-addInterceptor-把自己编写的那个拦截器作为参数加进去。" class="headerlink" title="编写一个类，继承WebMvcConfigurerAdapter抽象类，将其放入Spring容器中，然后重写addInterceptors()方法，并调用给的参数InterceptorRegistry.addInterceptor()把自己编写的那个拦截器作为参数加进去。"></a>编写一个类，继承<code>WebMvcConfigurerAdapter</code>抽象类，将其放入Spring容器中，然后重写addInterceptors()方法，并调用给的参数<code>InterceptorRegistry.addInterceptor()</code>把自己编写的那个拦截器作为参数加进去。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebConfig</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jlin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-05-29 16:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TimerInterceptor timerInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(timerInterceptor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 核心配置文件 bootstrap &amp; application 详解</title>
      <link href="/posts/907/"/>
      <url>/posts/907/</url>
      
        <content type="html"><![CDATA[<p>用过 Spring Boot 的都知道在 Spring Boot 中有以下两种配置文件</p><ul><li>bootstrap (.yml 或者 .properties)</li><li>application (.yml 或者 .properties)</li></ul><p>为什么会有这两种配置文件呢？大家都清楚它们的区别和具体使用场景吗？</p><a id="more"></a><h4 id="bootstrap-application-的区别"><a href="#bootstrap-application-的区别" class="headerlink" title="bootstrap/ application 的区别"></a>bootstrap/ application 的区别</h4><p>特意去翻了下 Spring Boot 的官方文档，没有找到关于这两种文件的具体定义，然后再翻了下 Spring Cloud 的官方文档找到了它们的区别。</p><blockquote><p><a href="http://cloud.spring.io/spring-cloud-static/Edgware.SR3/single/spring-cloud.html#_the_bootstrap_application_context" target="_blank" rel="noopener">http://cloud.spring.io/spring-cloud-static/Edgware.SR3/single/spring-cloud.html#_the_bootstrap_application_context</a></p></blockquote><p>认真阅读了下文档，原文大概意思是这样。</p><blockquote><p>Spring Cloud 构建于 Spring Boot 之上，在 Spring Boot 中有两种上下文，一种是 bootstrap, 另外一种是 application, bootstrap 是应用程序的父上下文，也就是说 bootstrap 加载优先于 applicaton。bootstrap 主要用于从额外的资源来加载配置信息，还可以在本地外部配置文件中解密属性。这两个上下文共用一个环境，它是任何Spring应用程序的外部属性的来源。bootstrap 里面的属性会优先加载，它们默认也不能被本地相同配置覆盖。</p></blockquote><p><strong>因此，对比 application 配置文件，bootstrap 配置文件具有以下几个特性。</strong></p><ul><li>boostrap 由父 ApplicationContext 加载，比 applicaton 优先加载</li><li>boostrap 里面的属性不能被覆盖</li></ul><h4 id="bootstrap-application-的应用场景"><a href="#bootstrap-application-的应用场景" class="headerlink" title="bootstrap/ application 的应用场景"></a>bootstrap/ application 的应用场景</h4><p>application 配置文件这个容易理解，主要用于 Spring Boot 项目的自动化配置。</p><p>bootstrap 配置文件有以下几个应用场景。</p><ul><li>使用 Spring Cloud Config 配置中心时，这时需要在 bootstrap 配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息；</li><li>一些固定的不能被覆盖的属性</li><li>一些加密/解密的场景；</li></ul><p>以下这个截图是一个国外网友问了一个 Spring Cloud 工程师得到的回答。</p><p><img src="https://i.loli.net/2019/05/24/5ce7a1515fbfd93357.png" alt="5ce7a1515fbfd93357"></p><p>做过 Spring Cloud 微服务的朋友应该对 bootstrap 的应用十分清楚，我们也有 Spring Cloud 的实战教程，在 Spring 专题中都能看到。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven：Non-resolvable parent POM: Failure to find错误</title>
      <link href="/posts/341c/"/>
      <url>/posts/341c/</url>
      
        <content type="html"><![CDATA[<p>使用Maven编译项目时遇到如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ERROR]   The project dfjr.generic:dfjr-generic:1.0-SNAPSHOT (F:\workspace\DFJR-PERSONNEL\dfjr-generic\pom.xml) has 1 error</span><br><span class="line">[ERROR]     Non-resolvable parent POM: Could not find artifact com.dfjr.generic:dfjr-generic-parent:pom:1.0-SNAPSHOT and <span class="string">'parent.relativePath'</span> points at wrong <span class="built_in">local</span> POM @ line 12, column 13 -&gt; [Help 2]</span><br></pre></td></tr></table></figure><p>由提示可知是parent.relativePath出错。解决办法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;cn.joinhealth&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;followup-job&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">    &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透ngrok</title>
      <link href="/posts/5e0c/"/>
      <url>/posts/5e0c/</url>
      
        <content type="html"><![CDATA[<h4 id="下载-ngrok"><a href="#下载-ngrok" class="headerlink" title="下载 ngrok"></a>下载 ngrok</h4><p><a href="https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-darwin-amd64.zip" target="_blank" rel="noopener">https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-darwin-amd64.zip</a></p><a id="more"></a><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ unzip /path/to/ngrok.zip</span><br></pre></td></tr></table></figure><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./ngrok http 80</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/23/5ce638641d9c166698.png" alt="5ce638641d9c166698"></p><h4 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./ngrok <span class="built_in">help</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ngrok </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ngrok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java虚拟机</title>
      <link href="/posts/f9b5/"/>
      <url>/posts/f9b5/</url>
      
        <content type="html"><![CDATA[<h3 id="Java堆溢出"><a href="#Java堆溢出" class="headerlink" title="Java堆溢出"></a>Java堆溢出</h3><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  VM Args 堆的最大、最小值设置为一样可以避免堆自动扩展</span></span><br><span class="line"><span class="comment">*  -Xms20m  堆的最小值</span></span><br><span class="line"><span class="comment">*  -Xmx20m  堆的最大值</span></span><br><span class="line"><span class="comment">*  -XX:+HeapDumpOnOutOfMemoryError 虚拟机在出现内存溢出异常时Dump出当前的堆转储快照</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapOOM</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMObject</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        List&lt;OOMObject&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> OOMObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常堆栈信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.OutOfMemoryError  Java heap space</span><br></pre></td></tr></table></figure><p>首先要确认是内存泄漏（Memory Leak）还是内存溢出（Memory Overflow）</p><h4 id="如果是内存泄漏"><a href="#如果是内存泄漏" class="headerlink" title="如果是内存泄漏"></a>如果是内存泄漏</h4><p>可以通过工具查看泄漏对象到GC Roots的引用链，定位到泄漏代码的位置。</p><h4 id="如果是内存溢出"><a href="#如果是内存溢出" class="headerlink" title="如果是内存溢出"></a>如果是内存溢出</h4><p>检查虚拟机的堆参数（-Xmx与-Xms），与机器物理内存对比看是否可以调大，从代码上检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期间的内存消耗。</p><h3 id="虚拟机栈和本地方法栈溢出"><a href="#虚拟机栈和本地方法栈溢出" class="headerlink" title="虚拟机栈和本地方法栈溢出"></a>虚拟机栈和本地方法栈溢出</h3><p>如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常。</p><p>如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。<code></code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim替换</title>
      <link href="/posts/37fe/"/>
      <url>/posts/37fe/</url>
      
        <content type="html"><![CDATA[<h3 id="全局替换"><a href="#全局替换" class="headerlink" title="全局替换"></a>全局替换</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[addr]s/sourseString/targetString/[option]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat查看版本</title>
      <link href="/posts/d9b6/"/>
      <url>/posts/d9b6/</url>
      
        <content type="html"><![CDATA[<p>在tomcat bin目录下有version.sh可执行脚本</p>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Service-zuul</title>
      <link href="/posts/5585/"/>
      <url>/posts/5585/</url>
      
        <content type="html"><![CDATA[<p>在SpringCloud中了提供了基于Netflix Zuul实现的API网关组件Spring Cloud Zuul。</p><p>SpringCloud Zuul可以通过与SpringCloud Eureka进行整合，将自身注册为Eureka服务治理下的应用，同时从Eureka中获得了所有其他微服务的实例信息。这样的设计非常巧妙地将服务治理体系中维护的实例信息利用起来，使得将维护服务实例的工作交给了服务治理框架自动完成，不再需要人工介入。</p><a id="more"></a><p>SpringCloud Zuul提供了一套过滤器机制，它可以 很好地支持这样的任务。开发者可以通过使用Zuul来创建各种校验过滤器，然后指定哪些规则的请求需要执行校验逻辑，只有通过校验的才会被路由到具体的微服务接口，不然就返回错误提示。通过这样的改造，各个业务层的微服务应用就不再需要非业务性质的校验逻辑了，这使得我们的微服务应用可以更专注千业务逻辑的开发，同时微服务的自动化测试也变得更容易实现。</p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      #设置与Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址。默认是http://localhost:8761/eureka ；多个地址可使用 , 分隔。</span><br><span class="line">      defaultZone: http://localhost:7001/eureka/</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 7005</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: service-zuul</span><br><span class="line"></span><br><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    #/api-a/ 开头匹配到service-producer</span><br><span class="line">    api-a:</span><br><span class="line">      path: /api-a/**</span><br><span class="line">      serviceId: service-producer</span><br><span class="line">    #/api-b/ 开头匹配到service-producer</span><br><span class="line">    api-b:</span><br><span class="line">      path: /api-b/**</span><br><span class="line">      serviceId: service-producer</span><br><span class="line">    #匹配/github/直接重定向到https://github.com/</span><br><span class="line">    github:</span><br><span class="line">      path: /github/**</span><br><span class="line">      url: https://github.com/</span><br></pre></td></tr></table></figure><h3 id="ServiceZuulApplication-java"><a href="#ServiceZuulApplication-java" class="headerlink" title="ServiceZuulApplication.java"></a>ServiceZuulApplication.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.linjian.servicezuul;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceZuulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServiceZuulApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><ol><li><p>启动eureka-server、service-producer、service-zuul</p></li><li><p>访问 <a href="http://localhost:7005/github/Delena" target="_blank" rel="noopener">http://localhost:7005/github/Delena</a></p></li><li><p>访问 <a href="http://localhost:7005/api-a/hello?name=linjian" target="_blank" rel="noopener">http://localhost:7005/api-a/hello?name=linjian</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Service-producer</title>
      <link href="/posts/3f6d/"/>
      <url>/posts/3f6d/</url>
      
        <content type="html"><![CDATA[<p>pom.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7003</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:7001/eureka/  #注册中心的地址</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: service-producer  #服务的名字</span><br></pre></td></tr></table></figure><p>启动类添加注解<strong>@EnableDiscoveryClient</strong></p><a id="more"></a><p>RestController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.linjian.serviceproducer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProducerController</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jlin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/19 22:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + name + <span class="string">"，this is new world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Service-consumer</title>
      <link href="/posts/36f5/"/>
      <url>/posts/36f5/</url>
      
        <content type="html"><![CDATA[<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7004</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:7001/eureka/  #注册中心的地址</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: service-consumer  #服务的名字</span><br></pre></td></tr></table></figure><h3 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h3><h5 id="RibbonService-java"><a href="#RibbonService-java" class="headerlink" title="RibbonService.java"></a>RibbonService.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.linjian.serviceconsumer.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RibbonService</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jlin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/19 22:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RibbonService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * say hello</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="RibbonServiceImpl-java"><a href="#RibbonServiceImpl-java" class="headerlink" title="RibbonServiceImpl.java"></a>RibbonServiceImpl.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.linjian.serviceconsumer.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.linjian.serviceconsumer.service.RibbonService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RibbonServiceImpl</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jlin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/19 22:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonServiceImpl</span> <span class="keyword">implements</span> <span class="title">RibbonService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * say hello</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://service-producer/hello?name="</span> + name, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h3><h5 id="FeignExampleService-java"><a href="#FeignExampleService-java" class="headerlink" title="FeignExampleService.java"></a>FeignExampleService.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.linjian.serviceconsumer.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FeignExampleService</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jlin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/20 10:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"service-producer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FeignExampleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(value = <span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.linjian.serviceconsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServiceConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * LoadBalanced 注解表明restTemplate使用LoadBalancerClient执行请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ConsumerController-java"><a href="#ConsumerController-java" class="headerlink" title="ConsumerController.java"></a>ConsumerController.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.linjian.serviceconsumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.linjian.serviceconsumer.service.FeignExampleService;</span><br><span class="line"><span class="keyword">import</span> com.linjian.serviceconsumer.service.impl.RibbonServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ConsumerController</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jlin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/19 22:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> FeignExampleService feignExampleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RibbonServiceImpl ribbonServiceImpl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@PathVariable(<span class="string">"name"</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ribbonServiceImpl.hello(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/helloFeign/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloFeign</span><span class="params">(@PathVariable(<span class="string">"name"</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> feignExampleService.hello(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动eureka-server、service-producer、service-consumer"><a href="#启动eureka-server、service-producer、service-consumer" class="headerlink" title="启动eureka-server、service-producer、service-consumer"></a>启动eureka-server、service-producer、service-consumer</h3><p>调用<a href="http://localhost:7004/hello/linjian" target="_blank" rel="noopener">http://localhost:7004/hello/linjian</a></p><p><a href="http://localhost:7004/helloFeign/linjian" target="_blank" rel="noopener">http://localhost:7004/helloFeign/linjian</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud ParentPom</title>
      <link href="/posts/33cf/"/>
      <url>/posts/33cf/</url>
      
        <content type="html"><![CDATA[<h3 id="parent-pom-xml"><a href="#parent-pom-xml" class="headerlink" title="parent pom.xml"></a>parent pom.xml</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.linjian&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-learn&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;spring-cloud-learn&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Project for Spring Cloud Learn&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;eureka-server&lt;/module&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">        &lt;!-- 文件拷贝时的编码 --&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;!-- 编译时的编码 --&gt;</span><br><span class="line">        &lt;maven.compiler.encoding&gt;UTF-8&lt;/maven.compiler.encoding&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Greenwich.SR1&lt;/spring-cloud.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependencyManagement&gt;</span><br><span class="line">       &lt;dependencies&gt;</span><br><span class="line">           &lt;dependency&gt;</span><br><span class="line">               &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">               &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">               &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">               &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">           &lt;/dependency&gt;</span><br><span class="line">       &lt;/dependencies&gt;</span><br><span class="line">   &lt;/dependencyManagement&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Hystrix</title>
      <link href="/posts/4511/"/>
      <url>/posts/4511/</url>
      
        <content type="html"><![CDATA[<p>断路器模式源于Martin Fowler的Circuit Breaker一文。“断路器”本身是一种开关装置，用于在电路上保护线路过载，当线路中有电器发生短路时，“断路器”能够及时的切断故障电路，防止发生过载、发热、甚至起火等严重后果。</p><a id="more"></a><p>在分布式架构中，断路器模式的作用也是类似的，当某个服务单元发生故障（类似用电器发生短路）之后，通过断路器的故障监控（类似熔断保险丝），直接切断原来的主逻辑调用。但是，在Hystrix中的断路器除了切断主逻辑的功能之外，还有更复杂的逻辑。</p><p>正常情况下，当整个服务环境中，某一个服务提供方由于网络原因、数据库原因或者性能原因等，造成响应很慢的话，调用方就有可能短时间内累计大量的请求线程，最终造成调用方down，甚至整个系统崩溃。而加入hystrix之后，如果hystrix发现某个服务的某台机器调用非常缓慢或者多次调用失败，就会短时间内把这条路断掉，所有的请求都不会再发到这台机器上。</p><p>如果某个服务所有的机器都挂了，hystrix会迅速失败，马上返回，保证被调用方不会有大量的线程堆积。</p><p>使用eureka时，当一个服务提供方挂掉以后，服务订阅者最长可能30s以后才知道，那这30s就会出现大量的调用失败。如果在系统里面集成了hystrix，就会马上把挂掉的这台服务提供方断路掉，让请求不再转发到这台机器上，大量减少调用失败。<br>hystrix执行断路操作以后，并不表示这条路就永远断了，而是会一定时间间隔内缓慢尝试去请求这条路，如果能请求成功，断路就会恢复。</p><p>有一点需要注意的是hystrix在做断路时，默认所有的调用请求都会放在一个的线程池中进行，线程池的作用很明显，有隔离性。比如gateway，集成了5个子业务系统，可能其中一个系统的调用量非常大，而另外四个系统的调用很小，如果没有线程池的话，显然第一个系统的大量调用会影响到后面四个系统的调用性能。hystrix的线程池和java标准线程池一样，可以配置一些参数：coreSize、maximumSize、maxQueueSize、queueSizeRejectionThreshold、allowMaximumSizeToDivergeFromCoreSize、keepAliveTimeMinutes等，如果某一个子系统的调用量突然激增，超过了线程池的容量，也会迅速失败，直接返回，起到降级和保护系统本身的作用。当然hystrix也支持非线程池的方式，在本地请求线程中做调用，即semaphore模式，官方不建议，除非系统qps真的很大。</p><h3 id="Hystrix案例"><a href="#Hystrix案例" class="headerlink" title="Hystrix案例"></a>Hystrix案例</h3><p>Feign默认集成了Hystrix。我们可以在上一个moudle service-consumer中增加熔断特性。</p><p>application.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#开启Hystrix</span><br><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure><p>FeignServiceHystrix.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.linjian.serviceconsumer.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FeignServiceHystrix</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jlin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/20 11:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignServiceHystrix</span> <span class="keyword">implements</span> <span class="title">FeignExampleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"sorry "</span> + name + <span class="string">"，service has fail!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FeignExampleService.java修改FeignClient增加fallback熔断处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.linjian.serviceconsumer.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FeignExampleService</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jlin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/20 10:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"service-producer"</span>, fallback = FeignServiceHystrix.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FeignExampleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(value = <span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Eureka-server</title>
      <link href="/posts/902c/"/>
      <url>/posts/902c/</url>
      
        <content type="html"><![CDATA[<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7001</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-server</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    #表示是否将自己注册到Eureka Server，默认为true。</span><br><span class="line">    register-with-eureka: false</span><br><span class="line">    #表示是否从Eureka Server获取注册信息，默认为true。</span><br><span class="line">    fetch-registry: false</span><br><span class="line">    service-url:</span><br><span class="line">          #设置与Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址。默认是http://localhost:8761/eureka ；多个地址可使用 , 分隔。</span><br><span class="line">          defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></pre></td></tr></table></figure><h3 id="启动类加上注释-EnableEurekaServer"><a href="#启动类加上注释-EnableEurekaServer" class="headerlink" title="启动类加上注释@EnableEurekaServer"></a>启动类加上注释<strong>@EnableEurekaServer</strong></h3>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Eureka-client</title>
      <link href="/posts/1282/"/>
      <url>/posts/1282/</url>
      
        <content type="html"><![CDATA[<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7002</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:7001/eureka/  #注册中心的地址</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-client  #服务的名字</span><br></pre></td></tr></table></figure><h3 id="启动类加上注解-EnableEurekaClient"><a href="#启动类加上注解-EnableEurekaClient" class="headerlink" title="启动类加上注解@EnableEurekaClient"></a>启动类加上注解<strong>@EnableEurekaClient</strong></h3>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Config-server</title>
      <link href="/posts/64fe/"/>
      <url>/posts/64fe/</url>
      
        <content type="html"><![CDATA[<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7006</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: config-server</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        git:</span><br><span class="line">          # 配置git仓库的地址</span><br><span class="line">          uri: https://github.com/Delena1988/spring-cloud-config-repo</span><br><span class="line">          # git仓库地址下的相对地址，可以配置多个，用,分割。</span><br><span class="line">          search-paths: /**</span><br><span class="line">          # git仓库的账号（私有库必填）</span><br><span class="line">          username:</span><br><span class="line">          # git仓库的密码（私有库必填）</span><br><span class="line">          password:</span><br><span class="line">      # 配置git仓库的分支</span><br><span class="line">      label: master</span><br></pre></td></tr></table></figure><h3 id="ConfigServerApplication-java"><a href="#ConfigServerApplication-java" class="headerlink" title="ConfigServerApplication.java"></a>ConfigServerApplication.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.linjian.configserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启配置服务器</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Github创建repository-spring-cloud-config-repo"><a href="#Github创建repository-spring-cloud-config-repo" class="headerlink" title="Github创建repository  spring-cloud-config-repo"></a>Github创建repository  spring-cloud-config-repo</h3><p>创建配置文件 </p><pre><code>spring-cloud-config-dev.ymlspring-cloud-config-test.ymlspring-cloud-config-pro.yml</code></pre><h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><ol><li><p>启动Config-server</p></li><li><p>访问 <a href="http://localhost:7006/master/spring-cloud-config-dev.yml" target="_blank" rel="noopener">http://localhost:7006/master/spring-cloud-config-dev.yml</a></p></li><li><p>访问 <a href="http://localhost:7006/master/spring-cloud-config-test.yml" target="_blank" rel="noopener">http://localhost:7006/master/spring-cloud-config-test.yml</a></p></li><li><p>访问 <a href="http://localhost:7006/master/spring-cloud-config-pro.yml" target="_blank" rel="noopener">http://localhost:7006/master/spring-cloud-config-pro.yml</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Config-client</title>
      <link href="/posts/e650/"/>
      <url>/posts/e650/</url>
      
        <content type="html"><![CDATA[<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7007</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: config-client</span><br></pre></td></tr></table></figure><h3 id="bootstrap-yml"><a href="#bootstrap-yml" class="headerlink" title="bootstrap.yml"></a>bootstrap.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      # 对应&#123;application&#125;部分</span><br><span class="line">      name: spring-cloud-config             </span><br><span class="line">      # 对应&#123;profile&#125;部分</span><br><span class="line">      profile: pro</span><br><span class="line">      # 配置中心的具体地址                         </span><br><span class="line">      uri: http://localhost:7006/          </span><br><span class="line">      # 对应git的分支。如果配置中心使用的是本地存储，则该参数无用</span><br><span class="line">      label: master                        </span><br><span class="line">      discovery:</span><br><span class="line">        # 指定配置中心的service-id，便于扩展为高可用配置集群。</span><br><span class="line">        service-id: config-server</span><br></pre></td></tr></table></figure><h3 id="ConfigClientController-java"><a href="#ConfigClientController-java" class="headerlink" title="ConfigClientController.java"></a>ConfigClientController.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.linjian.configclient.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ConfigClientController</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jlin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/20 14:42</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;environment&#125;"</span>)</span><br><span class="line">    String environment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/environment"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">environment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> environment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><ol><li><p>启动config-server、config-client</p></li><li><p>访问 <a href="http://localhost:7007/environment" target="_blank" rel="noopener">http://localhost:7007/environment</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Actuator</title>
      <link href="/posts/87d9/"/>
      <url>/posts/87d9/</url>
      
        <content type="html"><![CDATA[<p>动态刷新配置</p><a id="more"></a><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#关闭安全认证</span><br><span class="line">management:</span><br><span class="line">  #refresh接入点显式暴露出来</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: refresh,health,info</span><br></pre></td></tr></table></figure><p>给需要加载变量的<code>bean</code>上面加载<code>@RefreshScope</code>注解</p><p>客户端执行<code>/refresh</code>的时候就会更新此<code>bean</code>下面的变量值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:7007/actuator/refresh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot项目创建</title>
      <link href="/posts/9415/"/>
      <url>/posts/9415/</url>
      
        <content type="html"><![CDATA[<h3 id="new-project-选择spring-initializr"><a href="#new-project-选择spring-initializr" class="headerlink" title="new -project 选择spring initializr"></a>new -project 选择spring initializr</h3><a id="more"></a><p><img src="https://i.loli.net/2019/04/25/5cc130f5df1d2.jpg" alt="5cc130f5df1d2"></p><h3 id="创建自己的包名，类名"><a href="#创建自己的包名，类名" class="headerlink" title="创建自己的包名，类名"></a>创建自己的包名，类名</h3><p><img src="https://i.loli.net/2019/04/25/5cc1310603356.jpg" alt="5cc1310603356"></p><h3 id="选择需要加载的依赖"><a href="#选择需要加载的依赖" class="headerlink" title="选择需要加载的依赖"></a>选择需要加载的依赖</h3><p><img src="https://i.loli.net/2019/04/25/5cc131139925a.jpg" alt="5cc131139925a"></p><p><img src="https://i.loli.net/2019/04/25/5cc131280aae8.jpg" alt="5cc131280aae8"></p><h3 id="新建工程最后一步：修改工程名称（自行修改，也可默认不改）。点击Finish-完成新建工作。"><a href="#新建工程最后一步：修改工程名称（自行修改，也可默认不改）。点击Finish-完成新建工作。" class="headerlink" title="新建工程最后一步：修改工程名称（自行修改，也可默认不改）。点击Finish 完成新建工作。"></a>新建工程最后一步：修改工程名称（自行修改，也可默认不改）。点击Finish 完成新建工作。</h3><p><img src="https://i.loli.net/2019/04/25/5cc131355330a.jpg" alt="5cc131355330a"></p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">      xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line"> &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line"> &lt;groupId&gt;cn.joinhealth&lt;/groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;springboot-demo&lt;/artifactId&gt;</span><br><span class="line"> &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line"> &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line"> &lt;name&gt;springboot-demo&lt;/name&gt;</span><br><span class="line"> &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line"> &lt;parent&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;</span><br><span class="line">     &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line"> &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line"> &lt;properties&gt;</span><br><span class="line">     &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">     &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">     &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line"> &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line"> &lt;dependencies&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.liquibase&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;liquibase-core&lt;/artifactId&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">         &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">         &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;!-- 分页插件 --&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;1.2.5&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;!-- alibaba的druid数据库连接池 --&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;1.1.10&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;!--liquibase--&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.liquibase&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;liquibase-core&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;3.5.3&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;1.18.2&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line"> &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"> &lt;build&gt;</span><br><span class="line">     &lt;plugins&gt;</span><br><span class="line">         &lt;plugin&gt;</span><br><span class="line">             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">             &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">         &lt;/plugin&gt;</span><br><span class="line">         &lt;!-- mybatis generator 自动生成代码插件 --&gt;</span><br><span class="line">         &lt;plugin&gt;</span><br><span class="line">             &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">             &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">             &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">             &lt;configuration&gt;</span><br><span class="line">                 &lt;configurationFile&gt;$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml&lt;/configurationFile&gt;</span><br><span class="line">                 &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">                 &lt;verbose&gt;true&lt;/verbose&gt;</span><br><span class="line">             &lt;/configuration&gt;</span><br><span class="line">         &lt;/plugin&gt;</span><br><span class="line">     &lt;/plugins&gt;</span><br><span class="line"> &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line"> port: 8080</span><br><span class="line">spring:</span><br><span class="line"> datasource:</span><br><span class="line">   druid:</span><br><span class="line">     name: test</span><br><span class="line">     #206</span><br><span class="line">     url: jdbc:mysql://192.168.3.206:3306/springboot?useUnicode=true&amp;amp;characterEncoding=UTF-8</span><br><span class="line">     username: joinhealth</span><br><span class="line">     password: 123456</span><br><span class="line">     #localhost</span><br><span class="line">     #url: jdbc:mysql://localhost:3306/springboot?useUnicode=true&amp;amp;characterEncoding=UTF-8</span><br><span class="line">     #username: root</span><br><span class="line">     #password: 123456</span><br><span class="line">     # 使用druid数据源</span><br><span class="line">     type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">     driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">     filters: stat</span><br><span class="line">     maxActive: 20</span><br><span class="line">     initialSize: 1</span><br><span class="line">     maxWait: 60000</span><br><span class="line">     minIdle: 1</span><br><span class="line">     timeBetweenEvictionRunsMillis: 60000</span><br><span class="line">     minEvictableIdleTimeMillis: 300000</span><br><span class="line">     validationQuery: select &apos;x&apos;</span><br><span class="line">     testWhileIdle: true</span><br><span class="line">     testOnBorrow: false</span><br><span class="line">     testOnReturn: false</span><br><span class="line">     poolPreparedStatements: true</span><br><span class="line">     maxOpenPreparedStatements: 20</span><br><span class="line"> #liquibase</span><br><span class="line"> liquibase:</span><br><span class="line">   change-log: classpath:liquibase/master.xml</span><br><span class="line">   check-change-log-location: false</span><br><span class="line">   enabled: true</span><br><span class="line">## 该配置节点为独立的节点，有很多同学容易将这个配置放在spring的节点下，导致配置无法被识别</span><br><span class="line">mybatis:</span><br><span class="line">mapper-locations: classpath:mapping/*.xml  #注意：一定要对应mapper映射xml文件的所在路径</span><br><span class="line">type-aliases-package: cn.joinhealth.model  # 注意：对应实体类的路径</span><br><span class="line">#pagehelper分页插件</span><br><span class="line">pagehelper:</span><br><span class="line"> helperDialect: mysql</span><br><span class="line"> reasonable: true</span><br><span class="line"> supportMethodsArguments: true</span><br><span class="line"> params: count=countSql</span><br></pre></td></tr></table></figure><h3 id="mybatis-generator-generatorConfig-xml"><a href="#mybatis-generator-generatorConfig-xml" class="headerlink" title="mybatis-generator generatorConfig.xml"></a>mybatis-generator generatorConfig.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">     PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">     &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line"> &lt;!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包--&gt;</span><br><span class="line"> &lt;classPathEntry  location=&quot;/Users/linjian/Documents/maven/repository/mysql/mysql-connector-java/5.1.46/mysql-connector-java-5.1.46.jar&quot;/&gt;</span><br><span class="line"> &lt;context id=&quot;DB2Tables&quot;  targetRuntime=&quot;MyBatis3&quot;&gt;</span><br><span class="line">     &lt;commentGenerator&gt;</span><br><span class="line">         &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">         &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class="line">         &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">     &lt;/commentGenerator&gt;</span><br><span class="line">     &lt;!--数据库链接URL，用户名、密码 --&gt;</span><br><span class="line">     &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://192.168.3.206/springboot&quot; userId=&quot;joinhealth&quot; password=&quot;123456&quot;&gt;</span><br><span class="line">     &lt;/jdbcConnection&gt;</span><br><span class="line">     &lt;javaTypeResolver&gt;</span><br><span class="line">         &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">     &lt;/javaTypeResolver&gt;</span><br><span class="line">     &lt;!-- 生成模型的包名和位置--&gt;</span><br><span class="line">     &lt;javaModelGenerator targetPackage=&quot;cn.joinhealth.model&quot; targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">         &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">         &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">     &lt;/javaModelGenerator&gt;</span><br><span class="line">     &lt;!-- 生成映射文件的包名和位置--&gt;</span><br><span class="line">     &lt;sqlMapGenerator targetPackage=&quot;mapping&quot; targetProject=&quot;src/main/resources&quot;&gt;</span><br><span class="line">         &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">     &lt;/sqlMapGenerator&gt;</span><br><span class="line">     &lt;!-- 生成DAO的包名和位置--&gt;</span><br><span class="line">     &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;cn.joinhealth.mapper&quot; targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">         &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">     &lt;/javaClientGenerator&gt;</span><br><span class="line">     &lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;</span><br><span class="line">     &lt;table tableName=&quot;t_user&quot; domainObjectName=&quot;User&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt;</span><br><span class="line"> &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot线程池</title>
      <link href="/posts/206f/"/>
      <url>/posts/206f/</url>
      
        <content type="html"><![CDATA[<p>TaskPoolConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskPoolConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"taskExecutor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">taskExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">20</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">200</span>);</span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">"taskExecutor-"</span>);</span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ThreadPoolTaskExecutor taskExecutor;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成Swagger</title>
      <link href="/posts/a9e2/"/>
      <url>/posts/a9e2/</url>
      
        <content type="html"><![CDATA[<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- swagger生成接口API --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.7.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 接口API生成html文档 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.6.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="访问地址"><a href="#访问地址" class="headerlink" title="访问地址"></a>访问地址</h3><p><a href="http://localhost:8080/swagger-ui.html#/" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html#/</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成redis</title>
      <link href="/posts/beb3/"/>
      <url>/posts/beb3/</url>
      
        <content type="html"><![CDATA[<h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="RedisConfig-java"><a href="#RedisConfig-java" class="headerlink" title="RedisConfig.java"></a>RedisConfig.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RedisConfig</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jlin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/7 18:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(RedisAutoConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置自定义redisTemplate</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值</span></span><br><span class="line">        Jackson2JsonRedisSerializer serializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line"></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        serializer.setObjectMapper(mapper);</span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line">        <span class="comment">//使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setHashValueSerializer(serializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RedisTest-java-测试"><a href="#RedisTest-java-测试" class="headerlink" title="RedisTest.java 测试"></a>RedisTest.java 测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RedisTest</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jlin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/9 09:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"name"</span>, <span class="string">"林剑"</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"sex"</span>, <span class="string">"男"</span>);</span><br><span class="line">        User user1 = <span class="keyword">new</span> User();</span><br><span class="line">        user1.setUserId(<span class="number">1</span>);</span><br><span class="line">        user1.setUserName(<span class="string">"张三"</span>);</span><br><span class="line">        user1.setPassword(<span class="string">"123"</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User();</span><br><span class="line">        user2.setUserId(<span class="number">2</span>);</span><br><span class="line">        user2.setUserName(<span class="string">"李四"</span>);</span><br><span class="line">        user2.setPassword(<span class="string">"456"</span>);</span><br><span class="line">        redisTemplate.opsForHash().put(<span class="string">"user"</span>, String.valueOf(user1.getUserId()), user1);</span><br><span class="line">        redisTemplate.opsForHash().put(<span class="string">"user"</span>, String.valueOf(user2.getUserId()), user2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(JSON.toJSONString(redisTemplate.opsForHash().get(<span class="string">"user"</span>, <span class="string">"1"</span>)));</span><br><span class="line">        System.out.println(JSON.toJSONString(redisTemplate.opsForHash().get(<span class="string">"user"</span>, <span class="string">"2"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成mybatis-generator</title>
      <link href="/posts/c53d/"/>
      <url>/posts/c53d/</url>
      
        <content type="html"><![CDATA[<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;!-- mybatis generator 自动生成代码插件 --&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;!-- 指定配置文件路径 --&gt;</span><br><span class="line">                &lt;configurationFile&gt;$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml&lt;/configurationFile&gt;</span><br><span class="line">                &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">                &lt;verbose&gt;true&lt;/verbose&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><h3 id="mybatis-generator-generatorConfig-xml"><a href="#mybatis-generator-generatorConfig-xml" class="headerlink" title="mybatis-generator generatorConfig.xml"></a>mybatis-generator generatorConfig.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包--&gt;</span><br><span class="line">    &lt;classPathEntry  location=&quot;/Users/linjian/Documents/maven/repository/mysql/mysql-connector-java/5.1.46/mysql-connector-java-5.1.46.jar&quot;/&gt;</span><br><span class="line">    &lt;context id=&quot;DB2Tables&quot;  targetRuntime=&quot;MyBatis3&quot;&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class="line">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line">        &lt;!--数据库链接URL，用户名、密码 --&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://192.168.3.206/springboot&quot; userId=&quot;joinhealth&quot; password=&quot;123456&quot;&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/javaTypeResolver&gt;</span><br><span class="line">        &lt;!-- 生成模型的包名和位置--&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=&quot;cn.joinhealth.model&quot; targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/javaModelGenerator&gt;</span><br><span class="line">        &lt;!-- 生成映射文件的包名和位置--&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=&quot;mapping&quot; targetProject=&quot;src/main/resources&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/sqlMapGenerator&gt;</span><br><span class="line">        &lt;!-- 生成DAO的包名和位置--&gt;</span><br><span class="line">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;cn.joinhealth.mapper&quot; targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/javaClientGenerator&gt;</span><br><span class="line">        &lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;</span><br><span class="line">        &lt;table tableName=&quot;t_user&quot; domainObjectName=&quot;User&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt;</span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成liquibase</title>
      <link href="/posts/7773/"/>
      <url>/posts/7773/</url>
      
        <content type="html"><![CDATA[<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--liquibase--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.liquibase&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;liquibase-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#liquibase</span><br><span class="line">liquibase:</span><br><span class="line">    change-log: classpath:liquibase/master.xml</span><br><span class="line">    check-change-log-location: false</span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成Kafka</title>
      <link href="/posts/260e/"/>
      <url>/posts/260e/</url>
      
        <content type="html"><![CDATA[<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- kafka --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  kafka:</span><br><span class="line">    bootstrap-servers: 192.168.3.206:9002</span><br><span class="line">    consumer:</span><br><span class="line">      group-id: mygroup</span><br></pre></td></tr></table></figure><h3 id="提供者"><a href="#提供者" class="headerlink" title="提供者"></a>提供者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">providerTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        kafkaTemplate.send(<span class="string">"myTopic"</span>, <span class="string">"Test Message!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener</span>(topics = <span class="string">"myTopic"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(ConsumerRecord&lt;?, String&gt; record)</span> </span>&#123;</span><br><span class="line">        String value = record.value();</span><br><span class="line">        log.info(value);</span><br><span class="line">        log.info(JSON.toJSONString(record));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成elasticsearch</title>
      <link href="/posts/5e6e/"/>
      <url>/posts/5e6e/</url>
      
        <content type="html"><![CDATA[<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;!--实体工具包--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  data:</span><br><span class="line">    elasticsearch:</span><br><span class="line">      cluster-name: es-cluster</span><br><span class="line">      #配置es节点信息，逗号分隔，如果没有指定，则启动ClientNode（9200端口是http查询使用的。9300集群使用。这里使用9300.）</span><br><span class="line">      cluster-nodes: 127.0.0.1:9300</span><br><span class="line">      properties:</span><br><span class="line">        path:</span><br><span class="line">          #elasticsearch日志存储目录</span><br><span class="line">          logs: ./elasticsearch/log</span><br><span class="line">          #elasticsearch数据存储目录</span><br><span class="line">          data: ./elasticsearch/data</span><br></pre></td></tr></table></figure><h3 id="Country-java"><a href="#Country-java" class="headerlink" title="Country.java"></a>Country.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Country</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(searchAnalyzer = <span class="string">"ik_max_word"</span>,analyzer = <span class="string">"ik_smart"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CountrySearchRepository-java"><a href="#CountrySearchRepository-java" class="headerlink" title="CountrySearchRepository.java"></a>CountrySearchRepository.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CountrySearchRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Country</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试-EsDemoApplicationTests-java"><a href="#单元测试-EsDemoApplicationTests-java" class="headerlink" title="单元测试 EsDemoApplicationTests.java"></a>单元测试 EsDemoApplicationTests.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsDemoApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CountrySearchRepository countrySearchRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSaveCountryIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Country country = <span class="keyword">new</span> Country();</span><br><span class="line">        country.setId(<span class="number">1</span>);</span><br><span class="line">        country.setName(<span class="string">"China"</span>);</span><br><span class="line">        Country country2 = <span class="keyword">new</span> Country();</span><br><span class="line">        country2.setId(<span class="number">2</span>);</span><br><span class="line">        country2.setName(<span class="string">"America"</span>);</span><br><span class="line">        List&lt;Country&gt; countryList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        countryList.add(country);</span><br><span class="line">        countryList.add(country2);</span><br><span class="line">        countrySearchRepository.saveAll(countryList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//搜索关键字</span></span><br><span class="line">        String queryString = <span class="string">"china"</span>;</span><br><span class="line">        QueryStringQueryBuilder builder=<span class="keyword">new</span> QueryStringQueryBuilder(queryString);</span><br><span class="line">        Iterable&lt;Country&gt; searchResult = countrySearchRepository.search(builder);</span><br><span class="line">        Iterator&lt;Country&gt; iterator = searchResult.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成dubbo</title>
      <link href="/posts/4518/"/>
      <url>/posts/4518/</url>
      
        <content type="html"><![CDATA[<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--dubbo-springBoot依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--zookeeper依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.8&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.sgroschupf&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dubbo:</span><br><span class="line">  #应用配置，用于配置当前应用信息，不管该应用是提供者还是消费者。</span><br><span class="line">  application:           </span><br><span class="line">    name: Consumer</span><br><span class="line">  #注册中心配置，用于配置连接注册中心相关信息。</span><br><span class="line">  registry:                 </span><br><span class="line">    address: zookeeper://192.168.3.206:2181</span><br><span class="line">  #协议配置，用于配置提供服务的协议信息，协议由提供方指定，消费方被动接受。</span><br><span class="line">  protocol:     </span><br><span class="line">    name: dubbo</span><br><span class="line">    port: 20880</span><br><span class="line">  #服务暴露与发现消费所在的package      </span><br><span class="line">  scan: cn.joinhealth.hug.model.api.health</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Reference</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br></pre></td></tr></table></figure><h3 id="开启-EnableDubboConfiguration"><a href="#开启-EnableDubboConfiguration" class="headerlink" title="开启@EnableDubboConfiguration"></a>开启@EnableDubboConfiguration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubboConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboConsumerLauncher</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成Cache</title>
      <link href="/posts/d5fe/"/>
      <url>/posts/d5fe/</url>
      
        <content type="html"><![CDATA[<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- cache --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- ehcache --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ehcache&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="修改Application类，加入启用缓存的注解-EnableCaching"><a href="#修改Application类，加入启用缓存的注解-EnableCaching" class="headerlink" title="修改Application类，加入启用缓存的注解@EnableCaching"></a>修改Application类，加入启用缓存的注解@EnableCaching</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"cn.joinhealth.mapper"</span>)</span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"cn.joinhealth.*"</span>&#125;)</span><br><span class="line"><span class="meta">@EnableDubboConfiguration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cache:</span><br><span class="line">    type: ehcache</span><br><span class="line">    ehcache:</span><br><span class="line">      config: classpath:/ehcache.xml</span><br></pre></td></tr></table></figure><h3 id="ehcache-xml"><a href="#ehcache-xml" class="headerlink" title="ehcache.xml"></a>ehcache.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;ehcache&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        磁盘存储:将缓存中暂时不使用的对象,转移到硬盘,类似于Windows系统的虚拟内存</span><br><span class="line">        path:指定在硬盘上存储对象的路径</span><br><span class="line">        path可以配置的目录有：</span><br><span class="line">            user.home（用户的家目录）</span><br><span class="line">            user.dir（用户当前的工作目录）</span><br><span class="line">            java.io.tmpdir（默认的临时目录）</span><br><span class="line">            ehcache.disk.store.dir（ehcache的配置目录）</span><br><span class="line">            绝对路径（如：d:\\ehcache）</span><br><span class="line">        查看路径方法：String tmpDir = System.getProperty(&quot;java.io.tmpdir&quot;);</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;diskStore path=&quot;java.io.tmpdir&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">        defaultCache:默认的缓存配置信息,如果不加特殊说明,则所有对象按照此配置项处理</span><br><span class="line">        maxElementsInMemory:设置了缓存的上限,最多存储多少个记录对象</span><br><span class="line">        eternal:代表对象是否永不过期 (指定true则下面两项配置需为0无限期)</span><br><span class="line">        timeToIdleSeconds:最大的发呆时间 /秒</span><br><span class="line">        timeToLiveSeconds:最大的存活时间 /秒</span><br><span class="line">        overflowToDisk:是否允许对象被写入到磁盘</span><br><span class="line">        说明：下列配置自缓存建立起600秒(10分钟)有效 。</span><br><span class="line">        在有效的600秒(10分钟)内，如果连续120秒(2分钟)未访问缓存，则缓存失效。</span><br><span class="line">        就算有访问，也只会存活600秒。</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;defaultCache maxElementsInMemory=&quot;10000&quot; eternal=&quot;false&quot;</span><br><span class="line">                  timeToIdleSeconds=&quot;600&quot; timeToLiveSeconds=&quot;600&quot; overflowToDisk=&quot;true&quot; /&gt;</span><br><span class="line">    &lt;cache name=&quot;user&quot; maxElementsInMemory=&quot;10000&quot; eternal=&quot;false&quot;</span><br><span class="line">           timeToIdleSeconds=&quot;120&quot; timeToLiveSeconds=&quot;600&quot; overflowToDisk=&quot;true&quot; /&gt;</span><br><span class="line">&lt;/ehcache&gt;</span><br></pre></td></tr></table></figure><h3 id="UserServiceImpl-java"><a href="#UserServiceImpl-java" class="headerlink" title="UserServiceImpl.java"></a>UserServiceImpl.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.joinhealth.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.joinhealth.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> cn.joinhealth.model.User;</span><br><span class="line"><span class="keyword">import</span> cn.joinhealth.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CacheConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CacheEvict;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachePut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UserServiceImpl</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> linjian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/7/27 上午11:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="meta">@CacheConfig</span>(cacheNames = &#123;<span class="string">"user"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@CachePut</span>(key = <span class="string">"#user.userId"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页获取用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.listUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id获取用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Cacheable</span>(key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@CacheEvict</span>(key = <span class="string">"#id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        userMapper.deleteByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编辑用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@CachePut</span>(key = <span class="string">"#user.userId"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userMapper.updateByPrimaryKey(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot多环境配置</title>
      <link href="/posts/ae65/"/>
      <url>/posts/ae65/</url>
      
        <content type="html"><![CDATA[<h3 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h3><a id="more"></a><p>application.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br></pre></td></tr></table></figure><p>application-dev.yml application-prod.yml</p><p>打包运行： <code>java -jar xxx.jar --spring.profiles.active=prod</code></p><h3 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h3><p>@Value @Value(“${key}”) @Component @ConfigurationProperties</p><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>@Controller 处理http请求 @RestController @Controller + @ResponseBody @RequestMapping 配置URL映射 @PathVariable 获取url中的数据 @RequestParam 获取请求参数的值 @GetMapping @PostMapping</p><h3 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h3><p>@Valid</p><h3 id="AOP统一处理请求日志"><a href="#AOP统一处理请求日志" class="headerlink" title="AOP统一处理请求日志"></a>AOP统一处理请求日志</h3>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot logback配置</title>
      <link href="/posts/3fcd/"/>
      <url>/posts/3fcd/</url>
      
        <content type="html"><![CDATA[<h2 id="logback-test-xml"><a href="#logback-test-xml" class="headerlink" title="logback-test.xml"></a>logback-test.xml</h2><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;30 seconds&quot; debug=&quot;true&quot; packagingData=&quot;true&quot;&gt;</span><br><span class="line">    &lt;statusListener class=&quot;ch.qos.logback.core.status.OnConsoleStatusListener&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--&lt;include resource=&quot;org/springframework/boot/logging/logback/base.xml&quot;/&gt;--&gt;</span><br><span class="line">    &lt;contextName&gt;SpringBoot&lt;/contextName&gt;</span><br><span class="line">    &lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;</span><br><span class="line">    &lt;property name=&quot;LOG_NAME&quot; value=&quot;/home&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;LOG_PATH&quot; value=&quot;logs&quot;/&gt;</span><br><span class="line">    &lt;!--设置系统日志目录--&gt;</span><br><span class="line">    &lt;property name=&quot;APP_DIR&quot; value=&quot;SpringBoot&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">          说明：</span><br><span class="line">          1、日志级别及文件</span><br><span class="line">              日志记录采用分级记录，级别与日志文件名相对应，不同级别的日志信息记录到不同的日志文件中</span><br><span class="line">              例如：error级别记录到log_error_xxx.log或log_error.log（该文件为当前记录的日志文件），而log_error_xxx.log为归档日志，</span><br><span class="line">              日志文件按日期记录，同一天内，若日志文件大小等于或大于2M，则按0、1、2...顺序分别命名</span><br><span class="line">              例如log-level-2013-12-21.0.log</span><br><span class="line">              其它级别的日志也是如此。</span><br><span class="line">          2、文件路径</span><br><span class="line">              若开发、测试用，在Eclipse中运行项目，则到Eclipse的安装路径查找logs文件夹，以相对路径../logs。</span><br><span class="line">              若部署到Tomcat下，则在Tomcat下的logs文件中</span><br><span class="line">          3、Appender</span><br><span class="line">              FILE_ERROR对应error级别，文件名以log-error-xxx.log形式命名</span><br><span class="line">              FILE_WARN对应warn级别，文件名以log-warn-xxx.log形式命名</span><br><span class="line">              FILE_INFO对应info级别，文件名以log-info-xxx.log形式命名</span><br><span class="line">              FILEDEBUG对应debug级别，文件名以log-debug-xxx.log形式命名</span><br><span class="line">              CONSOLE将日志信息输出到控制上，为方便开发测试使用</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,,,, --&gt;</span><br><span class="line">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;!--&lt;pattern&gt;%d %p (%file:%line\)- %m%n&lt;/pattern&gt;--&gt;</span><br><span class="line">            &lt;!--格式化输出：%d:表示日期    %thread:表示线程名     %-5level:级别从左显示5个字符宽度  %msg:日志消息    %n:是换行符--&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger - %msg%n&lt;/pattern&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    &lt;!-- 日志记录器，日期滚动记录 --&gt;</span><br><span class="line">    &lt;appender name=&quot;FILE_ERROR&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br><span class="line">        &lt;file&gt;$&#123;LOG_PATH&#125;/$&#123;APP_DIR&#125;/log_error.log&lt;/file&gt;</span><br><span class="line">        &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。</span><br><span class="line">            而2013-12-21的日志文件在由fileNamePattern指定。%d&#123;yyyy-MM-dd&#125;指定日期格式，%i指定索引 --&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;LOG_PATH&#125;/$&#123;APP_DIR&#125;/error/log-error-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;/fileNamePattern&gt;</span><br><span class="line">            &lt;!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始，</span><br><span class="line">            命名日志文件，例如log-error-2013-12-21.0.log --&gt;</span><br><span class="line">            &lt;maxFileSize&gt;50MB&lt;/maxFileSize&gt;</span><br><span class="line">            &lt;maxHistory&gt;30&lt;/maxHistory&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">        &lt;!-- 追加方式记录日志 --&gt;</span><br><span class="line">        &lt;append&gt;true&lt;/append&gt;</span><br><span class="line">        &lt;!-- 日志文件的格式 --&gt;</span><br><span class="line">        &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;</span><br><span class="line">            &lt;pattern&gt;===%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %logger Line:%-3L - %msg%n&lt;/pattern&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">        &lt;!-- 此日志文件只记录info级别的 --&gt;</span><br><span class="line">        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;error&lt;/level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    &lt;!-- 日志记录器，日期滚动记录 --&gt;</span><br><span class="line">    &lt;appender name=&quot;FILE_WARN&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br><span class="line">        &lt;file&gt;$&#123;LOG_PATH&#125;/$&#123;APP_DIR&#125;/log_warn.log&lt;/file&gt;</span><br><span class="line">        &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。</span><br><span class="line">            而2013-12-21的日志文件在由fileNamePattern指定。%d&#123;yyyy-MM-dd&#125;指定日期格式，%i指定索引 --&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;LOG_PATH&#125;/$&#123;APP_DIR&#125;/warn/log-warn-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;/fileNamePattern&gt;</span><br><span class="line">            &lt;!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始，</span><br><span class="line">            命名日志文件，例如log-error-2013-12-21.0.log --&gt;</span><br><span class="line">            &lt;maxFileSize&gt;50MB&lt;/maxFileSize&gt;</span><br><span class="line">            &lt;maxHistory&gt;30&lt;/maxHistory&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">        &lt;!-- 追加方式记录日志 --&gt;</span><br><span class="line">        &lt;append&gt;true&lt;/append&gt;</span><br><span class="line">        &lt;!-- 日志文件的格式 --&gt;</span><br><span class="line">        &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;</span><br><span class="line">            &lt;pattern&gt;===%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %logger Line:%-3L - %msg%n&lt;/pattern&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">        &lt;!-- 此日志文件只记录info级别的 --&gt;</span><br><span class="line">        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;warn&lt;/level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    &lt;!-- 日志记录器，日期滚动记录 --&gt;</span><br><span class="line">    &lt;appender name=&quot;FILE_INFO&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br><span class="line">        &lt;file&gt;$&#123;LOG_PATH&#125;/$&#123;APP_DIR&#125;/log_info.log&lt;/file&gt;</span><br><span class="line">        &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。</span><br><span class="line">            而2013-12-21的日志文件在由fileNamePattern指定。%d&#123;yyyy-MM-dd&#125;指定日期格式，%i指定索引 --&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;LOG_PATH&#125;/$&#123;APP_DIR&#125;/info/log-info-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;/fileNamePattern&gt;</span><br><span class="line">            &lt;!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始，</span><br><span class="line">            命名日志文件，例如log-error-2013-12-21.0.log --&gt;</span><br><span class="line">            &lt;maxFileSize&gt;50MB&lt;/maxFileSize&gt;</span><br><span class="line">            &lt;maxHistory&gt;30&lt;/maxHistory&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">        &lt;!-- 追加方式记录日志 --&gt;</span><br><span class="line">        &lt;append&gt;true&lt;/append&gt;</span><br><span class="line">        &lt;!-- 日志文件的格式 --&gt;</span><br><span class="line">        &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;</span><br><span class="line">            &lt;pattern&gt;===%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %logger Line:%-3L - %msg%n&lt;/pattern&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">        &lt;!-- 此日志文件只记录info级别的 --&gt;</span><br><span class="line">        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;info&lt;/level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    &lt;!--日志异步到数据库  --&gt;</span><br><span class="line">    &lt;appender name=&quot;DBAPPENDER&quot; class=&quot;ch.qos.logback.classic.db.DBAppender&quot;&gt;</span><br><span class="line">        &lt;connectionSource class=&quot;ch.qos.logback.core.db.DataSourceConnectionSource&quot;&gt;</span><br><span class="line">            &lt;dataSource class=&quot;com.zaxxer.hikari.HikariDataSource&quot;&gt;</span><br><span class="line">                &lt;driverClassName&gt;com.mysql.jdbc.Driver&lt;/driverClassName&gt;</span><br><span class="line">                &lt;jdbcUrl&gt;jdbc:mysql://192.168.3.206:3306/logback?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;useSSL=false&lt;/jdbcUrl&gt;</span><br><span class="line">                &lt;username&gt;joinhealth&lt;/username&gt;</span><br><span class="line">                &lt;password&gt;123456&lt;/password&gt;</span><br><span class="line">                &lt;poolName&gt;HikariPool-logback&lt;/poolName&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/connectionSource&gt;</span><br><span class="line">        &lt;!-- 此日志文件只记录info级别的 --&gt;</span><br><span class="line">        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;warn&lt;/level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">        &lt;!-- 此日志文件只记录info级别的 --&gt;</span><br><span class="line">        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;error&lt;/level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    &lt;appender name=&quot;CONSOLE&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %logger Line:%-3L - %msg%n&lt;/pattern&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;logger name=&quot;cn.joinhealth&quot; level=&quot;DEBUG&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;org.springframework.data.mybatis&quot; level=&quot;DEBUG&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;org.springframework.aop.aspectj&quot; level=&quot;ERROR&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;logger name=&quot;javax.activation&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;javax.mail&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;javax.xml.bind&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;ch.qos.logback&quot; level=&quot;INFO&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;com.codahale.metrics&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;com.ryantenney&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;com.sun&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;com.zaxxer&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;io.undertow&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;net.sf.ehcache&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;org.apache&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;org.apache.catalina.startup.DigesterFactory&quot; level=&quot;OFF&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;org.bson&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;org.hibernate.validator&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;org.hibernate&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;org.hibernate.ejb.HibernatePersistence&quot; level=&quot;OFF&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;org.springframework.web&quot; level=&quot;INFO&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;org.springframework.security&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;org.springframework.cache&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;org.thymeleaf&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;org.xnio&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;springfox&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;sun.rmi&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;liquibase&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;sun.rmi.transport&quot; level=&quot;WARN&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;logger name=&quot;jdbc.connection&quot; level=&quot;ERROR&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;jdbc.resultset&quot; level=&quot;ERROR&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;jdbc.resultsettable&quot; level=&quot;INFO&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;jdbc.audit&quot; level=&quot;ERROR&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;jdbc.sqltiming&quot; level=&quot;ERROR&quot;/&gt;</span><br><span class="line">    &lt;logger name=&quot;jdbc.sqlonly&quot; level=&quot;INFO&quot;/&gt;</span><br><span class="line">    &lt;!--&lt;contextListener class=&quot;ch.qos.logback.classic.jul.LevelChangePropagator&quot;&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;resetJUL&gt;true&lt;/resetJUL&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;/contextListener&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;springProfile name=&quot;production&quot;&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;root level=&quot;DEBUG&quot;&gt;--&gt;</span><br><span class="line">    &lt;!--&amp;lt;!&amp;ndash;&lt;appender-ref ref=&quot;FILE_ERROR&quot;/&gt;&amp;ndash;&amp;gt;--&gt;</span><br><span class="line">    &lt;!--&amp;lt;!&amp;ndash;&lt;appender-ref ref=&quot;FILE_WARN&quot;/&gt;&amp;ndash;&amp;gt;--&gt;</span><br><span class="line">    &lt;!--&amp;lt;!&amp;ndash;&lt;appender-ref ref=&quot;FILE_INFO&quot;/&gt;&amp;ndash;&amp;gt;--&gt;</span><br><span class="line">    &lt;!--&amp;lt;!&amp;ndash;&lt;appender-ref ref=&quot;DBAPPENDER&quot;/&gt;&amp;ndash;&amp;gt;--&gt;</span><br><span class="line">    &lt;!--&lt;appender-ref ref=&quot;STDOUT&quot;/&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;/root&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;/springProfile&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;springProfile name=&quot;dev&quot;&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;root level=&quot;DEBUG&quot;&gt;--&gt;</span><br><span class="line">    &lt;!--&amp;lt;!&amp;ndash;&lt;appender-ref ref=&quot;FILE_ERROR&quot;/&gt;&amp;ndash;&amp;gt;--&gt;</span><br><span class="line">    &lt;!--&amp;lt;!&amp;ndash;&lt;appender-ref ref=&quot;FILE_WARN&quot;/&gt;&amp;ndash;&amp;gt;--&gt;</span><br><span class="line">    &lt;!--&amp;lt;!&amp;ndash;&lt;appender-ref ref=&quot;FILE_INFO&quot;/&gt;&amp;ndash;&amp;gt;--&gt;</span><br><span class="line">    &lt;!--&amp;lt;!&amp;ndash;&lt;appender-ref ref=&quot;DBAPPENDER&quot;/&gt;&amp;ndash;&amp;gt;--&gt;</span><br><span class="line">    &lt;!--&lt;appender-ref ref=&quot;CONSOLE&quot;/&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;/root&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;/springProfile&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root level=&quot;INFO&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;FILE_ERROR&quot;/&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;FILE_WARN&quot;/&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;FILE_INFO&quot;/&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMvc配置jsp、html两个视图解析器</title>
      <link href="/posts/27a7/"/>
      <url>/posts/27a7/</url>
      
        <content type="html"><![CDATA[<h3 id="继承InternalResourceView，写解析类"><a href="#继承InternalResourceView，写解析类" class="headerlink" title="继承InternalResourceView，写解析类"></a>继承InternalResourceView，写解析类</h3><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.joinhealth.interview.web.root.resolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.InternalResourceView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HtmlResourceView</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jlin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/11 09:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlResourceView</span> <span class="keyword">extends</span> <span class="title">InternalResourceView</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkResource</span><span class="params">(Locale locale)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">"/"</span>) + getUrl());</span><br><span class="line">        <span class="keyword">return</span> file.exists();<span class="comment">// 判断该页面是否存在</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置xml"><a href="#配置xml" class="headerlink" title="配置xml"></a>配置xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 定义JSP文件的位置 --&gt;</span><br><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;order&quot; value=&quot;1&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;prefix&quot; value=&quot;/&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 定义HTML文件的位置 --&gt;</span><br><span class="line">&lt;bean id=&quot;htmlviewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;viewClass&quot; value=&quot;cn.joinhealth.interview.web.root.resolver.HtmlResourceView&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;order&quot; value=&quot;0&quot; /&gt;</span><br><span class="line">    &lt;!-- 前缀 --&gt;</span><br><span class="line">    &lt;property name=&quot;prefix&quot; value=&quot;/&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;suffix&quot; value=&quot;.html&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC的WebArgumentResolver注入当前登录用户</title>
      <link href="/posts/eaed/"/>
      <url>/posts/eaed/</url>
      
        <content type="html"><![CDATA[<p>UserArgumentResolver.java</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.joinhealth.interview.web.root.resolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.joinhealth.interview.common.core.constant.SystemConstant;</span><br><span class="line"><span class="keyword">import</span> cn.joinhealth.interview.<span class="keyword">module</span>.manage.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.MethodParameter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.support.WebArgumentResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.NativeWebRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UserArgumentResolver</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jlin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/4/3 14:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserArgumentResolver</span> <span class="keyword">implements</span> <span class="title">WebArgumentResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter methodParameter, NativeWebRequest nativeWebRequest)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (methodParameter.getParameterType() != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; methodParameter.getParameterType().equals(User.class)) &#123;</span><br><span class="line">            <span class="comment">// 判断controller方法参数有没有写当前用户，如果有，这里返回即可，通常我们从session里面取出来</span></span><br><span class="line">            HttpServletRequest request = nativeWebRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class="line">            Object currentUser = request.getSession().getAttribute(SystemConstant.CLOUD_FOLLOWUP_KEY);</span><br><span class="line">            <span class="keyword">return</span> currentUser;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> UNRESOLVED;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring-mvc.xml</p><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"list"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleResult <span class="title">list</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    SimpleResult result = <span class="keyword">new</span> SimpleResult();</span><br><span class="line">    result.addModel(<span class="string">"permissionList"</span>, permissionService.list(user.getHospCode()));</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC+FastJson 自定义日期转换器</title>
      <link href="/posts/bc49/"/>
      <url>/posts/bc49/</url>
      
        <content type="html"><![CDATA[<p>对于有的时候要输出日期格式为yyyy-MM-dd，而有的时候要输出yyyy-MM-dd hh:mm:ss时怎么办？</p><a id="more"></a><p><strong>第一种方案：纯注解式， 对日期类型的字段进行注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JSONField</span>(format = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line"><span class="keyword">private</span> Date updateDate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JSONField</span>(format = <span class="string">"yyyy-MM-dd hh:mm:ss"</span>)</span><br><span class="line"><span class="keyword">private</span> Date createDate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getUpdateDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> updateDate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateDate</span><span class="params">(Date updateDate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.updateDate = updateDate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateDate</span><span class="params">(Date createDate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.createDate = createDate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getCreateDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二种方案：使用fastjson的WriteDateUseDateFormat配置（使得返回的日期类型默认为yyyy-MM-dd hh:mm:ss）, 特殊类型使用字段@JSONField来进行控制</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping --&gt;</span><br><span class="line">&lt;mvc:annotation-driven content-negotiation-manager="contentNegotiationManager"&gt;</span><br><span class="line">   &lt;mvc:message-converters register-defaults="true"&gt;</span><br><span class="line">      &lt;!-- 将Jackson2HttpMessageConverter的默认格式化输出为true --&gt;</span><br><span class="line">      &lt;!-- 配置Fastjson支持 --&gt;</span><br><span class="line">      &lt;bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter"&gt;</span><br><span class="line">         &lt;property name="supportedMediaTypes"&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">               &lt;value&gt;text/html;charset=UTF-8&lt;/value&gt;</span><br><span class="line">               &lt;value&gt;application/json&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">         &lt;/property&gt;</span><br><span class="line">         &lt;property name="features"&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">               &lt;!-- 输出key时是否使用双引号 --&gt;</span><br><span class="line">               &lt;value&gt;QuoteFieldNames&lt;/value&gt;</span><br><span class="line">               &lt;!-- 是否输出值为null的字段 --&gt;</span><br><span class="line">               &lt;!-- &lt;value&gt;WriteMapNullValue&lt;/value&gt; --&gt;</span><br><span class="line">               &lt;!-- 数值字段如果为null,输出为0,而非null --&gt;</span><br><span class="line">               &lt;value&gt;WriteNullNumberAsZero&lt;/value&gt;</span><br><span class="line">               &lt;!-- List字段如果为null,输出为[],而非null --&gt;</span><br><span class="line">               &lt;value&gt;WriteNullListAsEmpty&lt;/value&gt;</span><br><span class="line">               &lt;!-- 字符类型字段如果为null,输出为"",而非null --&gt;</span><br><span class="line">               &lt;value&gt;WriteNullStringAsEmpty&lt;/value&gt;</span><br><span class="line">               &lt;!-- Boolean字段如果为null,输出为false,而非null --&gt;</span><br><span class="line">               &lt;value&gt;WriteNullBooleanAsFalse&lt;/value&gt;</span><br><span class="line">               &lt;!-- null String不输出  --&gt;</span><br><span class="line">               &lt;value&gt;WriteNullStringAsEmpty&lt;/value&gt;</span><br><span class="line">               &lt;!-- null String也要输出  --&gt;</span><br><span class="line">               &lt;!-- &lt;value&gt;WriteMapNullValue&lt;/value&gt; --&gt;</span><br><span class="line"></span><br><span class="line">               &lt;!-- Date的日期转换器 --&gt;</span><br><span class="line">               &lt;value&gt;WriteDateUseDateFormat&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">         &lt;/property&gt;</span><br><span class="line">      &lt;/bean&gt;</span><br><span class="line">   &lt;/mvc:message-converters&gt;</span><br><span class="line">&lt;/mvc:annotation-driven&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- REST中根据URL后缀自动判定Content-Type及相应的View --&gt;</span><br><span class="line">&lt;bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean"&gt;</span><br><span class="line">   &lt;property name="mediaTypes" &gt;</span><br><span class="line">      &lt;map&gt;</span><br><span class="line">         &lt;entry key="json" value="application/json"/&gt;</span><br><span class="line">      &lt;/map&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">   &lt;!-- 这里是否忽略掉accept header，默认就是false --&gt;</span><br><span class="line">   &lt;property name="ignoreAcceptHeader" value="true"/&gt;</span><br><span class="line">   &lt;property name="favorPathExtension" value="true"/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JSONField</span>(format = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line"><span class="keyword">private</span> Date updateDate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getUpdateDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> updateDate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateDate</span><span class="params">(Date updateDate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.updateDate = updateDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第三种方案：使用FastJson的消息转换器， 特殊类型使用字段@JSONField来进行控制</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializeConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SimpleDateFormatSerializer;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpOutputMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageNotWritableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果没有注入默认的日期格式，也没有配置&lt;value&gt;WriteDateUseDateFormat&lt;/value&gt;, 也没有属性注解<span class="doctag">@JSONField</span>(format="yyyy-MM-dd hh:mm:ss") 则会转换输出时间戳</span></span><br><span class="line"><span class="comment"> * 如果只配置&lt;value&gt;WriteDateUseDateFormat&lt;/value&gt;，则会转换输出yyyy-MM-dd hh:mm:ss</span></span><br><span class="line"><span class="comment"> * 配置&lt;value&gt;WriteDateUseDateFormat&lt;/value&gt;, 属性注解<span class="doctag">@JSONField</span>(format="yyyy-MM-dd hh:mm:ss") 则会转换输出为属性注解的格式</span></span><br><span class="line"><span class="comment"> * 如果注入了默认的日期格式，属性注解<span class="doctag">@JSONField</span>(format="yyyy-MM-dd hh:mm:ss") 则会转换输出为属性注解的格式</span></span><br><span class="line"><span class="comment"> * 如果注入了默认的日期格式，则会转换输出为默认的日期格式</span></span><br><span class="line"><span class="comment"> * 如果三者都配置则会转换成属性注解的格式</span></span><br><span class="line"><span class="comment"> * Created by PETER on 2016/2/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerFastJsonHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">FastJsonHttpMessageConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SerializeConfig mapping = <span class="keyword">new</span> SerializeConfig();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String defaultDateFormat;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeInternal</span><span class="params">(Object obj, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line">        OutputStream out = outputMessage.getBody();</span><br><span class="line">        String text = JSON.toJSONString(obj, mapping, <span class="keyword">super</span>.getFeatures());</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = text.getBytes(getCharset());</span><br><span class="line">        out.write(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDefaultDateFormat</span><span class="params">(String defaultDateFormat)</span> </span>&#123;</span><br><span class="line">        mapping.put(java.util.Date.class, <span class="keyword">new</span> SimpleDateFormatSerializer(defaultDateFormat));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans" </span><br><span class="line">      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="line">      xmlns:context="http://www.springframework.org/schema/context" </span><br><span class="line">      xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"</span><br><span class="line">      xmlns:mvc="http://www.springframework.org/schema/mvc"</span><br><span class="line">      xsi:schemaLocation="</span><br><span class="line">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span><br><span class="line">      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span><br><span class="line">      http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span><br><span class="line">      http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"&gt;</span><br><span class="line"></span><br><span class="line">   &lt;description&gt;Spring MVC Configuration&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 加载配置属性文件 --&gt;</span><br><span class="line">   &lt;context:property-placeholder ignore-unresolvable="true" location="classpath:/xmutca.properties" /&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 扫描dubbo注解需要在controller之前，否则会造成无法注入的问题 --&gt;</span><br><span class="line">   &lt;dubbo:annotation package="com.xmutca"&gt;&lt;/dubbo:annotation&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 使用Annotation自动注册Bean,只扫描@Controller --&gt;</span><br><span class="line">   &lt;context:component-scan base-package="com.xmutca" use-default-filters="false"&gt;</span><br><span class="line">      &lt;!-- base-package 如果多个，用“,”分隔 --&gt;</span><br><span class="line">      &lt;context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/&gt;</span><br><span class="line">   &lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping --&gt;</span><br><span class="line">   &lt;mvc:annotation-driven content-negotiation-manager="contentNegotiationManager"&gt;</span><br><span class="line">      &lt;mvc:message-converters register-defaults="true"&gt;</span><br><span class="line">         &lt;!-- 将Jackson2HttpMessageConverter的默认格式化输出为true --&gt;</span><br><span class="line">         &lt;!-- 配置Fastjson支持 --&gt;</span><br><span class="line">         &lt;bean class="com.ydyx.core.web.converter.CustomerFastJsonHttpMessageConverter"&gt;</span><br><span class="line">            &lt;property name="supportedMediaTypes"&gt;</span><br><span class="line">               &lt;list&gt;</span><br><span class="line">                  &lt;value&gt;text/html;charset=UTF-8&lt;/value&gt;</span><br><span class="line">                  &lt;value&gt;application/json&lt;/value&gt;</span><br><span class="line">               &lt;/list&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">            &lt;property name="features"&gt;</span><br><span class="line">               &lt;list&gt;</span><br><span class="line">                  &lt;!-- 输出key时是否使用双引号 --&gt;</span><br><span class="line">                  &lt;value&gt;QuoteFieldNames&lt;/value&gt;</span><br><span class="line">                  &lt;!-- 是否输出值为null的字段 --&gt;</span><br><span class="line">                  &lt;!-- &lt;value&gt;WriteMapNullValue&lt;/value&gt; --&gt;</span><br><span class="line">                  &lt;!-- 数值字段如果为null,输出为0,而非null --&gt;</span><br><span class="line">                  &lt;value&gt;WriteNullNumberAsZero&lt;/value&gt;</span><br><span class="line">                  &lt;!-- List字段如果为null,输出为[],而非null --&gt;</span><br><span class="line">                  &lt;value&gt;WriteNullListAsEmpty&lt;/value&gt;</span><br><span class="line">                  &lt;!-- 字符类型字段如果为null,输出为"",而非null --&gt;</span><br><span class="line">                  &lt;value&gt;WriteNullStringAsEmpty&lt;/value&gt;</span><br><span class="line">                  &lt;!-- Boolean字段如果为null,输出为false,而非null --&gt;</span><br><span class="line">                  &lt;value&gt;WriteNullBooleanAsFalse&lt;/value&gt;</span><br><span class="line">                  &lt;!-- null String不输出  --&gt;</span><br><span class="line">                  &lt;value&gt;WriteNullStringAsEmpty&lt;/value&gt;</span><br><span class="line">                  &lt;!-- null String也要输出  --&gt;</span><br><span class="line">                  &lt;!-- &lt;value&gt;WriteMapNullValue&lt;/value&gt; --&gt;</span><br><span class="line">               &lt;/list&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">            &lt;property name="defaultDateFormat" value="yyyy-MM-dd"&gt;&lt;/property&gt;</span><br><span class="line">         &lt;/bean&gt;</span><br><span class="line">      &lt;/mvc:message-converters&gt;</span><br><span class="line">   &lt;/mvc:annotation-driven&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- REST中根据URL后缀自动判定Content-Type及相应的View --&gt;</span><br><span class="line">   &lt;bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean"&gt;</span><br><span class="line">      &lt;property name="mediaTypes" &gt;</span><br><span class="line">         &lt;map&gt;</span><br><span class="line">            &lt;entry key="json" value="application/json"/&gt;</span><br><span class="line">         &lt;/map&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line">      &lt;!-- 这里是否忽略掉accept header，默认就是false --&gt;</span><br><span class="line">      &lt;property name="ignoreAcceptHeader" value="true"/&gt;</span><br><span class="line">      &lt;property name="favorPathExtension" value="true"/&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 视图文件解析配置 --&gt;</span><br><span class="line">   &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;</span><br><span class="line">      &lt;property name="prefix" value="$&#123;web.view.prefix&#125;"/&gt;</span><br><span class="line">      &lt;property name="suffix" value="$&#123;web.view.suffix&#125;"/&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 --&gt;</span><br><span class="line">   &lt;mvc:default-servlet-handler/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 定义无Controller的path&lt;-&gt;view直接映射 --&gt;</span><br><span class="line">   &lt;mvc:view-controller path="/" view-name="redirect:$&#123;web.view.index&#125;"/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 基于注解式子的异常处理 --&gt;</span><br><span class="line">   &lt;bean id="exceptionHandlerExceptionResolver" class="org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver"&gt;&lt;/bean&gt;</span><br><span class="line">   &lt;!-- Shiro end --&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 上传文件拦截，设置最大上传文件大小   10M=10*1024*1024(B)=10485760 bytes --&gt;</span><br><span class="line">   &lt;bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"&gt;</span><br><span class="line">      &lt;property name="maxUploadSize" value="$&#123;web.maxUploadSize&#125;" /&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><strong>第四种方案：使用SpringMVC的自定义属性编辑器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@InitBinder</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// String类型转换，将所有传递进来的String进行前后空格处理， null字符串处理</span></span><br><span class="line">    binder.registerCustomEditor(String.class, <span class="keyword">new</span> PropertyEditorSupport() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAsText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">            setValue(text == <span class="keyword">null</span> ? <span class="keyword">null</span> : text.trim());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getAsText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Object value = getValue();</span><br><span class="line">            <span class="keyword">return</span> value != <span class="keyword">null</span> ? value.toString() : <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Date 类型转换</span></span><br><span class="line">    binder.registerCustomEditor(Date.class, <span class="keyword">new</span> PropertyEditorSupport() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAsText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">            setValue(DateUtils.parseDate(text));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getAsText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Date date = (Date) getValue();</span><br><span class="line">            <span class="keyword">return</span> DateUtils.formatDate(date, <span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DateUtils源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.time.DateFormatUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期工具类, 继承org.apache.commons.lang.time.DateUtils类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtils</span> <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">commons</span>.<span class="title">lang3</span>.<span class="title">time</span>.<span class="title">DateUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String[] parsePatterns = &#123; <span class="string">"yyyy-MM-dd"</span>,</span><br><span class="line">         <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, <span class="string">"yyyy-MM-dd HH:mm"</span>, <span class="string">"yyyy/MM/dd"</span>,</span><br><span class="line">         <span class="string">"yyyy/MM/dd HH:mm:ss"</span>, <span class="string">"yyyy/MM/dd HH:mm"</span> ,<span class="string">"yyyyMMdd"</span>&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 得到当前日期字符串 格式（yyyy-MM-dd）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> getDate(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 得到当前日期字符串 格式（yyyy-MM-dd） pattern可以为："yyyy-MM-dd" "HH:mm:ss" "E"</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDate</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> DateFormatUtils.format(<span class="keyword">new</span> Date(), pattern);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 得到日期字符串 默认格式（yyyy-MM-dd） pattern可以为："yyyy-MM-dd" "HH:mm:ss" "E"</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatDate</span><span class="params">(Date date, Object... pattern)</span> </span>&#123;</span><br><span class="line">      String formatDate = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (pattern != <span class="keyword">null</span> &amp;&amp; pattern.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         formatDate = DateFormatUtils.format(date, pattern[<span class="number">0</span>].toString());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         formatDate = DateFormatUtils.format(date, <span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> formatDate;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 得到日期时间字符串，转换格式（yyyy-MM-dd HH:mm:ss）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatDateTime</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> formatDate(date, <span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 得到当前时间字符串 格式（HH:mm:ss）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> formatDate(<span class="keyword">new</span> Date(), <span class="string">"HH:mm:ss"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 得到当前日期和时间字符串 格式（yyyy-MM-dd HH:mm:ss）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> formatDate(<span class="keyword">new</span> Date(), <span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 得到当前年份字符串 格式（yyyy）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getYear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> formatDate(<span class="keyword">new</span> Date(), <span class="string">"yyyy"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 得到当前月份字符串 格式（MM）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMonth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> formatDate(<span class="keyword">new</span> Date(), <span class="string">"MM"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 得到当天字符串 格式（dd）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> formatDate(<span class="keyword">new</span> Date(), <span class="string">"dd"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 得到当前星期字符串 格式（E）星期几</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getWeek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> formatDate(<span class="keyword">new</span> Date(), <span class="string">"E"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 日期型字符串转化为日期 格式 &#123; "yyyy-MM-dd", "yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm",</span></span><br><span class="line"><span class="comment">    * "yyyy/MM/dd", "yyyy/MM/dd HH:mm:ss", "yyyy/MM/dd HH:mm", "yyyyMMdd" &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parseDate</span><span class="params">(Object str)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> parseDate(str.toString(), parsePatterns);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取过去的天数</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">pastDays</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">long</span> t = <span class="keyword">new</span> Date().getTime() - date.getTime();</span><br><span class="line">      <span class="keyword">return</span> t / (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取过去的小时</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">pastHour</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">long</span> t = <span class="keyword">new</span> Date().getTime()-date.getTime();</span><br><span class="line">      <span class="keyword">return</span> t/(<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取过去的分钟</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">pastMinutes</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">long</span> t = <span class="keyword">new</span> Date().getTime()-date.getTime();</span><br><span class="line">      <span class="keyword">return</span> t/(<span class="number">60</span>*<span class="number">1000</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 转换为时间（天,时:分:秒.毫秒）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> timeMillis</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatDateTime</span><span class="params">(<span class="keyword">long</span> timeMillis)</span></span>&#123;</span><br><span class="line">      <span class="keyword">long</span> day = timeMillis/(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>);</span><br><span class="line">      <span class="keyword">long</span> hour = (timeMillis/(<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>)-day*<span class="number">24</span>);</span><br><span class="line">      <span class="keyword">long</span> min = ((timeMillis/(<span class="number">60</span>*<span class="number">1000</span>))-day*<span class="number">24</span>*<span class="number">60</span>-hour*<span class="number">60</span>);</span><br><span class="line">      <span class="keyword">long</span> s = (timeMillis/<span class="number">1000</span>-day*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>-hour*<span class="number">60</span>*<span class="number">60</span>-min*<span class="number">60</span>);</span><br><span class="line">      <span class="keyword">long</span> sss = (timeMillis-day*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>-hour*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>-min*<span class="number">60</span>*<span class="number">1000</span>-s*<span class="number">1000</span>);</span><br><span class="line">      <span class="keyword">return</span> (day&gt;<span class="number">0</span>?day+<span class="string">","</span>:<span class="string">""</span>)+hour+<span class="string">":"</span>+min+<span class="string">":"</span>+s+<span class="string">"."</span>+sss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取某一天的开始时间（0点）</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getDateStart</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (date == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         date = sdf.parse(formatDate(date, <span class="string">"yyyy-MM-dd"</span>) + <span class="string">" 00:00:00"</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> date;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取某一天的结束时间(23:59)</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getDateEnd</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (date == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         date = sdf.parse(formatDate(date, <span class="string">"yyyy-MM-dd"</span>) + <span class="string">" 23:59:59"</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> date;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 比较两个日期时间的大小,反回1表示preDateStr &gt; nextDateStr，0就相等，-1为小于</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span>: weihuang.peng</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> preDateStr</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> nextDateStr</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> result</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareDate</span><span class="params">(Object preDateStr, Object nextDateStr)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">      Date preDate = parseDate(preDateStr);</span><br><span class="line">      Date nextDate = parseDate(nextDateStr);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         result =  preDate.compareTo(nextDate);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         result = <span class="number">0</span>;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取某一天的前几天或者后几天，根据数字符号决定天数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span>: weihuang.peng</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> days</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPastDayStr</span><span class="params">(Object dateObj, <span class="keyword">int</span> days)</span> </span>&#123;</span><br><span class="line">      Date date = parseDate(dateObj);</span><br><span class="line">      <span class="keyword">long</span> time = date.getTime() + days * (<span class="keyword">long</span>)(<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">      <span class="keyword">return</span> formatDate(<span class="keyword">new</span> Date(time));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * preDateStr - nextDateStr 返回秒数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span>: huiyang.yu</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> preDateStr</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> nextDateStr</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getSubactDate</span><span class="params">(Object preDateStr, Object nextDateStr)</span> </span>&#123;</span><br><span class="line">      Date preDate = parseDate(preDateStr);</span><br><span class="line">      Date nextDate = parseDate(nextDateStr);</span><br><span class="line">      <span class="keyword">long</span> result = (preDate.getTime() - nextDate.getTime()) / <span class="number">1000L</span>;</span><br><span class="line">      <span class="keyword">return</span> result; </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 返回过去的天数： preDateStr - nextDateStr </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span>: weihuang.peng</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> preDateStr</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> nextDateStr</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getDifferDate</span><span class="params">(Object preDateStr, Object nextDateStr)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> getSubactDate(preDateStr, nextDateStr) / (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24L</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 传入日期时间与当前系统日期时间的比较,</span></span><br><span class="line"><span class="comment">    * 若日期相同，则根据时分秒来返回 ,</span></span><br><span class="line"><span class="comment">    * 否则返回具体日期</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span>: huiyang.yu</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> updateDate 传入日期</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> updateTime 传入时间</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 日期或者 xx小时前||xx分钟前||xx秒前</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getNewUpdateDateString</span><span class="params">(String updateDate, String updateTime)</span> </span>&#123;</span><br><span class="line">      String result = updateDate;</span><br><span class="line">      <span class="keyword">long</span> time = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (updateDate.equals(DateUtils.getDate())) &#123;</span><br><span class="line">         time = DateUtils.getSubactDate(DateUtils.getDateTime(), updateDate</span><br><span class="line">               + <span class="string">" "</span> + updateTime);</span><br><span class="line">         <span class="keyword">if</span> (time &gt;= <span class="number">3600</span>) &#123;</span><br><span class="line">            result = time / <span class="number">3600</span> + <span class="string">"小时前"</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (time &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">            result = time / <span class="number">60</span> + <span class="string">"分钟前"</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (time &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            result = time + <span class="string">"秒前"</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = <span class="string">"刚刚"</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.length() &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">         result = result.substring(<span class="number">5</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 的编程式事务管理概述</title>
      <link href="/posts/8f5/"/>
      <url>/posts/8f5/</url>
      
        <content type="html"><![CDATA[<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><h3 id="关于本教程"><a href="#关于本教程" class="headerlink" title="关于本教程"></a>关于本教程</h3><p>本教程将深入讲解 Spring 简单而强大的事务管理功能，包括编程式事务和声明式事务。通过对本教程的学习，您将能够理解 Spring 事务管理的本质，并灵活运用之。</p><a id="more"></a><h3 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h3><p>本教程假定您已经掌握了 Java 基础知识，并对 Spring 有一定了解。您还需要具备基本的事务管理的知识，比如：事务的定义，隔离级别的概念，等等。本文将直接使用这些概念而不做详细解释。另外，您最好掌握数据库的基础知识，虽然这不是必须。</p><h3 id="系统需求"><a href="#系统需求" class="headerlink" title="系统需求"></a>系统需求</h3><p>要试验这份教程中的工具和示例，硬件配置需求为：至少带有 512MB 内存（推荐 1GB）的系统。需要安装以下软件：</p><ul><li>Sun JDK 5.0 或更新版本或 IBM Developer Kit for the Java 5 platform 版本。</li><li>Spring framework 2.5。本教程附带的示例代码已经在 Spring 2.5.6 上测试过。</li><li>MySQL 5.0 或更新版本。</li></ul><h2 id="Spring-事务属性分析"><a href="#Spring-事务属性分析" class="headerlink" title="Spring 事务属性分析"></a>Spring 事务属性分析</h2><p>事务管理对于企业应用而言至关重要。它保证了用户的每一次操作都是可靠的，即便出现了异常的访问情况，也不至于破坏后台数据的完整性。就像银行的自助取款机，通常都能正常为客户服务，但是也难免遇到操作过程中机器突然出故障的情况，此时，事务就必须确保出故障前对账户的操作不生效，就像用户刚才完全没有使用过取款机一样，以保证用户和银行的利益都不受损失。</p><p>在 Spring 中，事务是通过 TransactionDefinition 接口来定义的。该接口包含与事务属性有关的方法。具体如清单1所示：</p><h5 id="清单1-TransactionDefinition-接口中定义的主要方法"><a href="#清单1-TransactionDefinition-接口中定义的主要方法" class="headerlink" title="清单1. TransactionDefinition 接口中定义的主要方法"></a>清单1. TransactionDefinition 接口中定义的主要方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionDefinition</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getIsolationLevel</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPropagationBehavior</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getTimeout</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isReadOnly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也许你会奇怪，为什么接口只提供了获取属性的方法，而没有提供相关设置属性的方法。其实道理很简单，事务属性的设置完全是程序员控制的，因此程序员可以自定义任何设置属性的方法，而且保存属性的字段也没有任何要求。唯一的要求的是，Spring 进行事务操作的时候，通过调用以上接口提供的方法必须能够返回事务相关的属性取值。</p><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p>隔离级别是指若干个并发的事务之间的隔离程度。TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p><ul><li>TransactionDefinition.ISOLATION_DEFAULT：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。</li><li>TransactionDefinition.ISOLATION_READ_UNCOMMITTED：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。</li><li>TransactionDefinition.ISOLATION_READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。</li><li>TransactionDefinition.ISOLATION_REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。</li><li>TransactionDefinition.ISOLATION_SERIALIZABLE：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li></ul><h3 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h3><p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p><ul><li>TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li><li>TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li><li>TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li>TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</li><li>TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li><li>TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li></ul><p>这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 PROPAGATION_NESTED是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。</p><h3 id="事务超时"><a href="#事务超时" class="headerlink" title="事务超时"></a>事务超时</h3><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p><h3 id="事务的只读属性"><a href="#事务的只读属性" class="headerlink" title="事务的只读属性"></a>事务的只读属性</h3><p>事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。</p><h3 id="事务的回滚规则"><a href="#事务的回滚规则" class="headerlink" title="事务的回滚规则"></a>事务的回滚规则</h3><p>通常情况下，如果在事务中抛出了未检查异常（继承自 RuntimeException 的异常），则默认将回滚事务。如果没有抛出任何异常，或者抛出了已检查异常，则仍然提交事务。这通常也是大多数开发者希望的处理方式，也是 EJB 中的默认处理方式。但是，我们可以根据需要人为控制事务在抛出某些未检查异常时任然提交事务，或者在抛出某些已检查异常时回滚事务。</p><h2 id="Spring-事务管理-API-分析"><a href="#Spring-事务管理-API-分析" class="headerlink" title="Spring 事务管理 API 分析"></a>Spring 事务管理 API 分析</h2><p>Spring 框架中，涉及到事务管理的 API 大约有100个左右，其中最重要的有三个：TransactionDefinition、PlatformTransactionManager、TransactionStatus。所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。“给定的事务规则”就是用 TransactionDefinition 表示的，“按照……来执行提交或者回滚操作”便是用 PlatformTransactionManager 来表示，而 TransactionStatus 用于表示一个运行着的事务的状态。打一个不恰当的比喻，TransactionDefinition 与 TransactionStatus 的关系就像程序和进程的关系。</p><h3 id="TransactionDef…"><a href="#TransactionDef…" class="headerlink" title="TransactionDef…"></a>TransactionDef…</h3><p>该接口在前面已经介绍过，它用于定义一个事务。它包含了事务的静态属性，比如：事务传播行为、超时时间等等。Spring 为我们提供了一个默认的实现类：DefaultTransactionDefinition，该类适用于大多数情况。如果该类不能满足需求，可以通过实现 TransactionDefinition 接口来实现自己的事务定义。</p><h3 id="PlatformTrans…"><a href="#PlatformTrans…" class="headerlink" title="PlatformTrans…"></a>PlatformTrans…</h3><p>PlatformTransactionManager 用于执行具体的事务操作。接口定义如清单2所示：</p><h5 id="清单2-PlatformTransactionManager-接口中定义的主要方法"><a href="#清单2-PlatformTransactionManager-接口中定义的主要方法" class="headerlink" title="清单2. PlatformTransactionManager 接口中定义的主要方法"></a>清单2. PlatformTransactionManager 接口中定义的主要方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Public <span class="class"><span class="keyword">interface</span> <span class="title">PlatformTransactionManager</span></span>&#123;</span><br><span class="line">  <span class="function">TransactionStatus <span class="title">getTransaction</span><span class="params">(TransactionDefinition definition)</span></span></span><br><span class="line"><span class="function">   <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus status)</span><span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(TransactionStatus status)</span><span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据底层所使用的不同的持久化 API 或框架，PlatformTransactionManager 的主要实现类大致如下：</p><ul><li>DataSourceTransactionManager：适用于使用JDBC和iBatis进行数据持久化操作的情况。</li><li>HibernateTransactionManager：适用于使用Hibernate进行数据持久化操作的情况。</li><li>JpaTransactionManager：适用于使用JPA进行数据持久化操作的情况。</li><li>另外还有JtaTransactionManager 、JdoTransactionManager、JmsTransactionManager等等。</li></ul><p>如果我们使用JTA进行事务管理，我们可以通过 JNDI 和 Spring 的 JtaTransactionManager 来获取一个容器管理的 DataSource。JtaTransactionManager 不需要知道 DataSource 和其他特定的资源，因为它将使用容器提供的全局事务管理。而对于其他事务管理器，比如DataSourceTransactionManager，在定义时需要提供底层的数据源作为其属性，也就是 DataSource。与 HibernateTransactionManager 对应的是 SessionFactory，与 JpaTransactionManager 对应的是 EntityManagerFactory 等等。</p><h3 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h3><p>PlatformTransactionManager.getTransaction(…) 方法返回一个 TransactionStatus 对象。返回的TransactionStatus 对象可能代表一个新的或已经存在的事务（如果在当前调用堆栈有一个符合条件的事务）。TransactionStatus 接口提供了一个简单的控制事务执行和查询事务状态的方法。该接口定义如清单3所示：</p><h5 id="清单3-TransactionStatus-接口中定义的主要方法"><a href="#清单3-TransactionStatus-接口中定义的主要方法" class="headerlink" title="清单3. TransactionStatus 接口中定义的主要方法"></a>清单3. TransactionStatus 接口中定义的主要方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">interface</span> <span class="title">TransactionStatus</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isNewTransaction</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setRollbackOnly</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isRollbackOnly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编程式事务管理"><a href="#编程式事务管理" class="headerlink" title="编程式事务管理"></a>编程式事务管理</h2><h3 id="Spring-的编程式事务管理概述"><a href="#Spring-的编程式事务管理概述" class="headerlink" title="Spring 的编程式事务管理概述"></a>Spring 的编程式事务管理概述</h3><p>在 Spring 出现以前，编程式事务管理对基于 POJO 的应用来说是唯一选择。用过 Hibernate 的人都知道，我们需要在代码中显式调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。通过 Spring 提供的事务管理 API，我们可以在代码中灵活控制事务的执行。在底层，Spring 仍然将事务操作委托给底层的持久化框架来执行。</p><h3 id="基于底层-API-的编程式事务管理"><a href="#基于底层-API-的编程式事务管理" class="headerlink" title="基于底层 API 的编程式事务管理"></a>基于底层 API 的编程式事务管理</h3><p>根据PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。示例代码如清单4所示：</p><h5 id="清单4-基于底层-API-的事务管理示例代码"><a href="#清单4-基于底层-API-的事务管理示例代码" class="headerlink" title="清单4. 基于底层 API 的事务管理示例代码"></a>清单4. 基于底层 API 的事务管理示例代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankServiceImpl</span> <span class="keyword">implements</span> <span class="title">BankService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> BankDao bankDao;</span><br><span class="line"><span class="keyword">private</span> TransactionDefinition txDefinition;</span><br><span class="line"><span class="keyword">private</span> PlatformTransactionManager txManager;</span><br><span class="line">......</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transfer</span><span class="params">(Long fromId， Long toId， <span class="keyword">double</span> amount)</span> </span>&#123;</span><br><span class="line">    TransactionStatus txStatus = txManager.getTransaction(txDefinition);</span><br><span class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        result = bankDao.transfer(fromId， toId， amount);</span><br><span class="line">        txManager.commit(txStatus);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        result = <span class="keyword">false</span>;</span><br><span class="line">        txManager.rollback(txStatus);</span><br><span class="line">        System.out.println(<span class="string">"Transfer Error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相应的配置文件如清单5所示：</p><h5 id="清单5-基于底层API的事务管理示例配置文件"><a href="#清单5-基于底层API的事务管理示例配置文件" class="headerlink" title="清单5. 基于底层API的事务管理示例配置文件"></a>清单5. 基于底层API的事务管理示例配置文件</h5><p>如上所示，我们在类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义一个事务；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。</p><p>如果方法需要实施事务管理，我们首先需要在方法开始执行前启动一个事务，调用PlatformTransactionManager.getTransaction(…) 方法便可启动一个事务。创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。</p><h3 id="基于-TransactionTemplate-的编程式事务管理"><a href="#基于-TransactionTemplate-的编程式事务管理" class="headerlink" title="基于 TransactionTemplate 的编程式事务管理"></a>基于 TransactionTemplate 的编程式事务管理</h3><p>通过前面的示例可以发现，这种事务管理方式很容易理解，但令人头疼的是，事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。幸好，Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的模板回调模式。如清单6所示：</p><h5 id="清单6-基于-TransactionTemplate-的事务管理示例代码"><a href="#清单6-基于-TransactionTemplate-的事务管理示例代码" class="headerlink" title="清单6. 基于 TransactionTemplate 的事务管理示例代码"></a>清单6. 基于 TransactionTemplate 的事务管理示例代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankServiceImpl</span> <span class="keyword">implements</span> <span class="title">BankService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> BankDao bankDao;</span><br><span class="line"><span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line">......</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transfer</span><span class="params">(<span class="keyword">final</span> Long fromId， <span class="keyword">final</span> Long toId， <span class="keyword">final</span> <span class="keyword">double</span> amount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Boolean) transactionTemplate.execute(<span class="keyword">new</span> TransactionCallback()&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">doInTransaction</span><span class="params">(TransactionStatus status)</span> </span>&#123;</span><br><span class="line">        Object result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = bankDao.transfer(fromId， toId， amount);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            status.setRollbackOnly();</span><br><span class="line">            result = <span class="keyword">false</span>;</span><br><span class="line">            System.out.println(<span class="string">"Transfer Error!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相应的XML配置如下：</p><h5 id="清单-7-基于-TransactionTemplate-的事务管理示例配置文件"><a href="#清单-7-基于-TransactionTemplate-的事务管理示例配置文件" class="headerlink" title="清单 7. 基于 TransactionTemplate 的事务管理示例配置文件"></a>清单 7. 基于 TransactionTemplate 的事务管理示例配置文件</h5><p>TransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。</p><p>根据默认规则，如果在执行回调方法的过程中抛出了未检查异常，或者显式调用了TransacationStatus.setRollbackOnly() 方法，则回滚事务；如果事务执行完成或者抛出了 checked 类型的异常，则提交事务。</p><p>TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。</p><h2 id="声明式事务管理"><a href="#声明式事务管理" class="headerlink" title="声明式事务管理"></a>声明式事务管理</h2><h3 id="Spring-的声明式事务管理概述"><a href="#Spring-的声明式事务管理概述" class="headerlink" title="Spring 的声明式事务管理概述"></a>Spring 的声明式事务管理概述</h3><p>Spring 的声明式事务管理在底层是建立在 AOP 的基础之上的。其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p><p>声明式事务最大的优点就是不需要通过编程的方式管理事务，这样就不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中做相关的事务规则声明（或通过等价的基于标注的方式），便可以将事务规则应用到业务逻辑中。因为事务管理本身就是一个典型的横切逻辑，正是 AOP 的用武之地。Spring 开发团队也意识到了这一点，为声明式事务提供了简单而强大的支持。</p><p>声明式事务管理曾经是 EJB 引以为傲的一个亮点，如今 Spring 让 POJO 在事务管理方面也拥有了和 EJB 一样的待遇，让开发人员在 EJB 容器之外也用上了强大的声明式事务管理功能，这主要得益于 Spring 依赖注入容器和 Spring AOP 的支持。依赖注入容器为声明式事务管理提供了基础设施，使得 Bean 对于 Spring 框架而言是可管理的；而 Spring AOP 则是声明式事务管理的直接实现者，这一点通过清单8可以看出来。</p><p>通常情况下，笔者强烈建议在开发中使用声明式事务，不仅因为其简单，更主要是因为这样使得纯业务代码不被污染，极大方便后期的代码维护。</p><p>和编程式事务相比，声明式事务唯一不足地方是，后者的最细粒度只能作用到方法级别，无法做到像编程式事务那样可以作用到代码块级别。但是即便有这样的需求，也存在很多变通的方法，比如，可以将需要进行事务管理的代码块独立为方法等等。</p><p>下面就来看看 Spring 为我们提供的声明式事务管理功能。</p><h3 id="基于-TransactionInter…-的声明式事务管理"><a href="#基于-TransactionInter…-的声明式事务管理" class="headerlink" title="基于 TransactionInter… 的声明式事务管理"></a>基于 TransactionInter… 的声明式事务管理</h3><p>最初，Spring 提供了 TransactionInterceptor 类来实施声明式事务管理功能。先看清单8的配置文件：</p><h5 id="清单-8-基于-TransactionInterceptor-的事务管理示例配置文件"><a href="#清单-8-基于-TransactionInterceptor-的事务管理示例配置文件" class="headerlink" title="清单 8. 基于 TransactionInterceptor 的事务管理示例配置文件"></a>清单 8. 基于 TransactionInterceptor 的事务管理示例配置文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PROPAGATION_REQUIRED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>首先，我们配置了一个 TransactionInterceptor 来定义相关的事务规则，他有两个主要的属性：一个是 transactionManager，用来指定一个事务管理器，并将具体事务相关的操作委托给它；另一个是 Properties 类型的 transactionAttributes 属性，它主要用来定义事务规则，该属性的每一个键值对中，键指定的是方法名，方法名可以使用通配符，而值就表示相应方法的所应用的事务属性。</p><p>指定事务属性的取值有较复杂的规则，这在 Spring 中算得上是一件让人头疼的事。具体的书写规则如下：</p><p><code>传播行为 [，隔离级别] [，只读属性] [，超时属性] [不影响提交的异常] [，导致回滚的异常]</code></p><ul><li>传播行为是唯一必须设置的属性，其他都可以忽略，Spring为我们提供了合理的默认值。</li><li>传播行为的取值必须以“PROPAGATION_”开头，具体包括：PROPAGATION_MANDATORY、PROPAGATION_NESTED、PROPAGATION_NEVER、PROPAGATION_NOT_SUPPORTED、PROPAGATION_REQUIRED、PROPAGATION_REQUIRES_NEW、PROPAGATION_SUPPORTS，共七种取值。</li><li>隔离级别的取值必须以“ISOLATION_”开头，具体包括：ISOLATION_DEFAULT、ISOLATION_READ_COMMITTED、ISOLATION_READ_UNCOMMITTED、ISOLATION_REPEATABLE_READ、ISOLATION_SERIALIZABLE，共五种取值。</li><li>如果事务是只读的，那么我们可以指定只读属性，使用“readOnly”指定。否则我们不需要设置该属性。</li><li>超时属性的取值必须以“TIMEOUT_”开头，后面跟一个int类型的值，表示超时时间，单位是秒。</li><li>不影响提交的异常是指，即使事务中抛出了这些类型的异常，事务任然正常提交。必须在每一个异常的名字前面加上“+”。异常的名字可以是类名的一部分。比如“+RuntimeException”、“+tion”等等。</li><li>导致回滚的异常是指，当事务中抛出这些类型的异常时，事务将回滚。必须在每一个异常的名字前面加上“-”。异常的名字可以是类名的全部或者部分，比如“-RuntimeException”、“-tion”等等。</li></ul><p>以下是两个示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PROPAGATION_REQUIRED，ISOLATION_READ_COMMITTED，TIMEOUT_20，+AbcException，+DefException，-HijException</span><br></pre></td></tr></table></figure><p>以上表达式表示，针对所有方法名以 Service 结尾的方法，使用 PROPAGATION_REQUIRED 事务传播行为，事务的隔离级别是 ISOLATION_READ_COMMITTED，超时时间为20秒，当事务抛出 AbcException 或者 DefException 类型的异常，则仍然提交，当抛出 HijException 类型的异常时必须回滚事务。这里没有指定”readOnly”，表示事务不是只读的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PROPAGATION_REQUIRED，readOnly</span><br></pre></td></tr></table></figure><p>以上表达式表示，针对所有方法名为 test 的方法，使用 PROPAGATION_REQUIRED 事务传播行为，并且该事务是只读的。除此之外，其他的属性均使用默认值。比如，隔离级别和超时时间使用底层事务性资源的默认值，并且当发生未检查异常，则回滚事务，发生已检查异常则仍提交事务。</p><p>配置好了 TransactionInterceptor，我们还需要配置一个 ProxyFactoryBean 来组装 target 和advice。这也是典型的 Spring AOP 的做法。通过 ProxyFactoryBean 生成的代理类就是织入了事务管理逻辑后的目标类。至此，声明式事务管理就算是实现了。我们没有对业务代码进行任何操作，所有设置均在配置文件中完成，这就是声明式事务的最大优点。</p><h3 id="基于-TransactionProxy…-的声明式事务管理"><a href="#基于-TransactionProxy…-的声明式事务管理" class="headerlink" title="基于 TransactionProxy… 的声明式事务管理"></a>基于 TransactionProxy… 的声明式事务管理</h3><p>前面的声明式事务虽然好，但是却存在一个非常恼人的问题：配置文件太多。我们必须针对每一个目标对象配置一个 ProxyFactoryBean；另外，虽然可以通过父子 Bean 的方式来复用 TransactionInterceptor 的配置，但是实际的复用几率也不高；这样，加上目标对象本身，每一个业务类可能需要对应三个 配置，随着业务类的增多，配置文件将会变得越来越庞大，管理配置文件又成了问题。</p><p>为了缓解这个问题，Spring 为我们提供了 TransactionProxyFactoryBean，用于将TransactionInterceptor 和 ProxyFactoryBean 的配置合二为一。如清单9所示：</p><h5 id="清单9-基于-TransactionProxyFactoryBean-的事务管理示例配置文件"><a href="#清单9-基于-TransactionProxyFactoryBean-的事务管理示例配置文件" class="headerlink" title="清单9. 基于 TransactionProxyFactoryBean 的事务管理示例配置文件"></a>清单9. 基于 TransactionProxyFactoryBean 的事务管理示例配置文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PROPAGATION_REQUIRED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>如此一来，配置文件与先前相比简化了很多。我们把这种配置方式称为 Spring 经典的声明式事务管理。相信在早期使用 Spring 的开发人员对这种配置声明式事务的方式一定非常熟悉。</p><p>但是，显式为每一个业务类配置一个 TransactionProxyFactoryBean 的做法将使得代码显得过于刻板，为此我们可以使用自动创建代理的方式来将其简化，使用自动创建代理是纯 AOP 知识，请读者参考相关文档，不在此赘述。</p><h3 id="基于-命名空间的声明式事务管理"><a href="#基于-命名空间的声明式事务管理" class="headerlink" title="基于 命名空间的声明式事务管理"></a>基于 命名空间的声明式事务管理</h3><p>前面两种声明式事务配置方式奠定了 Spring 声明式事务管理的基石。在此基础上，Spring 2.x 引入了 命名空间，结合使用 命名空间，带给开发人员配置声明式事务的全新体验，配置变得更加简单和灵活。另外，得益于 命名空间的切点表达式支持，声明式事务也变得更加强大。</p><p>如清单10所示：</p><h5 id="清单10-基于-的事务管理示例配置文件"><a href="#清单10-基于-的事务管理示例配置文件" class="headerlink" title="清单10. 基于 的事务管理示例配置文件"></a>清单10. 基于 的事务管理示例配置文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>如果默认的事务属性就能满足要求，那么代码简化为如清单 11 所示：</p><h5 id="清单-11-简化后的基于-的事务管理示例配置文件"><a href="#清单-11-简化后的基于-的事务管理示例配置文件" class="headerlink" title="清单 11. 简化后的基于 的事务管理示例配置文件"></a>清单 11. 简化后的基于 的事务管理示例配置文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>由于使用了切点表达式，我们就不需要针对每一个业务类创建一个代理对象了。另外，如果配置的事务管理器 Bean 的名字取值为“transactionManager”，则我们可以省略 tx:advice 的 transaction-manager 属性，因为该属性的默认值即为“transactionManager”。</p><h3 id="基于-Transactional-的声明式事务管理"><a href="#基于-Transactional-的声明式事务管理" class="headerlink" title="基于 @Transactional 的声明式事务管理"></a>基于 @Transactional 的声明式事务管理</h3><p>除了基于命名空间的事务配置方式，Spring 2.x 还引入了基于 Annotation 的方式，具体主要涉及@Transactional 标注。@Transactional 可以作用于接口、接口方法、类以及类方法上。当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。如清单12所示：</p><h5 id="清单12-基于-Transactional-的事务管理示例配置文件"><a href="#清单12-基于-Transactional-的事务管理示例配置文件" class="headerlink" title="清单12. 基于 @Transactional 的事务管理示例配置文件"></a>清单12. 基于 @Transactional 的事务管理示例配置文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transfer</span><span class="params">(Long fromId， Long toId， <span class="keyword">double</span> amount)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bankDao.transfer(fromId， toId， amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring 使用 BeanPostProcessor 来处理 Bean 中的标注，因此我们需要在配置文件中作如下声明来激活该后处理 Bean，如清单13所示：</p><h5 id="清单13-启用后处理Bean的配置"><a href="#清单13-启用后处理Bean的配置" class="headerlink" title="清单13. 启用后处理Bean的配置"></a>清单13. 启用后处理Bean的配置</h5><p>与前面相似，transaction-manager 属性的默认值是 transactionManager，如果事务管理器 Bean 的名字即为该值，则可以省略该属性。</p><p>虽然 @Transactional 注解可以作用于接口、接口方法、类以及类方法上，但是 Spring 小组建议不要在接口或者接口方法上使用该注解，因为这只有在使用基于接口的代理时它才会生效。另外， @Transactional 注解应该只被应用到 public 方法上，这是由 Spring AOP 的本质决定的。如果你在 protected、private 或者默认可见性的方法上使用 @Transactional 注解，这将被忽略，也不会抛出任何异常。</p><p>基于 命名空间和基于 @Transactional 的事务声明方式各有优缺点。基于 的方式，其优点是与切点表达式结合，功能强大。利用切点表达式，一个配置可以匹配多个方法，而基于 @Transactional 的方式必须在每一个需要使用事务的方法或者类上用 @Transactional 标注，尽管可能大多数事务的规则是一致的，但是对 @Transactional 而言，也无法重用，必须逐个指定。另一方面，基于 @Transactional 的方式使用起来非常简单明了，没有学习成本。开发人员可以根据需要，任选其中一种使用，甚至也可以根据需要混合使用这两种方式。</p><p>如果不是对遗留代码进行维护，则不建议再使用基于 TransactionInterceptor 以及基于TransactionProxyFactoryBean 的声明式事务管理方式，但是，学习这两种方式非常有利于对底层实现的理解。</p><p>虽然上面共列举了四种声明式事务管理方式，但是这样的划分只是为了便于理解，其实后台的实现方式是一样的，只是用户使用的方式不同而已。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>本教程的知识点大致总结如下：</p><ul><li>基于 TransactionDefinition、PlatformTransactionManager、TransactionStatus 编程式事务管理是 Spring 提供的最原始的方式，通常我们不会这么写，但是了解这种方式对理解 Spring 事务管理的本质有很大作用。</li><li>基于 TransactionTemplate 的编程式事务管理是对上一种方式的封装，使得编码更简单、清晰。</li><li>基于 TransactionInterceptor 的声明式事务是 Spring 声明式事务的基础，通常也不建议使用这种方式，但是与前面一样，了解这种方式对理解 Spring 声明式事务有很大作用。</li><li>基于 TransactionProxyFactoryBean 的声明式事务是上中方式的改进版本，简化的配置文件的书写，这是 Spring 早期推荐的声明式事务管理方式，但是在 Spring 2.0 中已经不推荐了。</li><li>基于 和 命名空间的声明式事务管理是目前推荐的方式，其最大特点是与 Spring AOP 结合紧密，可以充分利用切点表达式的强大支持，使得管理事务更加灵活。</li><li>基于 @Transactional 的方式将声明式事务管理简化到了极致。开发人员只需在配置文件中加上一行启用相关后处理 Bean 的配置，然后在需要实施事务管理的方法或者类上使用 @Transactional 指定事务规则即可实现事务管理，而且功能也不必其他方式逊色。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis配置</title>
      <link href="/posts/c0b7/"/>
      <url>/posts/c0b7/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-config配置详解"><a href="#Redis-config配置详解" class="headerlink" title="Redis.config配置详解"></a>Redis.config配置详解</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br></pre></td><td class="code"><pre><span class="line"># 当配置中需要配置内存大小时，可以使用 1k, 5GB, 4M 等类似的格式，其转换方式如下(不区分大小写)</span><br><span class="line">#</span><br><span class="line"># 1k =&gt; 1000 bytes</span><br><span class="line"># 1kb =&gt; 1024 bytes</span><br><span class="line"># 1m =&gt; 1000000 bytes</span><br><span class="line"># 1mb =&gt; 1024*1024 bytes</span><br><span class="line"># 1g =&gt; 1000000000 bytes</span><br><span class="line"># 1gb =&gt; 1024*1024*1024 bytes</span><br><span class="line">#</span><br><span class="line"># 内存配置大小写是一样的.比如 1gb 1Gb 1GB 1gB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># daemonize no 默认情况下，redis不是在后台运行的，如果需要在后台运行，把该项的值更改为yes</span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"># 当redis在后台运行的时候，Redis默认会把pid文件放在/var/run/redis.pid，你可以配置到其他地址。</span><br><span class="line"># 当运行多个redis服务时，需要指定不同的pid文件和端口</span><br><span class="line">pidfile /var/run/redis.pid</span><br><span class="line"> # 指定redis运行的端口，默认是6379</span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"># 指定redis只接收来自于该IP地址的请求，如果不进行设置，那么将处理所有请求，</span><br><span class="line"># 在生产环境中最好设置该项</span><br><span class="line">bind 127.0.0.1 192.168.3.222</span><br><span class="line"></span><br><span class="line"># Specify the path for the unix socket that will be used to listen for</span><br><span class="line"># incoming connections. There is no default, so Redis will not listen</span><br><span class="line"># on a unix socket when not specified.</span><br><span class="line">#</span><br><span class="line"># unixsocket /tmp/redis.sock</span><br><span class="line"># unixsocketperm 755</span><br><span class="line"></span><br><span class="line"># 设置客户端连接时的超时时间，单位为秒。当客户端在这段时间内没有发出任何指令，那么关闭该连接</span><br><span class="line"># 0是关闭此设置</span><br><span class="line">timeout 0</span><br><span class="line"></span><br><span class="line"># 指定日志记录级别</span><br><span class="line"># Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</span><br><span class="line"># debug 记录很多信息，用于开发和测试</span><br><span class="line"># varbose 有用的信息，不像debug会记录那么多</span><br><span class="line"># notice 普通的verbose，常用于生产环境</span><br><span class="line"># warning 只有非常重要或者严重的信息会记录到日志</span><br><span class="line">loglevel debug</span><br><span class="line"></span><br><span class="line"># 配置log文件地址</span><br><span class="line"># 默认值为stdout，标准输出，若后台模式会输出到/dev/null</span><br><span class="line">#logfile stdout</span><br><span class="line">logfile /var/log/redis/redis.log</span><br><span class="line"></span><br><span class="line"># To enable logging to the system logger, just set &apos;syslog-enabled&apos; to yes,</span><br><span class="line"># and optionally update the other syslog parameters to suit your needs.</span><br><span class="line"># syslog-enabled no</span><br><span class="line"></span><br><span class="line"># Specify the syslog identity.</span><br><span class="line"># syslog-ident redis</span><br><span class="line"></span><br><span class="line"># Specify the syslog facility.  Must be USER or between LOCAL0-LOCAL7.</span><br><span class="line"># syslog-facility local0</span><br><span class="line"></span><br><span class="line"># 可用数据库数</span><br><span class="line"># 默认值为16，默认数据库为0，数据库范围在0-（database-1）之间</span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line">################################ 快照  #################################</span><br><span class="line"># 保存数据到磁盘，格式如下:</span><br><span class="line">#</span><br><span class="line"># save  </span><br><span class="line">#</span><br><span class="line"># 指出在多长时间内，有多少次更新操作，就将数据同步到数据文件rdb。</span><br><span class="line"># 相当于条件触发抓取快照，这个可以多个条件配合</span><br><span class="line">#</span><br><span class="line"># 比如默认配置文件中的设置，就设置了三个条件</span><br><span class="line">#</span><br><span class="line">#   save 900 1  900秒内至少有1个key被改变</span><br><span class="line">#   save 300 10  300秒内至少有300个key被改变</span><br><span class="line">#   save 60 10000  60秒内至少有10000个key被改变</span><br><span class="line"></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"># 存储至本地数据库时（持久化到rdb文件）是否压缩数据，默认为yes</span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 本地持久化数据库文件名，默认值为dump.rdb</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"># 工作目录</span><br><span class="line">#</span><br><span class="line"># 数据库镜像备份的文件放置的路径。</span><br><span class="line"># 这里的路径跟文件名要分开配置是因为redis在进行备份时，先会将当前数据库的状态写入到一个临时文件中，等备份完成时，</span><br><span class="line"># 再把该该临时文件替换为上面所指定的文件，而这里的临时文件和上面所配置的备份文件都会放在这个指定的路径当中。</span><br><span class="line">#</span><br><span class="line"># AOF文件也会存放在这个目录下面</span><br><span class="line">#</span><br><span class="line"># 注意这里必须制定一个目录而不是文件</span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line">################################# 复制 #################################</span><br><span class="line"></span><br><span class="line"># 主从复制. 设置该数据库为其他数据库的从数据库.</span><br><span class="line"># 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</span><br><span class="line">#</span><br><span class="line"># slaveof  </span><br><span class="line"></span><br><span class="line"># 当master服务设置了密码保护时(用requirepass制定的密码)</span><br><span class="line"># slav服务连接master的密码</span><br><span class="line">#</span><br><span class="line"># masterauth </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 当从库同主机失去连接或者复制正在进行，从机库有两种运行方式：</span><br><span class="line">#</span><br><span class="line"># 1) 如果slave-serve-stale-data设置为yes(默认设置)，从库会继续相应客户端的请求</span><br><span class="line">#</span><br><span class="line"># 2) 如果slave-serve-stale-data是指为no，出去INFO和SLAVOF命令之外的任何请求都会返回一个</span><br><span class="line">#    错误&quot;SYNC with master in progress&quot;</span><br><span class="line">#</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"></span><br><span class="line"># 从库会按照一个时间间隔向主库发送PINGs.可以通过repl-ping-slave-period设置这个时间间隔，默认是10秒</span><br><span class="line">#</span><br><span class="line"># repl-ping-slave-period 10</span><br><span class="line"></span><br><span class="line"># repl-timeout 设置主库批量数据传输时间或者ping回复时间间隔，默认值是60秒</span><br><span class="line"># 一定要确保repl-timeout大于repl-ping-slave-period</span><br><span class="line"># repl-timeout 60</span><br><span class="line"></span><br><span class="line">################################## 安全 ###################################</span><br><span class="line"></span><br><span class="line"># 设置客户端连接后进行任何其他指定前需要使用的密码。</span><br><span class="line"># 警告：因为redis速度相当快，所以在一台比较好的服务器下，一个外部的用户可以在一秒钟进行150K次的密码尝试，这意味着你需要指定非常非常强大的密码来防止暴力破解</span><br><span class="line">#</span><br><span class="line"># requirepass foobared</span><br><span class="line"></span><br><span class="line"># 命令重命名.</span><br><span class="line">#</span><br><span class="line"># 在一个共享环境下可以重命名相对危险的命令。比如把CONFIG重名为一个不容易猜测的字符。</span><br><span class="line">#</span><br><span class="line"># 举例:</span><br><span class="line">#</span><br><span class="line"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span><br><span class="line">#</span><br><span class="line"># 如果想删除一个命令，直接把它重命名为一个空字符&quot;&quot;即可，如下：</span><br><span class="line">#</span><br><span class="line"># rename-command CONFIG &quot;&quot;</span><br><span class="line"></span><br><span class="line">################################### 约束 ####################################</span><br><span class="line"></span><br><span class="line"># 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，</span><br><span class="line"># 如果设置 maxclients 0，表示不作限制。</span><br><span class="line"># 当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</span><br><span class="line">#</span><br><span class="line"># maxclients 128</span><br><span class="line"></span><br><span class="line"># 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key</span><br><span class="line"># Redis同时也会移除空的list对象</span><br><span class="line">#</span><br><span class="line"># 当此方法处理后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作</span><br><span class="line">#</span><br><span class="line"># 注意：Redis新的vm机制，会把Key存放内存，Value会存放在swap区</span><br><span class="line">#</span><br><span class="line"># maxmemory的设置比较适合于把redis当作于类似memcached的缓存来使用，而不适合当做一个真实的DB。</span><br><span class="line"># 当把Redis当做一个真实的数据库使用的时候，内存使用将是一个很大的开销</span><br><span class="line"># maxmemory </span><br><span class="line"></span><br><span class="line"># 当内存达到最大值的时候Redis会选择删除哪些数据？有五种方式可供选择</span><br><span class="line">#</span><br><span class="line"># volatile-lru -&gt; 利用LRU算法移除设置过过期时间的key (LRU:最近使用 Least Recently Used )</span><br><span class="line"># allkeys-lru -&gt; 利用LRU算法移除任何key</span><br><span class="line"># volatile-random -&gt; 移除设置过过期时间的随机key</span><br><span class="line"># allkeys-&gt;random -&gt; remove a random key, any key</span><br><span class="line"># volatile-ttl -&gt; 移除即将过期的key(minor TTL)</span><br><span class="line"># noeviction -&gt; 不移除任何可以，只是返回一个写错误</span><br><span class="line">#</span><br><span class="line"># 注意：对于上面的策略，如果没有合适的key可以移除，当写的时候Redis会返回一个错误</span><br><span class="line">#</span><br><span class="line">#       写命令包括: set setnx setex append</span><br><span class="line">#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span><br><span class="line">#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span><br><span class="line">#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span><br><span class="line">#       getset mset msetnx exec sort</span><br><span class="line">#</span><br><span class="line"># 默认是:</span><br><span class="line">#</span><br><span class="line"># maxmemory-policy volatile-lru</span><br><span class="line"></span><br><span class="line"># LRU 和 minimal TTL 算法都不是精准的算法，但是相对精确的算法(为了节省内存)，随意你可以选择样本大小进行检测。</span><br><span class="line"># Redis默认的灰选择3个样本进行检测，你可以通过maxmemory-samples进行设置</span><br><span class="line">#</span><br><span class="line"># maxmemory-samples 3</span><br><span class="line"></span><br><span class="line">############################## AOF ###############################</span><br><span class="line"></span><br><span class="line"># 默认情况下，redis会在后台异步的把数据库镜像备份到磁盘，但是该备份是非常耗时的，而且备份也不能很频繁，如果发生诸如拉闸限电、拔插头等状况，那么将造成比较大范围的数据丢失。</span><br><span class="line"># 所以redis提供了另外一种更加高效的数据库备份及灾难恢复方式。</span><br><span class="line"># 开启append only模式之后，redis会把所接收到的每一次写操作请求都追加到appendonly.aof文件中，当redis重新启动时，会从该文件恢复出之前的状态。</span><br><span class="line"># 但是这样会造成appendonly.aof文件过大，所以redis还支持了BGREWRITEAOF指令，对appendonly.aof 进行重新整理。</span><br><span class="line"># 你可以同时开启asynchronous dumps 和 AOF</span><br><span class="line"></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"># AOF文件名称 (默认: &quot;appendonly.aof&quot;)</span><br><span class="line"># appendfilename appendonly.aof</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Redis支持三种同步AOF文件的策略:</span><br><span class="line">#</span><br><span class="line"># no: 不进行同步，系统去操作 . Faster.</span><br><span class="line"># always: always表示每次有写操作都进行同步. Slow, Safest.</span><br><span class="line"># everysec: 表示对写操作进行累积，每秒同步一次. Compromise.</span><br><span class="line">#</span><br><span class="line"># 默认是&quot;everysec&quot;，按照速度和安全折中这是最好的。</span><br><span class="line"># 如果想让Redis能更高效的运行，你也可以设置为&quot;no&quot;，让操作系统决定什么时候去执行</span><br><span class="line"># 或者相反想让数据更安全你也可以设置为&quot;always&quot;</span><br><span class="line">#</span><br><span class="line"># 如果不确定就用 &quot;everysec&quot;.</span><br><span class="line"></span><br><span class="line"># appendfsync always</span><br><span class="line">appendfsync everysec</span><br><span class="line"># appendfsync no</span><br><span class="line"></span><br><span class="line"># AOF策略设置为always或者everysec时，后台处理进程(后台保存或者AOF日志重写)会执行大量的I/O操作</span><br><span class="line"># 在某些Linux配置中会阻止过长的fsync()请求。注意现在没有任何修复，即使fsync在另外一个线程进行处理</span><br><span class="line">#</span><br><span class="line"># 为了减缓这个问题，可以设置下面这个参数no-appendfsync-on-rewrite</span><br><span class="line">#</span><br><span class="line"># This means that while another child is saving the durability of Redis is</span><br><span class="line"># the same as &quot;appendfsync none&quot;, that in pratical terms means that it is</span><br><span class="line"># possible to lost up to 30 seconds of log in the worst scenario (with the</span><br><span class="line"># default Linux settings).</span><br><span class="line">#</span><br><span class="line"># If you have latency problems turn this to &quot;yes&quot;. Otherwise leave it as</span><br><span class="line"># &quot;no&quot; that is the safest pick from the point of view of durability.</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"># Automatic rewrite of the append only file.</span><br><span class="line"># AOF 自动重写</span><br><span class="line"># 当AOF文件增长到一定大小的时候Redis能够调用 BGREWRITEAOF 对日志文件进行重写</span><br><span class="line">#</span><br><span class="line"># 它是这样工作的：Redis会记住上次进行些日志后文件的大小(如果从开机以来还没进行过重写，那日子大小在开机的时候确定)</span><br><span class="line">#</span><br><span class="line"># 基础大小会同现在的大小进行比较。如果现在的大小比基础大小大制定的百分比，重写功能将启动</span><br><span class="line"># 同时需要指定一个最小大小用于AOF重写，这个用于阻止即使文件很小但是增长幅度很大也去重写AOF文件的情况</span><br><span class="line"># 设置 percentage 为0就关闭这个特性</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line">################################## SLOW LOG ###################################</span><br><span class="line"></span><br><span class="line"># Redis Slow Log 记录超过特定执行时间的命令。执行时间不包括I/O计算比如连接客户端，返回结果等，只是命令执行时间</span><br><span class="line">#</span><br><span class="line"># 可以通过两个参数设置slow log：一个是告诉Redis执行超过多少时间被记录的参数slowlog-log-slower-than(微妙)，</span><br><span class="line"># 另一个是slow log 的长度。当一个新命令被记录的时候最早的命令将被从队列中移除</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 下面的时间以微妙微单位，因此1000000代表一分钟。</span><br><span class="line"># 注意制定一个负数将关闭慢日志，而设置为0将强制每个命令都会记录</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 对日志长度没有限制，只是要注意它会消耗内存</span><br><span class="line"># 可以通过 SLOWLOG RESET 回收被慢日志消耗的内存</span><br><span class="line">slowlog-max-len 1024</span><br><span class="line"></span><br><span class="line">################################ VM ###############################</span><br><span class="line"></span><br><span class="line">### WARNING! Virtual Memory is deprecated in Redis 2.4</span><br><span class="line">### The use of Virtual Memory is strongly discouraged.</span><br><span class="line"></span><br><span class="line"># Virtual Memory allows Redis to work with datasets bigger than the actual</span><br><span class="line"># amount of RAM needed to hold the whole dataset in memory.</span><br><span class="line"># In order to do so very used keys are taken in memory while the other keys</span><br><span class="line"># are swapped into a swap file, similarly to what operating systems do</span><br><span class="line"># with memory pages.</span><br><span class="line">#</span><br><span class="line"># To enable VM just set &apos;vm-enabled&apos; to yes, and set the following three</span><br><span class="line"># VM parameters accordingly to your needs.</span><br><span class="line"></span><br><span class="line">vm-enabled no</span><br><span class="line"># vm-enabled yes</span><br><span class="line"></span><br><span class="line"># This is the path of the Redis swap file. As you can guess, swap files</span><br><span class="line"># can&apos;t be shared by different Redis instances, so make sure to use a swap</span><br><span class="line"># file for every redis process you are running. Redis will complain if the</span><br><span class="line"># swap file is already in use.</span><br><span class="line">#</span><br><span class="line"># The best kind of storage for the Redis swap file (that&apos;s accessed at random)</span><br><span class="line"># is a Solid State Disk (SSD).</span><br><span class="line">#</span><br><span class="line"># *** WARNING *** if you are using a shared hosting the default of putting</span><br><span class="line"># the swap file under /tmp is not secure. Create a dir with access granted</span><br><span class="line"># only to Redis user and configure Redis to create the swap file there.</span><br><span class="line">vm-swap-file /tmp/redis.swap</span><br><span class="line"></span><br><span class="line"># vm-max-memory configures the VM to use at max the specified amount of</span><br><span class="line"># RAM. Everything that deos not fit will be swapped on disk *if* possible, that</span><br><span class="line"># is, if there is still enough contiguous space in the swap file.</span><br><span class="line">#</span><br><span class="line"># With vm-max-memory 0 the system will swap everything it can. Not a good</span><br><span class="line"># default, just specify the max amount of RAM you can in bytes, but it&apos;s</span><br><span class="line"># better to leave some margin. For instance specify an amount of RAM</span><br><span class="line"># that&apos;s more or less between 60 and 80% of your free RAM.</span><br><span class="line">vm-max-memory 0</span><br><span class="line"></span><br><span class="line"># Redis swap files is split into pages. An object can be saved using multiple</span><br><span class="line"># contiguous pages, but pages can&apos;t be shared between different objects.</span><br><span class="line"># So if your page is too big, small objects swapped out on disk will waste</span><br><span class="line"># a lot of space. If you page is too small, there is less space in the swap</span><br><span class="line"># file (assuming you configured the same number of total swap file pages).</span><br><span class="line">#</span><br><span class="line"># If you use a lot of small objects, use a page size of 64 or 32 bytes.</span><br><span class="line"># If you use a lot of big objects, use a bigger page size.</span><br><span class="line"># If unsure, use the default :)</span><br><span class="line">vm-page-size 32</span><br><span class="line"></span><br><span class="line"># Number of total memory pages in the swap file.</span><br><span class="line"># Given that the page table (a bitmap of free/used pages) is taken in memory,</span><br><span class="line"># every 8 pages on disk will consume 1 byte of RAM.</span><br><span class="line">#</span><br><span class="line"># The total swap size is vm-page-size * vm-pages</span><br><span class="line">#</span><br><span class="line"># With the default of 32-bytes memory pages and 134217728 pages Redis will</span><br><span class="line"># use a 4 GB swap file, that will use 16 MB of RAM for the page table.</span><br><span class="line">#</span><br><span class="line"># It&apos;s better to use the smallest acceptable value for your application,</span><br><span class="line"># but the default is large in order to work in most conditions.</span><br><span class="line">vm-pages 134217728</span><br><span class="line"></span><br><span class="line"># Max number of VM I/O threads running at the same time.</span><br><span class="line"># This threads are used to read/write data from/to swap file, since they</span><br><span class="line"># also encode and decode objects from disk to memory or the reverse, a bigger</span><br><span class="line"># number of threads can help with big objects even if they can&apos;t help with</span><br><span class="line"># I/O itself as the physical device may not be able to couple with many</span><br><span class="line"># reads/writes operations at the same time.</span><br><span class="line">#</span><br><span class="line"># The special value of 0 turn off threaded I/O and enables the blocking</span><br><span class="line"># Virtual Memory implementation.</span><br><span class="line">vm-max-threads 4</span><br><span class="line"></span><br><span class="line">############################### ADVANCED CONFIG ###############################</span><br><span class="line"></span><br><span class="line"># 当hash中包含超过指定元素个数并且最大的元素没有超过临界时，</span><br><span class="line"># hash将以一种特殊的编码方式（大大减少内存使用）来存储，这里可以设置这两个临界值</span><br><span class="line"># Redis Hash对应Value内部实际就是一个HashMap，实际这里会有2种不同实现，</span><br><span class="line"># 这个Hash的成员比较少时Redis为了节省内存会采用类似一维数组的方式来紧凑存储，而不会采用真正的HashMap结构，对应的value redisObject的encoding为zipmap,</span><br><span class="line"># 当成员数量增大时会自动转成真正的HashMap,此时encoding为ht。</span><br><span class="line">hash-max-zipmap-entries 512</span><br><span class="line">hash-max-zipmap-value 64</span><br><span class="line"></span><br><span class="line"># list数据类型多少节点以下会采用去指针的紧凑存储格式。</span><br><span class="line"># list数据类型节点值大小小于多少字节会采用紧凑存储格式。</span><br><span class="line">list-max-ziplist-entries 512</span><br><span class="line">list-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"># set数据类型内部数据如果全部是数值型，且包含多少节点以下会采用紧凑格式存储。</span><br><span class="line">set-max-intset-entries 512</span><br><span class="line"></span><br><span class="line"># zsort数据类型多少节点以下会采用去指针的紧凑存储格式。</span><br><span class="line"># zsort数据类型节点值大小小于多少字节会采用紧凑存储格式。</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用</span><br><span class="line">#</span><br><span class="line"># 当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。</span><br><span class="line">#</span><br><span class="line"># 如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存</span><br><span class="line">activerehashing yes</span><br><span class="line"></span><br><span class="line">################################## INCLUDES ###################################</span><br><span class="line"></span><br><span class="line"># 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</span><br><span class="line"></span><br><span class="line"># include /path/to/local.conf</span><br><span class="line"># include /path/to/other.conf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postman获取上一次请求返回</title>
      <link href="/posts/a72a/"/>
      <url>/posts/a72a/</url>
      
        <content type="html"><![CDATA[<p>Postman从上一个接口的 response 中获取数据作为下一个接口的参数进行请求</p><p><img src="http://jlin.oss-cn-beijing.aliyuncs.com/19-1-10/94751029.jpg" alt><img src="http://jlin.oss-cn-beijing.aliyuncs.com/19-1-10/94751029.jpg" alt></p><p><img src="http://jlin.oss-cn-beijing.aliyuncs.com/19-1-10/74885950.jpg" alt><img src="http://jlin.oss-cn-beijing.aliyuncs.com/19-1-10/74885950.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> Postman </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transport API</title>
      <link href="/posts/311b/"/>
      <url>/posts/311b/</url>
      
        <content type="html"><![CDATA[<p>Transport API 的核心是 Channel 接口，用于所有的出站操作，见下图</p><a id="more"></a><p><img src="https://waylau.gitbooks.io/essential-netty-in-action/images/Figure%204.1%20Channel%20interface%20hierarchy.jpg" alt><img src="https://waylau.gitbooks.io/essential-netty-in-action/images/Figure%204.1%20Channel%20interface%20hierarchy.jpg" alt></p><p>如上图所示，每个 Channel 都会分配一个 ChannelPipeline 和ChannelConfig。ChannelConfig 负责设置并存储 Channel 的配置，并允许在运行期间更新它们。传输一般有特定的配置设置，可能实现了 ChannelConfig. 的子类型。</p><p>ChannelPipeline 容纳了使用的 ChannelHandler 实例，这些ChannelHandler 将处理通道传递的“入站”和“出站”数据以及事件。ChannelHandler 的实现允许你改变数据状态和传输数据。</p><p>现在我们可以使用 ChannelHandler 做下面一些事情：</p><ul><li>传输数据时，将数据从一种格式转换到另一种格式</li><li>异常通知</li><li>Channel 变为 active（活动） 或 inactive（非活动） 时获得通知* Channel 被注册或注销时从 EventLoop 中获得通知</li><li>通知用户特定事件</li></ul><p><em>Intercepting Filter（拦截过滤器）</em></p><p><em>ChannelPipeline 实现了常用的 Intercepting Filter（拦截过滤器）设计模式。UNIX管道是另一例子：命令链接在一起，一个命令的输出连接到 的下一行中的输入。</em></p><p>你还可以在运行时根据需要添加 ChannelHandler 实例到ChannelPipeline 或从 ChannelPipeline 中删除，这能帮助我们构建高度灵活的 Netty 程序。例如，你可以支持<a href="http://en.wikipedia.org/wiki/STARTTLS" target="_blank" rel="noopener">STARTTLS</a>协议，只需通过加入适当的 ChannelHandler（这里是 SslHandler）到的ChannelPipeline 中，当被请求这个协议时。</p><p>此外，访问指定的 ChannelPipeline 和 ChannelConfig，你能在Channel 自身上进行操作。Channel 提供了很多方法，如下列表：</p><p>Table 4.1 Channel main methods</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>eventLoop()</td><td>返回分配给Channel的EventLoop</td></tr><tr><td>pipeline()</td><td>返回分配给Channel的ChannelPipeline</td></tr><tr><td>isActive()</td><td>返回Channel是否激活，已激活说明与远程连接对等</td></tr><tr><td>localAddress()</td><td>返回已绑定的本地SocketAddress</td></tr><tr><td>remoteAddress()</td><td>返回已绑定的远程SocketAddress</td></tr><tr><td>write()</td><td>写数据到远程客户端，数据通过ChannelPipeline传输过去</td></tr><tr><td>flush()</td><td>刷新先前的数据</td></tr><tr><td>writeAndFlush(…)</td><td>一个方便的方法用户调用write(…)而后调用 flush()</td></tr></tbody></table><p>后面会越来越熟悉这些方法，现在只需要记住我们的操作都是在相同的接口上运行，Netty 的高灵活性让你可以以不同的传输实现进行重构。</p><p>写数据到远程已连接客户端可以调用Channel.write()方法，如下代码：</p><p>Listing 4.5 Writing to a channel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Channel channel = ...; <span class="comment">// 获取channel的引用</span></span><br><span class="line">ByteBuf buf = Unpooled.copiedBuffer(<span class="string">"your data"</span>, CharsetUtil.UTF_8);            <span class="comment">//1</span></span><br><span class="line">ChannelFuture cf = channel.writeAndFlush(buf); <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">cf.addListener(<span class="keyword">new</span> ChannelFutureListener() &#123;    <span class="comment">//3</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (future.isSuccess()) &#123;                <span class="comment">//4</span></span><br><span class="line">            System.out.println(<span class="string">"Write successful"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.err.println(<span class="string">"Write error"</span>);    <span class="comment">//5</span></span><br><span class="line">            future.cause().printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>1.创建 ByteBuf 保存写的数据</p><p>2.写数据，并刷新</p><p>3.添加 ChannelFutureListener 即可写操作完成后收到通知，</p><p>4.写操作没有错误完成</p><p>5.写操作完成时出现错误</p><p>Channel 是线程安全(thread-safe)的，它可以被多个不同的线程安全的操作，在多线程环境下，所有的方法都是安全的。正因为 Channel 是安全的，我们存储对Channel的引用，并在学习的时候使用它写入数据到远程已连接的客户端，使用多线程也是如此。下面的代码是一个简单的多线程例子：</p><p>Listing 4.6 Using the channel from many threads</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Channel channel = ...; <span class="comment">// 获取channel的引用</span></span><br><span class="line"><span class="keyword">final</span> ByteBuf buf = Unpooled.copiedBuffer(<span class="string">"your data"</span>,</span><br><span class="line">        CharsetUtil.UTF_8).retain();    <span class="comment">//1</span></span><br><span class="line">Runnable writer = <span class="keyword">new</span> Runnable() &#123;        <span class="comment">//2</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        channel.writeAndFlush(buf.duplicate());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Executor executor = Executors.newCachedThreadPool();<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写进一个线程</span></span><br><span class="line">executor.execute(writer);        <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写进另外一个线程</span></span><br><span class="line">executor.execute(writer);        <span class="comment">//5</span></span><br></pre></td></tr></table></figure><p>1.创建一个 ByteBuf 保存写的数据</p><p>2.创建 Runnable 用于写数据到 channel</p><p>3.获取 Executor 的引用使用线程来执行任务</p><p>4.手写一个任务，在一个线程中执行</p><p>5.手写另一个任务，在另一个线程中执行</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transport 使用情况</title>
      <link href="/posts/37c/"/>
      <url>/posts/37c/</url>
      
        <content type="html"><![CDATA[<p>前面说了，并不是所有传输都支持核心协议，这会限制你的选择，具体看下表</p><a id="more"></a><table><thead><tr><th>Transport</th><th>TCP</th><th>UDP</th><th>SCTP*</th><th>UDT</th></tr></thead><tbody><tr><td>NIO</td><td>X</td><td>X</td><td>X</td><td>X</td></tr><tr><td>OIO</td><td>X</td><td>X</td><td>X</td><td>X</td></tr></tbody></table><p>*指目前仅在 Linux 上的支持。</p><p><em>在 Linux 上启用 SCTP</em></p><p>注意 SCTP 需要 kernel 支持，举例 Ubuntu：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libsctp1</span><br></pre></td></tr></table></figure><p>Fedora 使用 yum:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install kernel-modules-extra.x86_64 lksctp-tools.x86_64</span><br></pre></td></tr></table></figure><p>虽然只有<a href="http://www.ietf.org/rfc/rfc2960.txt" target="_blank" rel="noopener">SCTP</a>具有这些特殊的要求，对应的特定的传输也有推荐的配置。想想也是，一个服务器平台可能会需要支持较高的数量的并发连接比单个客户端的话。</p><p>下面是你可能遇到的用例:</p><ul><li>OIO-在低连接数、需要低延迟时、阻塞时使用</li><li>NIO-在高连接数时使用</li><li>Local-在同一个JVM内通信时使用</li><li>Embedded-测试ChannelHandler时使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty入门应用</title>
      <link href="/posts/4bc2/"/>
      <url>/posts/4bc2/</url>
      
        <content type="html"><![CDATA[<h4 id="Nettey时间服务器服务端TimeServer"><a href="#Nettey时间服务器服务端TimeServer" class="headerlink" title="Nettey时间服务器服务端TimeServer"></a>Nettey时间服务器服务端TimeServer</h4><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lanniuh.netty.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by linjian</span></span><br><span class="line"><span class="comment"> * 16/8/5.**</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="keyword">null</span> &amp;&amp; args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                port = Integer.valueOf(args[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> TimeServer().bind(port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//配置服务端NIO线程组</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).option(ChannelOption.SO_BACKLOG,<span class="number">1024</span>).childHandler(<span class="keyword">new</span> ChildChannelHandler());</span><br><span class="line">            <span class="comment">//绑定端口,同步等待成功</span></span><br><span class="line">            ChannelFuture f = b.bind(port).sync();</span><br><span class="line">            <span class="comment">//等待服务端监听端口关闭</span></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//优雅退出,释放线程池资源</span></span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildChannelHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            socketChannel.pipeline().addLast(<span class="keyword">new</span> TimeServerHandler());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NioEventLoopGroup是个线程组，包含了一组NIO线程，专门用于网络时间的处理，实际上她们就是Reactor线程组。这里创建两个的原因是一个用于服务端接受客户端的连接，另一个用于进行SocketChannel的网络读写。 ServerBootstrap是Netty用于启动NIO服务端的辅助启动类，目的是降低服务端的开发复杂度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).option(ChannelOption.SO_BACKLOG,<span class="number">1024</span>).childHandler(<span class="keyword">new</span> ChildChannelHandler());</span><br></pre></td></tr></table></figure><p>调用ServerBootstrap的group方法，将两个NIO线程组当作入参传递到ServerBootstrap中，接着设置创建的Channel为NioServerSocketChannel，然后配置NioServerSocketChannel的TCP参数，最后绑定I/O事件的处理类ChildChannelHandler，它的作用类似于Reactor模式中的handler类，主要用于处理网络I/O事件，例如记录日至、对消息进行编解码等。 服务端启动辅助类配置完成之后，调用它的bind方法绑定监听端口，随后，调用它的同步阻塞方法sync等待绑定操作完成。完成之后Netty会返回一个Channel Future，主要用于异步操作的通知回调。</p><h4 id="Netty时间服务器服务端TimeServerHandler"><a href="#Netty时间服务器服务端TimeServerHandler" class="headerlink" title="Netty时间服务器服务端TimeServerHandler"></a>Netty时间服务器服务端TimeServerHandler</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lanniuh.netty.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by linjian</span></span><br><span class="line"><span class="comment"> * 16/8/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        <span class="keyword">byte</span>[] req = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">        buf.readBytes(req);</span><br><span class="line">        String body = <span class="keyword">new</span> String(req, <span class="string">"utf-8"</span>);</span><br><span class="line">        System.out.println(<span class="string">"The time server receive order: "</span> + body);</span><br><span class="line">        String currentTime = <span class="string">"QUERY TIME ORDER"</span>.equalsIgnoreCase(body) ? (<span class="keyword">new</span> Date(System.currentTimeMillis())).toString() : <span class="string">"BAD ORDER"</span>;</span><br><span class="line">        ByteBuf resp = Unpooled.copiedBuffer(currentTime.getBytes());</span><br><span class="line">        ctx.write(resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Netty时间服务器客户端TimeClient"><a href="#Netty时间服务器客户端TimeClient" class="headerlink" title="Netty时间服务器客户端TimeClient"></a>Netty时间服务器客户端TimeClient</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lanniuh.netty.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by linjian</span></span><br><span class="line"><span class="comment"> * 16/8/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="keyword">null</span> &amp;&amp; args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                port = Integer.valueOf(args[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> TimeClient().connect(port,<span class="string">"127.0.0.1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> port,String host)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//配置客户端NIO线程组</span></span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            b.group(group).channel(NioSocketChannel.class).option(ChannelOption.TCP_NODELAY,<span class="keyword">true</span>).handler(<span class="keyword">new</span> ChannelInitializer() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    socketChannel.pipeline().addLast(<span class="keyword">new</span> TimeClientHandler());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//发起异步连接操作</span></span><br><span class="line">            ChannelFuture f = b.connect(host,port).sync();</span><br><span class="line">            <span class="comment">//等待客户端链路关闭</span></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//优雅退出,释放NIO线程组</span></span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Netty时间服务器客户端TimeClientHandler"><a href="#Netty时间服务器客户端TimeClientHandler" class="headerlink" title="Netty时间服务器客户端TimeClientHandler"></a>Netty时间服务器客户端TimeClientHandler</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lanniuh.netty.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by linjian</span></span><br><span class="line"><span class="comment"> * 16/8/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ByteBuf firstMessage;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(TimeClientHandler.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimeClientHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] req = <span class="string">"QUERY TIME ORDER"</span>.getBytes();</span><br><span class="line">        firstMessage = Unpooled.buffer(req.length);</span><br><span class="line">        firstMessage.writeBytes(req);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.writeAndFlush(firstMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        <span class="keyword">byte</span>[] req = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">        buf.readBytes(req);</span><br><span class="line">        String body = <span class="keyword">new</span> String(req, <span class="string">"utf-8"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Now is :"</span> + body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        logger.warning(<span class="string">"Unexcepted exception from downstream : "</span> + cause.getMessage());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点关注三个方法：channelActive、channelRead和exceptionCaught。当客户端和服务端TCP链路建立成功之后，Netty的NIO线程会调用activeChannel方法，发送查询时间的指令给服务端，调用ChannelHandlerContext的writeAndFlush方法将请求消息发送给服务端。 当服务端返回应答消息时，channelRead方法被调用。</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty快速入门</title>
      <link href="/posts/8500/"/>
      <url>/posts/8500/</url>
      
        <content type="html"><![CDATA[<h3 id="BOOTSTRAP"><a href="#BOOTSTRAP" class="headerlink" title="BOOTSTRAP"></a>BOOTSTRAP</h3><p>Netty 应用程序通过设置 bootstrap（引导）类的开始，该类提供了一个 用于应用程序网络层配置的容器。</p><a id="more"></a><h3 id="CHANNEL"><a href="#CHANNEL" class="headerlink" title="CHANNEL"></a>CHANNEL</h3><p>底层网络传输 API 必须提供给应用 I/O操作的接口，如读，写，连接，绑定等等。对于我们来说，这是结构几乎总是会成为一个“socket”。 Netty 中的接口 Channel 定义了与 socket 丰富交互的操作集：bind, close, config, connect, isActive, isOpen, isWritable, read, write 等等。 Netty 提供大量的 Channel 实现来专门使用。这些包括 AbstractChannel，AbstractNioByteChannel，AbstractNioChannel，EmbeddedChannel， LocalServerChannel，NioSocketChannel 等等。</p><h3 id="CHANNELHANDLER"><a href="#CHANNELHANDLER" class="headerlink" title="CHANNELHANDLER"></a>CHANNELHANDLER</h3><p>ChannelHandler 支持很多协议，并且提供用于数据处理的容器。我们已经知道 ChannelHandler 由特定事件触发。 ChannelHandler 可专用于几乎所有的动作，包括将一个对象转为字节（或相反），执行过程中抛出的异常处理。</p><p>常用的一个接口是 ChannelInboundHandler，这个类型接收到入站事件（包括接收到的数据）可以处理应用程序逻辑。当你需要提供响应时，你也可以从 ChannelInboundHandler 冲刷数据。一句话，业务逻辑经常存活于一个或者多个 ChannelInboundHandler。</p><h3 id="CHANNELPIPELINE"><a href="#CHANNELPIPELINE" class="headerlink" title="CHANNELPIPELINE"></a>CHANNELPIPELINE</h3><p>ChannelPipeline 提供了一个容器给 ChannelHandler 链并提供了一个API 用于管理沿着链入站和出站事件的流动。每个 Channel 都有自己的ChannelPipeline，当 Channel 创建时自动创建的。 ChannelHandler 是如何安装在 ChannelPipeline？ 主要是实现了ChannelHandler 的抽象 ChannelInitializer。ChannelInitializer子类 通过 ServerBootstrap 进行注册。当它的方法 initChannel() 被调用时，这个对象将安装自定义的 ChannelHandler 集到 pipeline。当这个操作完成时，ChannelInitializer 子类则 从 ChannelPipeline 自动删除自身。</p><h3 id="EVENTLOOP"><a href="#EVENTLOOP" class="headerlink" title="EVENTLOOP"></a>EVENTLOOP</h3><p>EventLoop 用于处理 Channel 的 I/O 操作。一个单一的 EventLoop通常会处理多个 Channel 事件。一个 EventLoopGroup 可以含有多于一个的 EventLoop 和 提供了一种迭代用于检索清单中的下一个。</p><h3 id="CHANNELFUTURE"><a href="#CHANNELFUTURE" class="headerlink" title="CHANNELFUTURE"></a>CHANNELFUTURE</h3><p>Netty 所有的 I/O 操作都是异步。因为一个操作可能无法立即返回，我们需要有一种方法在以后确定它的结果。出于这个目的，Netty 提供了接口 ChannelFuture,它的 addListener 方法注册了一个 ChannelFutureListener ，当操作完成时，可以被通知（不管成功与否）。</p><p><em>更多关于 ChannelFuture</em></p><p><em>想想一个 ChannelFuture 对象作为一个未来执行操作结果的占位符。何时执行取决于几个因素，因此不可能预测与精确。但我们可以肯定的是，它会被执行。此外，所有的操作返回 ChannelFuture 对象和属于同一个 Channel 将在以正确的顺序被执行，在他们被调用后。</em></p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChannelHandler 和 ChannelPipeline</title>
      <link href="/posts/306/"/>
      <url>/posts/306/</url>
      
        <content type="html"><![CDATA[<p>ChannelPipeline 是 ChannelHandler 链的容器。</p><p>在许多方面的 ChannelHandler 是在您的应用程序的核心，尽管有时它 可能并不明显。ChannelHandler 支持广泛的用途，使它难以界定。因此，最好是把它当作一个通用的容器，处理进来的事件（包括数据）并且通过ChannelPipeline。下图展示了 ChannelInboundHandler 和 ChannelOutboundHandler 继承自父接口 ChannelHandler。</p><a id="more"></a><p>Figure 3.3 ChannelHandler class hierarchy</p><p><img src="https://waylau.gitbooks.io/essential-netty-in-action/images/Figure%203.3%20ChannelHandler%20class%20hierarchy.jpg" alt><img src="https://waylau.gitbooks.io/essential-netty-in-action/images/Figure%203.3%20ChannelHandler%20class%20hierarchy.jpg" alt></p><p>Netty 中有两个方向的数据流，图3.4 显示的入站(ChannelInboundHandler)和出站(ChannelOutboundHandler)之间有一个明显的区别：若数据是从用户应用程序到远程主机则是“出站(outbound)”，相反若数据时从远程主机到用户应用程序则是“入站(inbound)”。</p><p>为了使数据从一端到达另一端，一个或多个 ChannelHandler 将以某种方式操作数据。这些 ChannelHandler 会在程序的“引导”阶段被添加ChannelPipeline中，并且被添加的顺序将决定处理数据的顺序。</p><p>Figure 3.4 ChannelPipeline with inbound and outbound ChannelHandlers</p><p><img src="https://waylau.gitbooks.io/essential-netty-in-action/images/Figure%203.4%20ChannelPipeline%20with%20inbound%20and%20outbound%20ChannelHandlers.jpg" alt><img src="https://waylau.gitbooks.io/essential-netty-in-action/images/Figure%203.4%20ChannelPipeline%20with%20inbound%20and%20outbound%20ChannelHandlers.jpg" alt></p><p>图 3.4 同样展示了进站和出站的处理器都可以被安装在相同的 pipeline 。本例子中，如果消息或任何其他入站事件被读到，将从 pipeline 头部开始，传递到第一个 ChannelInboundHandler。该处理器可能会或可能不会实际修改数据，取决于其特定的功能，在这之后 该数据将被传递到链中的下一个 ChannelInboundHandler。最后，将数据 到达 pipeline 的尾部，此时所有处理结束。</p><p>数据的出站运动（即，数据被“写入”）在概念上是相同的。在这种情况下的数据从尾部流过 ChannelOutboundHandlers 的链，直到它到达头部。超过这点，出站数据将到达的网络传输，在这里显示为一个 socket。通常，这将触发一个写入操作。</p><p><em>更多 Inbound 、 Outbound Handler</em></p><p><em>在当前的链（chain）中，事件可以通过 ChanneHandlerContext 传递给下一个 handler。Netty 为此提供了抽象基类ChannelInboundHandlerAdapter 和 hannelOutboundHandlerAdapter，用来处理你想要的事件。 这些类提供的方法的实现，可以简单地通过调用 ChannelHandlerContext 上的相应方法将事件传递给下一个 handler。在实际应用中，您可以按需覆盖相应的方法即可。</em></p><p>所以，如果出站和入站操作是不同的，当 ChannelPipeline 中有混合处理器时将发生什么？虽然入站和出站处理器都扩展了 ChannelHandler，Netty 的 ChannelInboundHandler 的实现 和 ChannelOutboundHandler 之间的是有区别的，从而保证数据传递只从一个处理器到下一个处理器保证正确的类型。</p><p>当 ChannelHandler 被添加到的 ChannelPipeline 它得到一个 ChannelHandlerContext，它代表一个 ChannelHandler 和 ChannelPipeline 之间的“绑定”。它通常是安全保存对此对象的引用，除了当协议中的使用的是不面向连接（例如，UDP）。而该对象可以被用来获得 底层 Channel,它主要是用来写出站数据。</p><p>还有，实际上，在 Netty 发送消息有两种方式。您可以直接写消息给 Channel 或写入 ChannelHandlerContext 对象。主要的区别是， 前一种方法会导致消息从 ChannelPipeline的尾部开始，而 后者导致消息从 ChannelPipeline 下一个处理器开始。</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Channel, Event 和 I/O</title>
      <link href="/posts/62ad/"/>
      <url>/posts/62ad/</url>
      
        <content type="html"><![CDATA[<h1 id="Channel-Event-和-I-O"><a href="#Channel-Event-和-I-O" class="headerlink" title="Channel, Event 和 I/O"></a>Channel, Event 和 I/O</h1><p>Netty 是一个非阻塞、事件驱动的网络框架。Netty 实际上是使用 Threads（多线程）处理 I/O 事件，对于熟悉多线程编程的读者可能会需要关注同步代码。这样的方式不好，因为同步会影响程序的性能，Netty 的设计保证程序处理事件不会有同步。图 Figure 3.1 展示了，你不需要在 Channel 之间共享 ChannelHandler 实例的原因：</p><a id="more"></a><p><img src="https://waylau.gitbooks.io/essential-netty-in-action/images/Figure%203.1.jpg" alt><img src="https://waylau.gitbooks.io/essential-netty-in-action/images/Figure%203.1.jpg" alt></p><p>该图显示，一个 EventLoopGroup 具有一个或多个 EventLoop。想象 EventLoop 作为一个 Thread 给 Channel 执行工作。 （事实上，一个 EventLoop 是势必为它的生命周期一个线程。）</p><p>当创建一个 Channel，Netty 通过 一个单独的 EventLoop 实例来注册该 Channel（并同样是一个单独的 Thread）的通道的使用寿命。这就是为什么你的应用程序不需要同步 Netty 的 I/O操作;所有 Channel 的 I/O 始终用相同的线程来执行。</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是 Bootstrapping 为什么要用</title>
      <link href="/posts/a4c0/"/>
      <url>/posts/a4c0/</url>
      
        <content type="html"><![CDATA[<p>Bootstrapping（引导） 是 Netty 中配置程序的过程，当你需要连接客户端或服务器绑定指定端口时需要使用 Bootstrapping。</p><a id="more"></a><p>如前面所述，Bootstrapping 有两种类型，一种是用于客户端的Bootstrap，一种是用于服务端的ServerBootstrap。不管程序使用哪种协议，无论是创建一个客户端还是服务器都需要使用“引导”。</p><p><em>面向连接 vs. 无连接</em></p><p><em>请记住，这个讨论适用于 TCP 协议，它是“面向连接”的。这样协议保证该连接的端点之间的消息的有序输送。无连接协议发送的消息，无法保证顺序和成功性</em></p><p>两种 Bootstrapping 之间有一些相似之处，也有一些不同。Bootstrap 和 ServerBootstrap 之间的差异如下：</p><p>Table 3.1 Comparison of Bootstrap classes</p><table><thead><tr><th>分类</th><th>Bootstrap</th><th>ServerBootstrap</th></tr></thead><tbody><tr><td>网络功能</td><td>连接到远程主机和端口</td><td>绑定本地端口</td></tr><tr><td>EventLoopGroup 数量</td><td>1</td><td>2</td></tr></tbody></table><p>Bootstrap用来连接远程主机，有1个EventLoopGroup</p><p>ServerBootstrap用来绑定本地端口，有2个EventLoopGroup</p><p>事件组(Groups)，传输(transports)和处理程序(handlers)分别在本章后面讲述，我们在这里只讨论两种”引导”的差异(Bootstrap和ServerBootstrap)。第一个差异很明显，“ServerBootstrap”监听在服务器监听一个端口轮询客户端的“Bootstrap”或DatagramChannel是否连接服务器。通常需要调用“Bootstrap”类的connect()方法，但是也可以先调用bind()再调用connect()进行连接，之后使用的Channel包含在bind()返回的ChannelFuture中。</p><p>一个 ServerBootstrap 可以认为有2个 Channel 集合，第一个集合包含一个单例 ServerChannel，代表持有一个绑定了本地端口的 socket；第二集合包含所有创建的 Channel，处理服务器所接收到的客户端进来的连接。下图形象的描述了这种情况：</p><p><img src="https://waylau.gitbooks.io/essential-netty-in-action/images/Figure%203.2%20Server%20with%20two%20EventLoopGroups.jpg" alt><img src="https://waylau.gitbooks.io/essential-netty-in-action/images/Figure%203.2%20Server%20with%20two%20EventLoopGroups.jpg" alt></p><p>与 ServerChannel 相关 EventLoopGroup 分配一个 EventLoop 是 负责创建 Channels 用于传入的连接请求。一旦连接接受，第二个EventLoopGroup 分配一个 EventLoop 给它的 Channel。</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包含的 Transport</title>
      <link href="/posts/47b/"/>
      <url>/posts/47b/</url>
      
        <content type="html"><![CDATA[<p>Netty 自带了一些传输协议的实现，虽然没有支持所有的传输协议，但是其自带的已足够我们来使用。Netty应用程序的传输协议依赖于底层协议，本节我们将学习Netty中的传输协议。</p><a id="more"></a><p>Netty中的传输方式有如下几种：</p><p>Table 4.1 Provided transports</p><table><thead><tr><th>方法名称</th><th>包</th><th>描述</th></tr></thead><tbody><tr><td>NIO</td><td>io.netty.channel.socket.nio</td><td>基于java.nio.channels的工具包，使用选择器作为基础的方法。</td></tr><tr><td>OIO</td><td>io.netty.channel.socket.oio</td><td>基于java.net的工具包，使用阻塞流。</td></tr><tr><td>Local</td><td>io.netty.channel.local</td><td>用来在虚拟机之间本地通信。</td></tr><tr><td>Embedded</td><td>io.netty.channel.embedded</td><td>嵌入传输，它允许在没有真正网络的传输中使用 ChannelHandler，可以非常有用的来测试ChannelHandler的实现。</td></tr></tbody></table><h3 id="NIO-Nonblocking-I-O"><a href="#NIO-Nonblocking-I-O" class="headerlink" title="NIO-Nonblocking I/O"></a>NIO-Nonblocking I/O</h3><p>NIO传输是目前最常用的方式，它通过使用选择器提供了完全异步的方式操作所有的 I/O，NIO 从Java 1.4才被提供。</p><p>NIO 中，我们可以注册一个通道或获得某个通道的改变的状态，通道状态有下面几种改变：</p><ul><li>一个新的 Channel 被接受并已准备好</li><li>Channel 连接完成</li><li>Channel 中有数据并已准备好读取</li><li>Channel 发送数据出去</li></ul><p>处理完改变的状态后需重新设置他们的状态，用一个线程来检查是否有已准备好的 Channel，如果有则执行相关事件。在这里可能只同时一个注册的事件而忽略其他的。选择器所支持的操作在 SelectionKey 中定义，具体如下：</p><p>Table 4.2 Selection operation bit-set</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>OP_ACCEPT</td><td>有新连接时得到通知</td></tr><tr><td>OP_CONNECT</td><td>连接完成后得到通知</td></tr><tr><td>OP_REA</td><td>准备好读取数据时得到通知</td></tr><tr><td>OP_WRITE</td><td>写入更多数据到通道时得到通知，大部分时间</td></tr></tbody></table><p>这是可能的，但有时 socket 缓冲区完全填满了。这通常发生在你写数据的速度太快了超过了远程节点的处理能力。</p><p>Figure 4.2 Selecting and Processing State Changes</p><p><img src="https://waylau.gitbooks.io/essential-netty-in-action/images/Figure%204.2%20Selecting%20and%20Processing%20State%20Changes.jpg" alt><img src="https://waylau.gitbooks.io/essential-netty-in-action/images/Figure%204.2%20Selecting%20and%20Processing%20State%20Changes.jpg" alt></p><p>1.新信道注册 WITH 选择器</p><p>2.选择处理的状态变化的通知</p><p>3.以前注册的通道</p><p>4.Selector.select（）方法阻塞，直到新的状态变化接收或配置的超时 已过</p><p>5.检查是否有状态变化</p><p>6.处理所有的状态变化</p><p>7.在选择器操作的同一个线程执行其他任务</p><p>有一种功能，目前仅适用于 NIO 传输叫什么 “zero-file-copy （零文件拷贝）”，这使您能够快速，高效地通过移动数据到从文件系统传输内容 网络协议栈而无需复制从内核空间到用户空间。这可以使 FT P或 HTTP 协议有很大的不同。</p><p>然而，并非所有的操作系统都支持此功能。此外，你不能用它实现数据加密或压缩文件系统 - 仅支持文件的原生内容。另一方面，传送的文件原本已经加密的是完全有效的。</p><p>接下来，我们将讨论的是 OIO ，它提供了一个阻塞传输。</p><h3 id="OIO-Old-blocking-I-O"><a href="#OIO-Old-blocking-I-O" class="headerlink" title="OIO-Old blocking I/O"></a>OIO-Old blocking I/O</h3><p>Netty 中，该 OIO 传输代表了一种妥协。它通过了 Netty 的通用 API 访问但不是异步，而是构建在 java.net 的阻塞实现上。任何人下面讨论这一点可能会认为，这个协议并没有很大优势。但它确实有它有效的用途。</p><p>假设你需要的端口使用该做阻塞调用库（例如<a href="http://www.oracle.com/technetwork/java/javase/jdbc/index.html" target="_blank" rel="noopener">JDBC</a>）。它可能不适合非阻塞。相反，你可以在短期内使用 OIO 传输，后来移植到纯异步的传输上。让我们看看它是如何工作的。</p><p>在 java.net API，你通常有一个线程接受新的连接到达监听在ServerSocket，并创建一个新的线程来处理新的 Socket 。这是必需的，因为在一个特定的 socket的每个 I/O 操作可能会阻塞在任何时间。在一个线程处理多个 socket 易造成阻塞操作，一个　socket　占用了所有的其他人。</p><p>鉴于此，你可能想知道　Netty　是如何用相同的　API　来支持　NIO　的异步传输。这里的　Netty　利用了　SO_TIMEOUT　标志，可以设置在一个　Socket。这　timeout　指定最大　毫秒　数量　用于等待　I/O　的操作完成。如果操作在指定的时间内失败，SocketTimeoutException　会被抛出。 Netty中捕获该异常并继续处理循环。在接下来的事件循环运行，它再次尝试。像　Netty　的异步架构来支持　OIO　的话，这其实是唯一的办法。当SocketTimeoutException　抛出时，执行　stack trace。</p><p>Figure 4.3 OIO-Processing logic</p><p><img src="https://waylau.gitbooks.io/essential-netty-in-action/images/Figure%204.3%20OIO-Processing%20logic.jpg" alt><img src="https://waylau.gitbooks.io/essential-netty-in-action/images/Figure%204.3%20OIO-Processing%20logic.jpg" alt></p><p>1.线程分配给 Socket</p><p>2.Socket 连接到远程</p><p>3.读操作（可能会阻塞）</p><p>4.读完成</p><p>5.处理可读的字节</p><p>6.执行提交到 socket 的其他任务</p><p>7.再次尝试读</p><h3 id="同个-JVM-内的本地-Transport-通信"><a href="#同个-JVM-内的本地-Transport-通信" class="headerlink" title="同个 JVM 内的本地 Transport 通信"></a>同个 JVM 内的本地 Transport 通信</h3><p>Netty 提供了“本地”传输，为运行在同一个 Java 虚拟机上的服务器和客户之间提供异步通信。此传输支持所有的 Netty 常见的传输实现的 API。</p><p>在此传输中，与服务器 Channel 关联的 SocketAddress 不是“绑定”到一个物理网络地址中，而是在服务器是运行时它被存储在注册表中，当 Channel 关闭时它会注销。由于该传输不是“真正的”网络通信，它不能与其他传输实现互操作。因此，客户端是希望连接到使用本地传输的的服务器时，要注意正确的用法。除此限制之外，它的使用是与其他的传输是相同的。</p><h3 id="内嵌-Transport"><a href="#内嵌-Transport" class="headerlink" title="内嵌 Transport"></a>内嵌 Transport</h3><p>Netty中 还提供了可以嵌入 ChannelHandler 实例到其他的 ChannelHandler 的传输，使用它们就像辅助类，增加了灵活性的方法，使您可以与你的 ChannelHandler 互动。</p><p>该嵌入技术通常用于测试 ChannelHandler 的实现，但它也可用于将功能添加到现有的 ChannelHandler 而无需更改代码。嵌入传输的关键是Channel 的实现，称为“EmbeddedChannel”。</p><p>第10章描述了使用 EmbeddedChannel 来测试 ChannelHandlers。</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>案例研究:Transport 的迁移</title>
      <link href="/posts/f2e/"/>
      <url>/posts/f2e/</url>
      
        <content type="html"><![CDATA[<p>为了让你想象 Transport 如何工作，我会从一个简单的应用程序开始，这个应用程序什么都不做，只是接受客户端连接并发送“Hi!”字符串消息到客户端，发送完了就断开连接。</p><a id="more"></a><h3 id="没有用-Netty-实现-I-O-和-NIO"><a href="#没有用-Netty-实现-I-O-和-NIO" class="headerlink" title="没有用 Netty 实现 I/O 和 NIO"></a>没有用 Netty 实现 I/O 和 NIO</h3><p>我们将不用 Netty 实现只用 JDK API 来实现 I/O 和 NIO。下面这个例子，是使用阻塞 IO 实现的例子：</p><p>Listing 4.1 Blocking networking without Netty</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlainOioServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serve</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ServerSocket socket = <span class="keyword">new</span> ServerSocket(port);     <span class="comment">//1</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">final</span> Socket clientSocket = socket.accept();    <span class="comment">//2</span></span><br><span class="line">                System.out.println(<span class="string">"Accepted connection from "</span> + clientSocket);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;                        <span class="comment">//3</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        OutputStream out;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            out = clientSocket.getOutputStream();</span><br><span class="line">                            out.write(<span class="string">"Hi!\r\n"</span>.getBytes(Charset.forName(<span class="string">"UTF-8"</span>)));                            <span class="comment">//4</span></span><br><span class="line">                            out.flush();</span><br><span class="line">                            clientSocket.close();                <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                clientSocket.close();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                                <span class="comment">// ignore on close</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).start();                                        <span class="comment">//6</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.绑定服务器到指定的端口。</p><p>2.接受一个连接。</p><p>3.创建一个新的线程来处理连接。</p><p>4.将消息发送到连接的客户端。</p><p>5.一旦消息被写入和刷新时就 关闭连接。</p><p>6.启动线程。</p><p>上面的方式可以工作正常，但是这种阻塞模式在大连接数的情况就会有很严重的问题，如客户端连接超时，服务器响应严重延迟，性能无法扩展。为了解决这种情况，我们可以使用异步网络处理所有的并发连接，但问题在于 NIO 和 OIO 的 API 是完全不同的，所以一个用OIO开发的网络应用程序想要使用NIO重构代码几乎是重新开发。</p><p>下面代码是使用 NIO 实现的例子：</p><p>Listing 4.2 Asynchronous networking without Netty</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlainNioServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serve</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocketChannel serverChannel = ServerSocketChannel.open();</span><br><span class="line">        serverChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        ServerSocket ss = serverChannel.socket();</span><br><span class="line">        InetSocketAddress address = <span class="keyword">new</span> InetSocketAddress(port);</span><br><span class="line">        ss.bind(address);                                            <span class="comment">//1</span></span><br><span class="line">        Selector selector = Selector.open();                        <span class="comment">//2</span></span><br><span class="line">        serverChannel.register(selector, SelectionKey.OP_ACCEPT);    <span class="comment">//3</span></span><br><span class="line">        <span class="keyword">final</span> ByteBuffer msg = ByteBuffer.wrap(<span class="string">"Hi!\r\n"</span>.getBytes());</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                selector.select();                                    <span class="comment">//4</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">                <span class="comment">// handle exception</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Set readyKeys = selector.selectedKeys();    <span class="comment">//5</span></span><br><span class="line">            Iterator iterator = readyKeys.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                SelectionKey key = iterator.next();</span><br><span class="line">                iterator.remove();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (key.isAcceptable()) &#123;                <span class="comment">//6</span></span><br><span class="line">                        ServerSocketChannel server =</span><br><span class="line">                                (ServerSocketChannel)key.channel();</span><br><span class="line">                        SocketChannel client = server.accept();</span><br><span class="line">                        client.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                        client.register(selector, SelectionKey.OP_WRITE |</span><br><span class="line">                                SelectionKey.OP_READ, msg.duplicate());    <span class="comment">//7</span></span><br><span class="line">                        System.out.println(</span><br><span class="line">                                <span class="string">"Accepted connection from "</span> + client);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (key.isWritable()) &#123;                <span class="comment">//8</span></span><br><span class="line">                        SocketChannel client =</span><br><span class="line">                                (SocketChannel)key.channel();</span><br><span class="line">                        ByteBuffer buffer =</span><br><span class="line">                                (ByteBuffer)key.attachment();</span><br><span class="line">                        <span class="keyword">while</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (client.write(buffer) == <span class="number">0</span>) &#123;        <span class="comment">//9</span></span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        client.close();                    <span class="comment">//10</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                    key.cancel();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        key.channel().close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException cex) &#123;</span><br><span class="line">                        <span class="comment">// 在关闭时忽略</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.绑定服务器到制定端口</p><p>2.打开 selector 处理 channel</p><p>3.注册 ServerSocket 到 ServerSocket ，并指定这是专门意接受 连接。</p><p>4.等待新的事件来处理。这将阻塞，直到一个事件是传入。</p><p>5.从收到的所有事件中 获取 SelectionKey 实例。</p><p>6.检查该事件是一个新的连接准备好接受。</p><p>7.接受客户端，并用 selector 进行注册。</p><p>8.检查 socket 是否准备好写数据。</p><p>9.将数据写入到所连接的客户端。如果网络饱和，连接是可写的，那么这个循环将写入数据，直到该缓冲区是空的。</p><p>10.关闭连接。</p><p>如你所见，即使它们实现的功能是一样，但是代码完全不同。下面我们将用Netty 来实现相同的功能。</p><h3 id="采用-Netty-实现-I-O-和-NIO"><a href="#采用-Netty-实现-I-O-和-NIO" class="headerlink" title="采用 Netty 实现 I/O 和 NIO"></a>采用 Netty 实现 I/O 和 NIO</h3><p>下面代码是使用Netty作为网络框架编写的一个阻塞 IO 例子：</p><p>Listing 4.3 Blocking networking with Netty</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyOioServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ByteBuf buf = Unpooled.unreleasableBuffer(</span><br><span class="line">                Unpooled.copiedBuffer(<span class="string">"Hi!\r\n"</span>, Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> OioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();        <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">            b.group(group)                                    <span class="comment">//2</span></span><br><span class="line">             .channel(OioServerSocketChannel.class)</span><br><span class="line">             .localAddress(<span class="keyword">new</span> InetSocketAddress(port))</span><br><span class="line">             .childHandler(<span class="keyword">new</span> ChannelInitializer() &#123;<span class="comment">//3</span></span><br><span class="line">                 <span class="meta">@Override</span></span><br><span class="line">                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> </span></span><br><span class="line"><span class="function">                     <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                     ch.pipeline().addLast(<span class="keyword">new</span> ChannelInboundHandlerAdapter() &#123;            <span class="comment">//4</span></span><br><span class="line">                         <span class="meta">@Override</span></span><br><span class="line">                         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                             ctx.writeAndFlush(buf.duplicate()).addListener(ChannelFutureListener.CLOSE);<span class="comment">//5</span></span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;);</span><br><span class="line">            ChannelFuture f = b.bind().sync();  <span class="comment">//6</span></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully().sync();        <span class="comment">//7</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.创建一个 ServerBootstrap</p><p>2.使用 OioEventLoopGroup 允许阻塞模式</p><p>3.指定 ChannelInitializer 将给每个接受的连接调用</p><p>4.添加的 ChannelHandler 拦截事件，并允许他们作出反应</p><p>5.写信息到客户端，并添加 ChannelFutureListener 当一旦消息写入就关闭连接</p><p>6.绑定服务器来接受连接</p><p>7.释放所有资源</p><p>下面代码是使用 Netty NIO 实现。</p><h3 id="Netty-NIO-版本"><a href="#Netty-NIO-版本" class="headerlink" title="Netty NIO 版本"></a>Netty NIO 版本</h3><p>下面是 Netty NIO 的代码，只是改变了一行代码，就从 OIO 传输 切换到了 NIO。</p><p>Listing 4.4 Asynchronous networking with Netty</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyNioServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ByteBuf buf = Unpooled.unreleasableBuffer(</span><br><span class="line">                Unpooled.copiedBuffer(<span class="string">"Hi!\r\n"</span>, Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">    NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();    <span class="comment">//1</span></span><br><span class="line">            b.group(bossGroup, workerGroup)   <span class="comment">//2</span></span><br><span class="line">             .channel(NioServerSocketChannel.class)</span><br><span class="line">             .localAddress(<span class="keyword">new</span> InetSocketAddress(port))</span><br><span class="line">             .childHandler(<span class="keyword">new</span> ChannelInitializer() &#123;    <span class="comment">//3</span></span><br><span class="line">                 <span class="meta">@Override</span></span><br><span class="line">                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> </span></span><br><span class="line"><span class="function">                     <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                     ch.pipeline().addLast(<span class="keyword">new</span> ChannelInboundHandlerAdapter() &#123;    <span class="comment">//4</span></span><br><span class="line">                         <span class="meta">@Override</span></span><br><span class="line">                         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                             ctx.writeAndFlush(buf.duplicate())                <span class="comment">//5</span></span><br><span class="line">                                .addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;);</span><br><span class="line">            ChannelFuture f = b.bind().sync();                    <span class="comment">//6</span></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully().sync();                    <span class="comment">//7</span></span><br><span class="line">        workerGroup.shutdownGracefully().sync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.创建一个 ServerBootstrap</p><p>2.使用 NioEventLoopGroup 允许非阻塞模式（NIO）</p><p>3.指定 ChannelInitializer 将给每个接受的连接调用</p><p>4.添加的 ChannelInboundHandlerAdapter() 接收事件并进行处理</p><p>5.写信息到客户端，并添加 ChannelFutureListener 当一旦消息写入就关闭连接</p><p>6.绑定服务器来接受连接</p><p>7.释放所有资源</p><p>因为 Netty 使用相同的 API 来实现每个传输，它并不关心你使用什么来实现。Netty 通过操作接口Channel 、ChannelPipeline 和 ChannelHandler来实现。</p><p>现在你了解到了用 基于 Netty 传输的好处。下面就来看下传输的 API.</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STR_TO_DATE</title>
      <link href="/posts/eed8/"/>
      <url>/posts/eed8/</url>
      
        <content type="html"><![CDATA[<h3 id="STR-TO-DATE-str-format"><a href="#STR-TO-DATE-str-format" class="headerlink" title="STR_TO_DATE(str,format)"></a>STR_TO_DATE(<strong><em>str</em></strong>,<strong><em>format</em></strong>)</h3><p>This is the inverse of the<a href="https://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html#function_date-format" target="_blank" rel="noopener"><code>DATE_FORMAT()</code></a>function. It takes a string <em>str</em> and a format string <em>format</em> .<a href="https://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html#function_str-to-date" target="_blank" rel="noopener"><code>STR_TO_DATE()</code></a>returns a<a href="https://dev.mysql.com/doc/refman/5.5/en/datetime.html" title="11.3.1 The DATE, DATETIME, and TIMESTAMP Types" target="_blank" rel="noopener"><code>DATETIME</code></a>value if the format string contains both date and time parts, or a<a href="https://dev.mysql.com/doc/refman/5.5/en/datetime.html" title="11.3.1 The DATE, DATETIME, and TIMESTAMP Types" target="_blank" rel="noopener"><code>DATE</code></a>or<a href="https://dev.mysql.com/doc/refman/5.5/en/time.html" title="11.3.2 The TIME Type" target="_blank" rel="noopener"><code>TIME</code></a>value if the string contains only date or time parts. If the date, time, or datetime value extracted from <strong><em>str</em></strong> is illegal,<a href="https://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html#function_str-to-date" target="_blank" rel="noopener"><code>STR_TO_DATE()</code></a>returns<code>NULL</code>and produces a warning.</p><p>The server scans <strong><em>str</em></strong> attempting to match <em>format</em> to it. The format string can contain literal characters and format specifiers beginning with<code>%</code>. Literal characters in <strong><em>format</em></strong> must match literally in <strong><em>str</em></strong> . Format specifiers in <strong><em>format</em></strong> must match a date or time part in <strong><em>str</em></strong> . For the specifiers that can be used in <strong><em>format</em></strong>, see the<a href="https://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html#function_date-format" target="_blank" rel="noopener"><code>DATE_FORMAT()</code></a>function description.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT STR_TO_DATE('01,5,2013','%d,%m,%Y');</span><br><span class="line">        -&gt; '2013-05-01'</span><br><span class="line">mysql&gt; SELECT STR_TO_DATE('May 1, 2013','%M %d,%Y');</span><br><span class="line">        -&gt; '2013-05-01</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql锁机制</title>
      <link href="/posts/33e8/"/>
      <url>/posts/33e8/</url>
      
        <content type="html"><![CDATA[<p><strong><code>行级锁</code></strong></p><ul><li><p>劣势：开销大，加锁慢；会出现死锁；</p></li><li><p>优势：锁定粒度小，发生锁冲突的概率最低，并发度也最高。</p><a id="more"></a></li></ul><p><strong><code>页级锁</code></strong></p><ul><li><p>开销和加锁时间介于表锁和行锁之间；会出现死锁；</p></li><li><p>锁定粒度介于表锁和行锁之间，并发处理能力一般。只需了解一下。</p></li></ul><p><strong><code>表级锁</code></strong></p><ul><li><p>劣势：锁定粒度大，发生锁冲突的概率最高，并发度最低。</p></li><li><p>优势：开销小，加锁快；不会出现死锁；</p></li><li><p>共享读锁：lock table tableName read;</p></li><li><p>独占写锁：lock table tableName write;</p></li><li><p>批量解锁：unlock tables;</p></li></ul><h3 id="MySQL-事务属性"><a href="#MySQL-事务属性" class="headerlink" title="MySQL 事务属性"></a>MySQL 事务属性</h3><p>事务是由一组SQL语句组成的逻辑处理单元，事务具有ACID属性。 <strong><code>原子性</code></strong>（Atomicity）：事务是一个原子操作单元。在当时原子是不可分割的最小元素，其对数据的修改，要么全部成功，要么全部都不成功。 <strong><code>一致性</code></strong>（Consistent）：事务开始到结束的时间段内，数据都必须保持一致状态。 <strong><code>隔离性</code></strong>（Isolation）：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的”独立”环境执行。 <strong><code>持久性</code></strong>（Durable）：事务完成后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。</p><h3 id="事务常见问题"><a href="#事务常见问题" class="headerlink" title="事务常见问题"></a>事务常见问题</h3><p><strong>更新丢失</strong>（Lost Update） 原因：当多个事务选择同一行操作，并且都是基于最初选定的值，由于每个事务都不知道其他事务的存在，就会发生更新覆盖的问题。类比github提交冲突。</p><p><strong>脏读</strong>（Dirty Reads） 原因：事务A读取了事务B已经修改但尚未提交的数据。若事务B回滚数据，事务A的数据存在不一致性的问题。</p><p><strong>不可重复读</strong>（Non-Repeatable Reads） 原因：事务A第一次读取最初数据，第二次读取事务B已经提交的修改或删除数据。导致两次读取数据不一致。不符合事务的隔离性。</p><p><strong>幻读</strong>（Phantom Reads） 原因：事务A根据相同条件第二次查询到事务B提交的新增数据，两次数据结果集不一致。不符合事务的隔离性。</p><p>幻读和脏读有点类似 脏读是事务B里面修改了数据， 幻读是事务B里面新增了数据。</p><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><p>数据库的事务隔离越严格，并发副作用越小，但付出的代价也就越大。这是因为事务隔离实质上是将事务在一定程度上”串行”进行，这显然与”并发”是矛盾的。根据自己的业务逻辑，权衡能接受的最大副作用。从而平衡了”隔离” 和 “并发”的问题。MySQL默认隔离级别是可重复读。脏读，不可重复读，幻读，其实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决。</p><table><thead><tr><th>隔离级别</th><th>读数据一致性</th><th>脏读</th><th>不可重复 读</th><th>幻读</th></tr></thead><tbody><tr><td>未提交读(Read uncommitted)</td><td>最低级别</td><td>是</td><td>是</td><td>是</td></tr><tr><td>已提交读(Read committed)</td><td>语句级</td><td>否</td><td>是</td><td>是</td></tr><tr><td>可重复读(Repeatable read)</td><td>事务级</td><td>否</td><td>否</td><td>是</td></tr><tr><td>可序列化(Serializable)</td><td>最高级别，事务级</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><p>查看当前数据库的事务隔离级别：show variables like ‘tx_isolation’;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like 'tx_isolation';</span><br><span class="line">+<span class="comment">---------------+-----------------+</span></span><br><span class="line">| Variable_name | Value           |</span><br><span class="line">+<span class="comment">---------------+-----------------+</span></span><br><span class="line">| tx_isolation  | REPEATABLE-READ |</span><br><span class="line">+<span class="comment">---------------+-----------------+</span></span><br></pre></td></tr></table></figure><h3 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h3><p>当我们用范围条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在的记录，叫做”间隙(GAP)”。InnoDB也会对这个”间隙”加锁，这种锁机制就是所谓的间隙锁(Next-Key锁)。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Transaction-A</span><br><span class="line">mysql&gt; update innodb_lock set k=66 where id &gt;=6;</span><br><span class="line">Query OK, 1 row affected (0.63 sec)</span><br><span class="line">mysql&gt; commit;</span><br><span class="line"></span><br><span class="line">Transaction-B</span><br><span class="line">mysql&gt; insert into innodb_lock (id,k,v) values(7,'7','7000');</span><br><span class="line">Query OK, 1 row affected (18.99 sec)</span><br></pre></td></tr></table></figure><p>危害(坑)：<strong>若执行的条件是范围过大，则InnoDB会将整个范围内所有的索引键值全部锁定，很容易对性能造成影响</strong>。</p><h3 id="锁模式"><a href="#锁模式" class="headerlink" title="锁模式"></a>锁模式</h3><p><strong><code>共享锁（S）</code></strong>：也称读锁，允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。</p><p><strong><code>排他锁（X</code></strong>)：也称写锁，独占锁，允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和排他写锁。另外，为了允许行锁和表锁共存，实现多粒度锁机制，InnoDB还有两种内部使用的意向锁（Intention Locks），这两种意向锁都是表锁。</p><p><strong><code>意向共享锁（IS）</code></strong>：事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前必须先取得该表的IS锁。</p><p><strong><code>意向排他锁（IX）</code></strong>：事务打算给数据行加行排他锁，事务在给一个数据行加排他锁前必须先取得该表的IX锁。</p><h3 id="InnoDB的行锁加锁方法"><a href="#InnoDB的行锁加锁方法" class="headerlink" title="InnoDB的行锁加锁方法"></a>InnoDB的行锁加锁方法</h3><p>意向锁是InnoDB自动加的，不需用户干预。对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁（X)；对于普通SELECT语句，InnoDB不会加任何锁；事务可以通过以下语句显示给记录集加共享锁或排他锁。</p><ul><li>共享锁（S）：SELECT * FROM table_name WHERE … LOCK IN SHARE MODE。</li><li>排他锁（X)：SELECT * FROM table_name WHERE … FOR UPDATE。</li></ul><h3 id="InnoDB锁的互斥与兼容关系"><a href="#InnoDB锁的互斥与兼容关系" class="headerlink" title="InnoDB锁的互斥与兼容关系"></a>InnoDB锁的互斥与兼容关系</h3><p>锁和锁之间的关系，要么是相容的，要么是互斥的。</p><ul><li>锁a和锁b相容是指：操作同样一组数据时，如果事务t1获取了锁a,另一个事务t2还可以获取锁b；</li><li>锁a和锁b互斥是指：操作同样一组数据时，如果事务t1获取了锁a，另一个事务t2在t1释放锁a之前无法获取锁b。</li></ul><p>(y表示兼容，n表示不兼容)</p><table><thead><tr><th>-</th><th>X</th><th>S</th><th>IX</th><th>IS</th></tr></thead><tbody><tr><td>X</td><td>n</td><td>n</td><td>n</td><td>n</td></tr><tr><td>S</td><td>n</td><td>y</td><td>n</td><td>y</td></tr><tr><td>IX</td><td>n</td><td>n</td><td>y</td><td>y</td></tr><tr><td>IS</td><td>n</td><td>y</td><td>y</td><td>y</td></tr></tbody></table><h3 id="InnoDB行锁实现方式"><a href="#InnoDB行锁实现方式" class="headerlink" title="InnoDB行锁实现方式"></a>InnoDB行锁实现方式</h3><p>InnoDB行锁是通过<strong>给索引上的索引项加锁</strong> 来实现的，这一点MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。</p><p>InnoDB这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁！</p><ul><li>在不通过索引条件查询的时候，InnoDB确实使用的是表锁，而不是行锁。</li><li>由于MySQL的行锁是针对索引加的锁，不是针对记录加的锁，所以虽然是访问不同行的记录，但是如果是使用相同的索引键，是会出现锁冲突的。</li><li>当表有多个索引的时候，不同的事务可以使用不同的索引锁定不同的行，另外，不论是使用主键索引、唯一索引或普通索引，InnoDB都会使用行锁来对数据加锁。</li><li>即便在条件中使用了索引字段，但是否使用索引来检索数据是由MySQL通过判断不同执行计划的代价来决定的，如果MySQL认为全表扫描效率更高，比如对一些很小的表，它就不会使用索引，这种情况下InnoDB将使用表锁，而不是行锁。</li></ul><h3 id="InnoDB间隙锁（Next-Key锁）"><a href="#InnoDB间隙锁（Next-Key锁）" class="headerlink" title="InnoDB间隙锁（Next-Key锁）"></a>InnoDB间隙锁（Next-Key锁）</h3><p>当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在的记录，叫做“间隙（GAP)”，InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁（Next-Key锁）。</p><p><strong>InnoDB使用间隙锁的目的</strong></p><ul><li>一方面是为了防止幻读，以满足相关隔离级别的要求.</li><li>一方面是满足其恢复和复制的需要.</li></ul><h3 id="InnoDB什么时候使用表锁"><a href="#InnoDB什么时候使用表锁" class="headerlink" title="InnoDB什么时候使用表锁"></a>InnoDB什么时候使用表锁</h3><p>对于InnoDB表，在绝大部分情况下都应该使用行级锁，因为事务和行锁往往是我们之所以选择InnoDB表的理由。但在个别特殊事务中，也可以考虑使用表级锁。</p><ul><li>第一种情况是：事务需要更新大部分或全部数据，表又比较大，如果使用默认的行锁，不仅这个事务执行效率低，而且可能造成其他事务长时间锁等待和锁冲突，这种情况下可以考虑使用表锁来提高该事务的执行速度。</li><li>第二种情况是：事务涉及多个表，比较复杂，很可能引起死锁，造成大量事务回滚。这种情况也可以考虑一次性锁定事务涉及的表，从而避免死锁、减少数据库因事务回滚带来的开销。</li></ul><h3 id="InnoDB使用表锁注意事项"><a href="#InnoDB使用表锁注意事项" class="headerlink" title="InnoDB使用表锁注意事项"></a>InnoDB使用表锁注意事项</h3><ol start="2"><li><p>使用LOCK TABLES虽然可以给InnoDB加表级锁，但必须说明的是，表锁不是由InnoDB存储引擎层管理的，而是由其上一层──MySQL Server负责的，仅当autocommit=0、innodb_table_locks=1（默认设置）时，InnoDB层才能知道MySQL加的表锁，MySQL Server也才能感知InnoDB加的行锁，这种情况下，InnoDB才能自动识别涉及表级锁的死锁；否则，InnoDB将无法自动检测并处理这种死锁。</p></li><li><p>在用 LOCK TABLES对InnoDB表加锁时要注意，要将AUTOCOMMIT设为0，否则MySQL不会给表加锁；事务结束前，不要用UNLOCK TABLES释放表锁，因为UNLOCK TABLES会隐含地提交事务；COMMIT或ROLLBACK并不能释放用LOCK TABLES加的表级锁，必须用UNLOCK TABLES释放表锁。</p></li></ol><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>MyISAM表锁是deadlock free的，这是因为MyISAM总是一次获得所需的全部锁，要么全部满足，要么等待，因此不会出现死锁。但在InnoDB中，除单个SQL组成的事务外，锁是逐步获得的，这就决定了在InnoDB中发生死锁是可能的。</p><p>发生死锁后，InnoDB一般都能自动检测到，并使一个事务释放锁并回退，另一个事务获得锁，继续完成事务。但在涉及外部锁，或涉及表锁的情况下，InnoDB并不能完全自动检测到死锁，这需要通过设置锁等待超时参数 innodb_lock_wait_timeout来解决。需要说明的是，这个参数并不是只用来解决死锁问题，在并发访问比较高的情况下，如果大量事务因无法立即获得所需的锁而挂起，会占用大量计算机资源，造成严重性能问题，甚至拖跨数据库。我们通过设置合适的锁等待超时阈值，可以避免这种情况发生。</p><h3 id="分析行锁定"><a href="#分析行锁定" class="headerlink" title="分析行锁定"></a>分析行锁定</h3><p>通过检查InnoDB_row_lock 状态变量分析系统上的行锁的争夺情况 show status like ‘innodb_row_lock%’</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">-------------------------------+-------+</span></span><br><span class="line">| Variable_name                 | Value |</span><br><span class="line">+<span class="comment">-------------------------------+-------+</span></span><br><span class="line">| Innodb_row_lock_current_waits | 0     |</span><br><span class="line">| Innodb_row_lock_time          | 0     |</span><br><span class="line">| Innodb_row_lock_time_avg      | 0     |</span><br><span class="line">| Innodb_row_lock_time_max      | 0     |</span><br><span class="line">| Innodb_row_lock_waits         | 0     |</span><br><span class="line">+<span class="comment">-------------------------------+-------+</span></span><br></pre></td></tr></table></figure><p>innodb_row_lock_current_waits: 当前正在等待锁定的数量 innodb_row_lock_time: 从系统启动到现在锁定总时间长度；非常重要的参数 innodb_row_lock_time_avg: 每次等待所花平均时间；非常重要的参数 innodb_row_lock_time_max: 从系统启动到现在等待最常的一次所花的时间; innodb_row_lock_waits: 系统启动后到现在总共等待的次数；非常重要的参数。直接决定优化的方向和策略。</p><h3 id="分析表锁定"><a href="#分析表锁定" class="headerlink" title="分析表锁定"></a>分析表锁定</h3><p>可以通过检查table_locks_waited 和 table_locks_immediate 状态变量分析系统上的表锁定：show status like ‘table_locks%’</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status like 'table_locks%';</span><br><span class="line">+<span class="comment">----------------------------+-------+</span></span><br><span class="line">| Variable_name              | Value |</span><br><span class="line">+<span class="comment">----------------------------+-------+</span></span><br><span class="line">| Table_locks_immediate      | 104   |</span><br><span class="line">| Table_locks_waited         | 0     |</span><br><span class="line">+<span class="comment">----------------------------+-------+</span></span><br></pre></td></tr></table></figure><p>table_locks_immediate: 表示立即释放表锁数。table_locks_waited: 表示需要等待的表锁数。此值越高则说明存在着越严重的表级锁争用情况。</p><p>此外，MyISAM的读写锁调度是写优先，这也是MyISAM不适合做写为主表的存储引擎。因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永久阻塞。</p><h3 id="避免死锁的常用方法"><a href="#避免死锁的常用方法" class="headerlink" title="避免死锁的常用方法"></a>避免死锁的常用方法</h3><ol start="2"><li><p>在应用中，如果不同的程序会并发存取多个表，应尽量约定以相同的顺序来访问表，这样可以大大降低产生死锁的机会。在下面的例子中，由于两个session访问两个表的顺序不同，发生死锁的机会就非常高！但如果以相同的顺序来访问，死锁就可以避免。</p></li><li><p>在程序以批量方式处理数据的时候，如果事先对数据排序，保证每个线程按固定的顺序来处理记录，也可以大大降低出现死锁的可能。</p></li><li><p>在事务中，如果要更新记录，应该直接申请足够级别的锁，即排他锁，而不应先申请共享锁，更新时再申请排他锁，因为当用户申请排他锁时，其他事务可能又已经获得了相同记录的共享锁，从而造成锁冲突，甚至死锁。</p></li><li><p>在REPEATABLE-READ隔离级别下，如果两个线程同时对相同条件记录用SELECT…FOR UPDATE加排他锁，在没有符合该条件记录情况下，两个线程都会加锁成功。程序发现记录尚不存在，就试图插入一条新记录，如果两个线程都这么做，就会出现死锁。这种情况下，将隔离级别改成READ COMMITTED，就可避免问题。</p></li><li><p>当隔离级别为READ COMMITTED时，如果两个线程都先执行SELECT…FOR UPDATE，判断是否存在符合条件的记录，如果没有，就插入记录。此时，只有一个线程能插入成功，另一个线程会出现锁等待，当第1个线程提交后，第2个线程会因主键重出错，但虽然这个线程出错了，却会获得一个排他锁！这时如果有第3个线程又来申请排他锁，也会出现死锁。</p></li></ol><p>如果出现死锁，可以用SHOW INNODB STATUS命令来确定最后一个死锁产生的原因。返回结果中包括死锁相关事务的详细信息，如引发死锁的SQL语句，事务已经获得的锁，正在等待什么锁，以及被回滚的事务等。据此可以分析死锁产生的原因和改进措施。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql批量SQL插入性能优化</title>
      <link href="/posts/7a85/"/>
      <url>/posts/7a85/</url>
      
        <content type="html"><![CDATA[<p>对于一些数据量较大的系统，数据库面临的问题除了查询效率低下，还有就是数据入库时间长。特别像报表系统，每天花费在数据导入上的时间可能会长达几个小时或十几个小时之久。因此，优化数据库插入性能是很有意义的。 经过对MySQL InnoDB的一些性能测试，发现一些可以提高insert效率的方法，供大家参考参考。</p><a id="more"></a><h3 id="一条SQL语句插入多条数据"><a href="#一条SQL语句插入多条数据" class="headerlink" title="一条SQL语句插入多条数据"></a>一条SQL语句插入多条数据</h3><p>常用的插入语句如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`insert_table`</span> (<span class="string">`datetime`</span>, <span class="string">`uid`</span>, <span class="string">`content`</span>, <span class="string">`type`</span>) </span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">'0'</span>, <span class="string">'userid_0'</span>, <span class="string">'content_0'</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`insert_table`</span> (<span class="string">`datetime`</span>, <span class="string">`uid`</span>, <span class="string">`content`</span>, <span class="string">`type`</span>) </span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'userid_1'</span>, <span class="string">'content_1'</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>修改成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`insert_table`</span> (<span class="string">`datetime`</span>, <span class="string">`uid`</span>, <span class="string">`content`</span>, <span class="string">`type`</span>) </span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">'0'</span>, <span class="string">'userid_0'</span>, <span class="string">'content_0'</span>, <span class="number">0</span>), (<span class="string">'1'</span>, <span class="string">'userid_1'</span>, <span class="string">'content_1'</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>修改后的插入操作能够提高程序的插入效率。这里第二种SQL执行效率高的主要原因是合并后日志量（MySQL的binlog和innodb的事务让日志）减少了，<strong>降低日志刷盘的数据量和频率，从而提高效率。通过合并SQL语句，同时也能减少SQL语句解析的次数，减少网络传输的IO</strong>。 这里提供一些测试对比数据，分别是进行单条数据的导入与转化成一条SQL语句进行导入，分别测试1百、1千、1万条数据记录。 <img src="https://segmentfault.com/img/bVLsPi?w=295&amp;h=109" alt="图片描述" title="图片描述"><img src="https://segmentfault.com/img/bVLsPi?w=295&amp;h=109" alt="图片描述"></p><h3 id="在事务中进行插入处理。"><a href="#在事务中进行插入处理。" class="headerlink" title="在事务中进行插入处理。"></a>在事务中进行插入处理。</h3><p>把插入修改成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`insert_table`</span> (<span class="string">`datetime`</span>, <span class="string">`uid`</span>, <span class="string">`content`</span>, <span class="string">`type`</span>) </span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">'0'</span>, <span class="string">'userid_0'</span>, <span class="string">'content_0'</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`insert_table`</span> (<span class="string">`datetime`</span>, <span class="string">`uid`</span>, <span class="string">`content`</span>, <span class="string">`type`</span>) </span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'userid_1'</span>, <span class="string">'content_1'</span>, <span class="number">1</span>);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>使用事务可以提高数据的插入效率，这是因为进行一个INSERT操作时，MySQL内部会建立一个事务，在事务内才进行真正插入处理操作。通过使用事务可以减少创建事务的消耗，<strong><code>所有插入都在执行后才进行提交操作</code></strong>。 这里也提供了测试对比，分别是不使用事务与使用事务在记录数为1百、1千、1万的情况。 <img src="https://segmentfault.com/img/bVLsP3?w=295&amp;h=109" alt="图片描述" title="图片描述"><img src="https://segmentfault.com/img/bVLsP3?w=295&amp;h=109" alt="图片描述"></p><h3 id="数据有序插入。"><a href="#数据有序插入。" class="headerlink" title="数据有序插入。"></a>数据有序插入。</h3><p>数据有序的插入是指插入记录在主键上是有序排列，例如datetime是记录的主键：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`insert_table`</span> (<span class="string">`datetime`</span>, <span class="string">`uid`</span>, <span class="string">`content`</span>, <span class="string">`type`</span>) </span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'userid_1'</span>, <span class="string">'content_1'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`insert_table`</span> (<span class="string">`datetime`</span>, <span class="string">`uid`</span>, <span class="string">`content`</span>, <span class="string">`type`</span>) </span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">'0'</span>, <span class="string">'userid_0'</span>, <span class="string">'content_0'</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`insert_table`</span> (<span class="string">`datetime`</span>, <span class="string">`uid`</span>, <span class="string">`content`</span>, <span class="string">`type`</span>) </span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'userid_2'</span>, <span class="string">'content_2'</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>修改成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`insert_table`</span> (<span class="string">`datetime`</span>, <span class="string">`uid`</span>, <span class="string">`content`</span>, <span class="string">`type`</span>) </span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">'0'</span>, <span class="string">'userid_0'</span>, <span class="string">'content_0'</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`insert_table`</span> (<span class="string">`datetime`</span>, <span class="string">`uid`</span>, <span class="string">`content`</span>, <span class="string">`type`</span>) </span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'userid_1'</span>, <span class="string">'content_1'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`insert_table`</span> (<span class="string">`datetime`</span>, <span class="string">`uid`</span>, <span class="string">`content`</span>, <span class="string">`type`</span>) </span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'userid_2'</span>, <span class="string">'content_2'</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><strong>由于数据库插入时，需要维护索引数据，<code>无序的记录会增大维护索引的成本</code>。</strong>我们可以参照InnoDB使用的B+tree索引，如果每次插入记录都在索引的最后面，索引的定位效率很高，并且对索引调整较小；如果插入的记录在索引中间，需要B+tree进行分裂合并等处理，会消耗比较多计算资源，并且插入记录的索引定位效率会下降，数据量较大时会有频繁的磁盘操作。 下面提供随机数据与顺序数据的性能对比，分别是记录为1百、1千、1万、10万、100万。 <img src="https://segmentfault.com/img/bVLsQ4?w=362&amp;h=152" alt="图片描述" title="图片描述"><img src="https://segmentfault.com/img/bVLsQ4?w=362&amp;h=152" alt="图片描述"></p><p>从测试结果来看，该优化方法的性能有所提高，但是提高并不是很明显。</p><h3 id="性能综合测试"><a href="#性能综合测试" class="headerlink" title="性能综合测试"></a>性能综合测试</h3><p>这里提供了同时使用上面三种方法进行INSERT效率优化的测试。 <img src="https://segmentfault.com/img/bVLsRl?w=529&amp;h=196" alt="图片描述" title="图片描述"><img src="https://segmentfault.com/img/bVLsRl?w=529&amp;h=196" alt="图片描述"></p><p>从测试结果可以看到，合并数据+事务的方法在较小数据量时，性能提高是很明显的，数据量较大时（1千万以上），性能会急剧下降，这是由于此时数据量超过了innodb_buffer的容量，每次定位索引涉及较多的磁盘读写操作，性能下降较快。而使用合并数据+事务+有序数据的方式在数据量达到千万级以上表现依旧是良好，在数据量较大时，有序数据索引定位较为方便，不需要频繁对磁盘进行读写操作，所以可以维持较高的性能。</p><p><strong>注意事项：</strong></p><ol start="2"><li><p><strong><code>SQL语句是有长度限制</code></strong>，在进行数据合并在同一SQL中务必不能超过SQL长度限制，通过max_allowed_packet配置可以修改，默认是1M，测试时修改为8M。</p></li><li><p><strong><code>事务需要控制大小</code></strong>，事务太大可能会影响执行的效率。MySQL有innodb_log_buffer_size配置项，超过这个值会把innodb的数据刷到磁盘中，这时，效率会有所下降。所以比较好的做法是，在数据达到这个这个值前进行事务提交。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql高性能优化规范建议</title>
      <link href="/posts/d664/"/>
      <url>/posts/d664/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库命令规范"><a href="#数据库命令规范" class="headerlink" title="数据库命令规范"></a>数据库命令规范</h1><ol start="2"><li><p>所有数据库对象名称必须使用小写字母并用下划线分割</p></li><li><p>所有数据库对象名称禁止使用mysql保留关键字（如果表名中包含关键字查询时，需要将其用单引号括起来）</p></li><li><p>数据库对象的命名要能做到见名识意，并且最后不要超过32个字符</p></li><li><p>临时库表必须以tmp_为前缀并以日期为后缀，备份表必须以bak_为前缀并以日期(时间戳)为后缀</p></li><li><p>所有存储相同数据的列名和列类型必须一致（一般作为关联列，如果查询时关联列类型不一致会自动进行数据类型隐式转换，会造成列上的索引失效，导致查询效率降低）</p><a id="more"></a></li></ol><h1 id="数据库基本设计规范"><a href="#数据库基本设计规范" class="headerlink" title="数据库基本设计规范"></a>数据库基本设计规范</h1><h2 id="1-所有表必须使用Innodb存储引擎"><a href="#1-所有表必须使用Innodb存储引擎" class="headerlink" title="1. 所有表必须使用Innodb存储引擎"></a>1. 所有表必须使用Innodb存储引擎</h2><p>没有特殊要求（即Innodb无法满足的功能如：列存储，存储空间数据等）的情况下，所有表必须使用Innodb存储引擎（mysql5.5之前默认使用Myisam，5.6以后默认的为Innodb） Innodb 支持事务，支持行级锁，更好的恢复性，高并发下性能更好</p><h2 id="2-数据库和表的字符集统一使用UTF8"><a href="#2-数据库和表的字符集统一使用UTF8" class="headerlink" title="2. 数据库和表的字符集统一使用UTF8"></a>2. 数据库和表的字符集统一使用UTF8</h2><p>兼容性更好，统一字符集可以避免由于字符集转换产生的乱码，不同的字符集进行比较前需要进行转换会造成索引失效，如果数据库中有存储emoji表情的需要，字符集需要采用utf8mb4字符集</p><h2 id="3-所有表和字段都需要添加注释"><a href="#3-所有表和字段都需要添加注释" class="headerlink" title="3. 所有表和字段都需要添加注释"></a>3. 所有表和字段都需要添加注释</h2><p>使用comment从句添加表和列的备注 从一开始就进行数据字典的维护</p><h2 id="4-尽量控制单表数据量的大小，建议控制在500万以内"><a href="#4-尽量控制单表数据量的大小，建议控制在500万以内" class="headerlink" title="4. 尽量控制单表数据量的大小，建议控制在500万以内"></a>4. 尽量控制单表数据量的大小，建议控制在500万以内</h2><p>500万并不是Mysql数据库的限制，过大会造成修改表结构，备份，恢复都会有很大的问题 可以用历史数据归档（应用于日志数据），分库分表（应用于业务数据）等手段来控制数据量大小</p><h2 id="5-谨慎使用Mysql分区表"><a href="#5-谨慎使用Mysql分区表" class="headerlink" title="5. 谨慎使用Mysql分区表"></a>5. 谨慎使用Mysql分区表</h2><p>分区表在物理上表现为多个文件，在逻辑上表现为一个表 谨慎选择分区键，跨分区查询效率可能更低 建议采用物理分表的方式管理大数据</p><h2 id="6-尽量做到冷热数据分离，减小表的宽度"><a href="#6-尽量做到冷热数据分离，减小表的宽度" class="headerlink" title="6. 尽量做到冷热数据分离，减小表的宽度"></a>6. 尽量做到冷热数据分离，减小表的宽度</h2><p>Mysql限制每个表最多存储4096列，并且每一行数据的大小不能超过65535字节 减少磁盘IO,保证热数据的内存缓存命中率（表越宽，把表装载进内存缓冲池时所占用的内存也就越大,也会消耗更多的IO） 更有效的利用缓存，避免读入无用的冷数据 经常一起使用的列放到一个表中（避免更多的关联操作）</p><h2 id="7-禁止在表中建立预留字段"><a href="#7-禁止在表中建立预留字段" class="headerlink" title="7. 禁止在表中建立预留字段"></a>7. 禁止在表中建立预留字段</h2><p>预留字段的命名很难做到见名识义 预留字段无法确认存储的数据类型，所以无法选择合适的类型 对预留字段类型的修改，会对表进行锁定</p><h2 id="8-禁止在数据库中存储图片，文件等大的二进制数据"><a href="#8-禁止在数据库中存储图片，文件等大的二进制数据" class="headerlink" title="8. 禁止在数据库中存储图片，文件等大的二进制数据"></a>8. 禁止在数据库中存储图片，文件等大的二进制数据</h2><p>通常文件很大，会短时间内造成数据量快速增长，数据库进行数据库读取时，通常会进行大量的随机IO操作，文件很大时，IO操作很耗时 通常存储于文件服务器，数据库只存储文件地址信息</p><h2 id="9-禁止在线上做数据库压力测试"><a href="#9-禁止在线上做数据库压力测试" class="headerlink" title="9. 禁止在线上做数据库压力测试"></a>9. 禁止在线上做数据库压力测试</h2><h2 id="10-禁止从开发环境，测试环境直接连接生成环境数据库"><a href="#10-禁止从开发环境，测试环境直接连接生成环境数据库" class="headerlink" title="10. 禁止从开发环境，测试环境直接连接生成环境数据库"></a>10. 禁止从开发环境，测试环境直接连接生成环境数据库</h2><h1 id="数据库字段设计规范"><a href="#数据库字段设计规范" class="headerlink" title="数据库字段设计规范"></a>数据库字段设计规范</h1><h2 id="1-优先选择符合存储需要的最小的数据类型"><a href="#1-优先选择符合存储需要的最小的数据类型" class="headerlink" title="1. 优先选择符合存储需要的最小的数据类型"></a>1. 优先选择符合存储需要的最小的数据类型</h2><p>原因是：列的字段越大，建立索引时所需要的空间也就越大，这样一页中所能存储的索引节点的数量也就越少也越少，在遍历时所需要的IO次数也就越多， 索引的性能也就越差 方法：</p><ul><li>将字符串转换成数字类型存储，如：将IP地址转换成整形数据</li></ul><p>mysql提供了两个方法来处理ip地址</p><p>inet_aton 把ip转为无符号整型(4-8位) inet_ntoa 把整型的ip转为地址</p><p>插入数据前，先用inet_aton把ip地址转为整型，可以节省空间 显示数据时，使用inet_ntoa把整型的ip地址转为地址显示即可。</p><ul><li>对于非负型的数据（如自增ID、整型IP）来说，要优先使用无符号整型来存储</li></ul><p>因为：无符号相对于有符号可以多出一倍的存储空间 SIGNED INT -2147483648<del>2147483647 UNSIGNED INT 0</del>4294967295</p><p>VARCHAR(N)中的N代表的是字符数，而不是字节数 使用UTF8存储255个汉字 Varchar(255)=765个字节</p><p>过大的长度会消耗更多的内存</p><h2 id="2-避免使用TEXT、BLOB数据类型，最常见的TEXT类型可以存储64k的数据"><a href="#2-避免使用TEXT、BLOB数据类型，最常见的TEXT类型可以存储64k的数据" class="headerlink" title="2. 避免使用TEXT、BLOB数据类型，最常见的TEXT类型可以存储64k的数据"></a>2. 避免使用TEXT、BLOB数据类型，最常见的TEXT类型可以存储64k的数据</h2><ul><li>建议把BLOB或是TEXT列分离到单独的扩展表中</li></ul><p>Mysql内存临时表不支持TEXT、BLOB这样的大数据类型，如果查询中包含这样的数据，在排序等操作时，就不能使用内存临时表，必须使用磁盘临时表进行 而且对于这种数据，Mysql还是要进行二次查询，会使sql性能变得很差，但是不是说一定不能使用这样的数据类型</p><p>如果一定要使用，建议把BLOB或是TEXT列分离到单独的扩展表中，查询时一定不要使用select * 而只需要取出必要的列，不需要TEXT列的数据时不要对该列进行查询</p><ul><li>TEXT或BLOB类型只能使用前缀索引</li></ul><p>因为MySQL对索引字段长度是有限制的，所以TEXT类型只能使用前缀索引，并且TEXT列上是不能有默认值的</p><h2 id="3-避免使用ENUM类型"><a href="#3-避免使用ENUM类型" class="headerlink" title="3. 避免使用ENUM类型"></a>3. 避免使用ENUM类型</h2><p>修改ENUM值需要使用ALTER语句 ENUM类型的ORDER BY操作效率低，需要额外操作 禁止使用数值作为ENUM的枚举值</p><h2 id="4-尽可能把所有列定义为NOT-NULL"><a href="#4-尽可能把所有列定义为NOT-NULL" class="headerlink" title="4. 尽可能把所有列定义为NOT NULL"></a>4. 尽可能把所有列定义为NOT NULL</h2><p>原因： 索引NULL列需要额外的空间来保存，所以要占用更多的空间 进行比较和计算时要对NULL值做特别的处理</p><h2 id="5-使用TIMESTAMP（4个字节）或DATETIME类型（8个字节）存储时间"><a href="#5-使用TIMESTAMP（4个字节）或DATETIME类型（8个字节）存储时间" class="headerlink" title="5. 使用TIMESTAMP（4个字节）或DATETIME类型（8个字节）存储时间"></a>5. 使用TIMESTAMP（4个字节）或DATETIME类型（8个字节）存储时间</h2><p>TIMESTAMP 存储的时间范围 1970-01-01 00:00:01 ~ 2038-01-19-03:14:07 TIMESTAMP 占用4字节和INT相同，但比INT可读性高 超出TIMESTAMP取值范围的使用DATETIME类型存储</p><p>经常会有人用字符串存储日期型的数据（不正确的做法） 缺点1：无法用日期函数进行计算和比较 缺点2：用字符串存储日期要占用更多的空间</p><h2 id="6-同财务相关的金额类数据必须使用decimal类型"><a href="#6-同财务相关的金额类数据必须使用decimal类型" class="headerlink" title="6. 同财务相关的金额类数据必须使用decimal类型"></a>6. 同财务相关的金额类数据必须使用decimal类型</h2><ul><li>非精准浮点：float,double</li><li>精准浮点：decimal</li></ul><p>Decimal类型为精准浮点数，在计算时不会丢失精度 占用空间由定义的宽度决定，每4个字节可以存储9位数字，并且小数点要占用一个字节 可用于存储比bigint更大的整型数据</p><h1 id="索引设计规范"><a href="#索引设计规范" class="headerlink" title="索引设计规范"></a>索引设计规范</h1><h2 id="1-限制每张表上的索引数量，建议单张表索引不超过5个"><a href="#1-限制每张表上的索引数量，建议单张表索引不超过5个" class="headerlink" title="1. 限制每张表上的索引数量，建议单张表索引不超过5个"></a>1. 限制每张表上的索引数量，建议单张表索引不超过5个</h2><p>索引并不是越多越好！索引可以提高效率同样可以降低效率 索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率 因为mysql优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个 索引都可以用于查询，就会增加mysql优化器生成执行计划的时间，同样会降低查询性能</p><h2 id="2-禁止给表中的每一列都建立单独的索引"><a href="#2-禁止给表中的每一列都建立单独的索引" class="headerlink" title="2. 禁止给表中的每一列都建立单独的索引"></a>2. 禁止给表中的每一列都建立单独的索引</h2><p>5.6版本之前，一个sql只能使用到一个表中的一个索引，5.6以后，虽然有了合并索引的优化方式，但是还是远远没有使用一个联合索引的查询方式好</p><h2 id="3-每个Innodb表必须有个主键"><a href="#3-每个Innodb表必须有个主键" class="headerlink" title="3. 每个Innodb表必须有个主键"></a>3. 每个Innodb表必须有个主键</h2><p>Innodb是一种索引组织表：数据的存储的逻辑顺序和索引的顺序是相同的 每个表都可以有多个索引，但是表的存储顺序只能有一种 Innodb是按照主键索引的顺序来组织表的 不要使用更新频繁的列作为主键，不适用多列主键（相当于联合索引） 不要使用UUID,MD5,HASH,字符串列作为主键（无法保证数据的顺序增长） 主键建议使用自增ID值</p><h1 id="常见索引列建议"><a href="#常见索引列建议" class="headerlink" title="常见索引列建议"></a>常见索引列建议</h1><ol start="2"><li><p>出现在SELECT、UPDATE、DELETE语句的WHERE从句中的列</p></li><li><p>包含在ORDER BY、GROUP BY、DISTINCT中的字段</p><p>并不要将符合1和2中的字段的列都建立一个索引， 通常将1、2中的字段建立联合索引效果更好</p></li><li><p>多表join的关联列</p></li></ol><h1 id="如何选择索引列的顺序"><a href="#如何选择索引列的顺序" class="headerlink" title="如何选择索引列的顺序"></a>如何选择索引列的顺序</h1><p>建立索引的目的是：希望通过索引进行数据查找，减少随机IO，增加查询性能 ，索引能过滤出越少的数据，则从磁盘中读入的数据也就越少</p><ol start="2"><li>区分度最高的放在联合索引的最左侧（区分度=列中不同值的数量/列的总行数）</li><li>尽量把字段长度小的列放在联合索引的最左侧（因为字段长度越小，一页能存储的数据量越大，IO性能也就越好）</li><li>使用最频繁的列放到联合索引的左侧（这样可以比较少的建立一些索引）</li></ol><h1 id="避免建立冗余索引和重复索引（增加了查询优化器生成执行计划的时间）"><a href="#避免建立冗余索引和重复索引（增加了查询优化器生成执行计划的时间）" class="headerlink" title="避免建立冗余索引和重复索引（增加了查询优化器生成执行计划的时间）"></a>避免建立冗余索引和重复索引（增加了查询优化器生成执行计划的时间）</h1><p>重复索引示例：primary key(id)、index(id)、unique index(id) 冗余索引示例：index(a,b,c)、index(a,b)、index(a)</p><h1 id="对于频繁的查询优先考虑使用覆盖索引"><a href="#对于频繁的查询优先考虑使用覆盖索引" class="headerlink" title="对于频繁的查询优先考虑使用覆盖索引"></a>对于频繁的查询优先考虑使用覆盖索引</h1><p>覆盖索引：就是包含了所有查询字段(where,select,ordery by,group by包含的字段)的索引</p><p>覆盖索引的好处:</p><ol start="2"><li>避免Innodb表进行索引的二次查询</li></ol><p>Innodb是以聚集索引的顺序来存储的，对于Innodb来说，二级索引在叶子节点中所保存的是行的主键信息， 如果是用二级索引查询数据的话，在查找到相应的键值后，还要通过主键进行二次查询才能获取我们真实所需要的数据 而在覆盖索引中，二级索引的键值中可以获取所有的数据，避免了对主键的二次查询 ，减少了IO操作，提升了查询效率</p><ol start="2"><li>可以把随机IO变成顺序IO加快查询效率</li></ol><p>由于覆盖索引是按键值的顺序存储的，对于IO密集型的范围查找来说，对比随机从磁盘读取每一行的数据IO要少的多， 因此利用覆盖索引在访问时也可以把磁盘的随机读取的IO转变成索引查找的顺序IO</p><h1 id="索引SET规范"><a href="#索引SET规范" class="headerlink" title="索引SET规范"></a>索引SET规范</h1><h2 id="尽量避免使用外键约束"><a href="#尽量避免使用外键约束" class="headerlink" title="尽量避免使用外键约束"></a>尽量避免使用外键约束</h2><p>不建议使用外键约束（foreign key），但一定要在表与表之间的关联键上建立索引 外键可用于保证数据的参照完整性，但建议在业务端实现 外键会影响父表和子表的写操作从而降低性能</p><h1 id="数据库SQL开发规范"><a href="#数据库SQL开发规范" class="headerlink" title="数据库SQL开发规范"></a>数据库SQL开发规范</h1><h2 id="1-建议使用预编译语句进行数据库操作"><a href="#1-建议使用预编译语句进行数据库操作" class="headerlink" title="1. 建议使用预编译语句进行数据库操作"></a>1. 建议使用预编译语句进行数据库操作</h2><p>预编译语句可以重复使用这些计划，减少SQL编译所需要的时间，还可以解决动态SQL所带来的SQL注入的问题 只传参数，比传递SQL语句更高效 相同语句可以一次解析，多次使用，提高处理效率</p><h2 id="2-避免数据类型的隐式转换"><a href="#2-避免数据类型的隐式转换" class="headerlink" title="2. 避免数据类型的隐式转换"></a>2. 避免数据类型的隐式转换</h2><p>隐式转换会导致索引失效 如: select name,phone from customer where id = ‘111’;</p><h2 id="3-充分利用表上已经存在的索引"><a href="#3-充分利用表上已经存在的索引" class="headerlink" title="3. 充分利用表上已经存在的索引"></a>3. 充分利用表上已经存在的索引</h2><h3 id="避免使用双-号的查询条件。"><a href="#避免使用双-号的查询条件。" class="headerlink" title="避免使用双%号的查询条件。"></a>避免使用双%号的查询条件。</h3><p>如 a like ‘%123%’，（如果无前置%,只有后置%，是可以用到列上的索引的）</p><h3 id="一个SQL只能利用到复合索引中的一列进行范围查询"><a href="#一个SQL只能利用到复合索引中的一列进行范围查询" class="headerlink" title="一个SQL只能利用到复合索引中的一列进行范围查询"></a>一个SQL只能利用到复合索引中的一列进行范围查询</h3><p>如 有 a,b,c列的联合索引，在查询条件中有a列的范围查询，则在b,c列上的索引将不会被用到， 在定义联合索引时，如果a列要用到范围查找的话，就要把a列放到联合索引的右侧</p><h3 id="使用left-join-或-not-exists-来优化not-in-操作"><a href="#使用left-join-或-not-exists-来优化not-in-操作" class="headerlink" title="使用left join 或 not exists 来优化not in 操作"></a>使用left join 或 not exists 来优化not in 操作</h3><p>因为not in 也通常会使用索引失效</p><h2 id="4-数据库设计时，应该要对以后扩展进行考虑"><a href="#4-数据库设计时，应该要对以后扩展进行考虑" class="headerlink" title="4. 数据库设计时，应该要对以后扩展进行考虑"></a>4. 数据库设计时，应该要对以后扩展进行考虑</h2><h2 id="5-程序连接不同的数据库使用不同的账号，进制跨库查询"><a href="#5-程序连接不同的数据库使用不同的账号，进制跨库查询" class="headerlink" title="5. 程序连接不同的数据库使用不同的账号，进制跨库查询"></a>5. 程序连接不同的数据库使用不同的账号，进制跨库查询</h2><p>为数据库迁移和分库分表留出余地 降低业务耦合度 避免权限过大而产生的安全风险</p><h2 id="6-禁止使用SELECT-必须使用SELECT-lt-字段列表-gt-查询"><a href="#6-禁止使用SELECT-必须使用SELECT-lt-字段列表-gt-查询" class="headerlink" title="6. 禁止使用SELECT * 必须使用SELECT &lt;字段列表&gt; 查询"></a>6. 禁止使用SELECT * 必须使用SELECT &lt;字段列表&gt; 查询</h2><p>原因： 消耗更多的CPU和IO以网络带宽资源 无法使用覆盖索引 可减少表结构变更带来的影响</p><h2 id="7-禁止使用不含字段列表的INSERT语句"><a href="#7-禁止使用不含字段列表的INSERT语句" class="headerlink" title="7. 禁止使用不含字段列表的INSERT语句"></a>7. 禁止使用不含字段列表的INSERT语句</h2><p>如： insert into values (‘a’,’b’,’c’); 应使用 insert into t(c1,c2,c3) values (‘a’,’b’,’c’);</p><h2 id="8-避免使用子查询，可以把子查询优化为join操作"><a href="#8-避免使用子查询，可以把子查询优化为join操作" class="headerlink" title="8. 避免使用子查询，可以把子查询优化为join操作"></a>8. 避免使用子查询，可以把子查询优化为join操作</h2><p>通常子查询在in子句中，且子查询中为简单SQL(不包含union、group by、order by、limit从句)时,才可以把子查询转化为关联查询进行优化 子查询性能差的原因： 子查询的结果集无法使用索引，通常子查询的结果集会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能会受到一定的影响 特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大 由于子查询会产生大量的临时表也没有索引，所以会消耗过多的CPU和IO资源，产生大量的慢查询</p><h2 id="9-避免使用JOIN关联太多的表"><a href="#9-避免使用JOIN关联太多的表" class="headerlink" title="9. 避免使用JOIN关联太多的表"></a>9. 避免使用JOIN关联太多的表</h2><p>对于Mysql来说，是存在关联缓存的，缓存的大小可以由join_buffer_size参数进行设置 在Mysql中，对于同一个SQL多关联（join）一个表，就会多分配一个关联缓存，如果在一个SQL中关联的表越多， 所占用的内存也就越大 如果程序中大量的使用了多表关联的操作，同时join_buffer_size设置的也不合理的情况下，就容易造成服务器内存溢出的情况， 就会影响到服务器数据库性能的稳定性 同时对于关联操作来说，会产生临时表操作，影响查询效率 Mysql最多允许关联61个表，建议不超过5个</p><h2 id="10-减少同数据库的交互次数"><a href="#10-减少同数据库的交互次数" class="headerlink" title="10. 减少同数据库的交互次数"></a>10. 减少同数据库的交互次数</h2><p>数据库更适合处理批量操作 合并多个相同的操作到一起，可以提高处理效率</p><h2 id="11-对应同一列进行or判断时，使用in代替or"><a href="#11-对应同一列进行or判断时，使用in代替or" class="headerlink" title="11. 对应同一列进行or判断时，使用in代替or"></a>11. 对应同一列进行or判断时，使用in代替or</h2><p>in 的值不要超过500个 in 操作可以更有效的利用索引，or大多数情况下很少能利用到索引</p><h2 id="12-禁止使用order-by-rand-进行随机排序"><a href="#12-禁止使用order-by-rand-进行随机排序" class="headerlink" title="12. 禁止使用order by rand() 进行随机排序"></a>12. 禁止使用order by rand() 进行随机排序</h2><p>会把表中所有符合条件的数据装载到内存中，然后在内存中对所有数据根据随机生成的值进行排序，并且可能会对每一行都生成一个随机值，如果满足条件的数据集非常大， 就会消耗大量的CPU和IO及内存资源 推荐在程序中获取一个随机值，然后从数据库中获取数据的方式</p><h2 id="13-WHERE从句中禁止对列进行函数转换和计算"><a href="#13-WHERE从句中禁止对列进行函数转换和计算" class="headerlink" title="13. WHERE从句中禁止对列进行函数转换和计算"></a>13. WHERE从句中禁止对列进行函数转换和计算</h2><p>对列进行函数转换或计算时会导致无法使用索引 不推荐： where date(create_time)=’20190101’ 推荐： where create_time &gt;= ‘20190101’ and create_time &lt; ‘20190102’</p><h2 id="14-在明显不会有重复值时使用UNION-ALL-而不是UNION"><a href="#14-在明显不会有重复值时使用UNION-ALL-而不是UNION" class="headerlink" title="14. 在明显不会有重复值时使用UNION ALL 而不是UNION"></a>14. 在明显不会有重复值时使用UNION ALL 而不是UNION</h2><p>UNION 会把两个结果集的所有数据放到临时表中后再进行去重操作 UNION ALL 不会再对结果集进行去重操作</p><h2 id="15-拆分复杂的大SQL为多个小SQL"><a href="#15-拆分复杂的大SQL为多个小SQL" class="headerlink" title="15. 拆分复杂的大SQL为多个小SQL"></a>15. 拆分复杂的大SQL为多个小SQL</h2><p>大SQL:逻辑上比较复杂，需要占用大量CPU进行计算的SQL MySQL 一个SQL只能使用一个CPU进行计算 SQL拆分后可以通过并行执行来提高处理效率</p><h1 id="数据库操作行为规范"><a href="#数据库操作行为规范" class="headerlink" title="数据库操作行为规范"></a>数据库操作行为规范</h1><h2 id="超100万行的批量写（UPDATE、DELETE、INSERT）操作，要分批多次进行操作"><a href="#超100万行的批量写（UPDATE、DELETE、INSERT）操作，要分批多次进行操作" class="headerlink" title="超100万行的批量写（UPDATE、DELETE、INSERT）操作，要分批多次进行操作"></a>超100万行的批量写（UPDATE、DELETE、INSERT）操作，要分批多次进行操作</h2><h3 id="1-大批量操作可能会造成严重的主从延迟"><a href="#1-大批量操作可能会造成严重的主从延迟" class="headerlink" title="1. 大批量操作可能会造成严重的主从延迟"></a>1. 大批量操作可能会造成严重的主从延迟</h3><p>主从环境中,大批量操作可能会造成严重的主从延迟，大批量的写操作一般都需要执行一定长的时间， 而只有当主库上执行完成后，才会在其他从库上执行，所以会造成主库与从库长时间的延迟情况</p><h3 id="2-binlog日志为row格式时会产生大量的日志"><a href="#2-binlog日志为row格式时会产生大量的日志" class="headerlink" title="2. binlog日志为row格式时会产生大量的日志"></a>2. binlog日志为row格式时会产生大量的日志</h3><p>大批量写操作会产生大量日志，特别是对于row格式二进制数据而言，由于在row格式中会记录每一行数据的修改，我们一次修改的数据越多， 产生的日志量也就会越多，日志的传输和恢复所需要的时间也就越长，这也是造成主从延迟的一个原因</p><h3 id="3-避免产生大事务操作"><a href="#3-避免产生大事务操作" class="headerlink" title="3. 避免产生大事务操作"></a>3. 避免产生大事务操作</h3><p>大批量修改数据，一定是在一个事务中进行的，这就会造成表中大批量数据进行锁定，从而导致大量的阻塞，阻塞会对MySQL的性能产生非常大的影响 特别是长时间的阻塞会占满所有数据库的可用连接，这会使生产环境中的其他应用无法连接到数据库，因此一定要注意大批量写操作要进行分批</p><h2 id="对于大表使用pt-online-schema-change修改表结构"><a href="#对于大表使用pt-online-schema-change修改表结构" class="headerlink" title="对于大表使用pt-online-schema-change修改表结构"></a>对于大表使用pt-online-schema-change修改表结构</h2><ol start="2"><li>避免大表修改产生的主从延迟</li><li>避免在对表字段进行修改时进行锁表</li></ol><p>对大表数据结构的修改一定要谨慎，会造成严重的锁表操作，尤其是生产环境，是不能容忍的</p><p>pt-online-schema-change它会首先建立一个与原表结构相同的新表，并且在新表上进行表结构的修改，然后再把原表中的数据复制到新表中，并在原表中增加一些触发器 把原表中新增的数据也复制到新表中，在行所有数据复制完成之后，把新表命名成原表，并把原来的表删除掉 把原来一个DDL操作，分解成多个小的批次进行</p><h2 id="禁止为程序使用的账号赋予super权限"><a href="#禁止为程序使用的账号赋予super权限" class="headerlink" title="禁止为程序使用的账号赋予super权限"></a>禁止为程序使用的账号赋予super权限</h2><p>当达到最大连接数限制时，还运行1个有super权限的用户连接 super权限只能留给DBA处理问题的账号使用</p><h2 id="对于程序连接数据库账号，遵循权限最小原则"><a href="#对于程序连接数据库账号，遵循权限最小原则" class="headerlink" title="对于程序连接数据库账号，遵循权限最小原则"></a>对于程序连接数据库账号，遵循权限最小原则</h2>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql登录命令</title>
      <link href="/posts/1c43/"/>
      <url>/posts/1c43/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql -hlocalhost -uroot -p</span><br><span class="line">-h数据库主机</span><br><span class="line">-u用户</span><br><span class="line">-p密码</span><br><span class="line">-P端口号（大写P）</span><br><span class="line"></span><br><span class="line">mysql -h localhost  -u joinhealth -P 3306 -p</span><br></pre></td></tr></table></figure><h3 id="查看当前数据库列表–显示数据库"><a href="#查看当前数据库列表–显示数据库" class="headerlink" title="查看当前数据库列表–显示数据库"></a>查看当前数据库列表–显示数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use database_name;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql大表更新sql的优化策略</title>
      <link href="/posts/5951/"/>
      <url>/posts/5951/</url>
      
        <content type="html"><![CDATA[<p>问题sql背景：项目有6个表的要根据pid字段要写入对应的brand_id字段。但是这个其中有两个表是千万级别的。我的worker运行之后，线上的mysql主从同步立刻延迟了！运行了一个多小时之后，居然延迟到了40分钟，而且只更新了十几万行数据。</p><a id="more"></a><p>问题sql如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> $tableName$</span><br><span class="line"><span class="keyword">SET</span> brand_id = <span class="comment">#newBrandId#</span></span><br><span class="line"><span class="keyword">WHERE</span> pid = <span class="comment">#pid#</span></span><br><span class="line">    <span class="keyword">AND</span> brand_id = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>项目组的mysql专家帮我分析了下，因为pid字段没有索引，mysql引擎要逐行扫描出与传入的pid值相等的列，然后更新数据，也就是要扫描完1000W+行磁盘数据才能执行完这个sql。因为是update操作，没有用到索引，于是导致这个sql会占用表锁，其它的sql只能等这个sql执行完成之后才能开始执行。更严重的是，这个千万级的表里面有多少个不同的pid，我就要执行多少个这样的sql。</p><p>同事给我的建议的根据id字段进行sql代码层次的横向分表。每次更新1000行的数据，这样mysql引擎就不用每次在扫全表了，数据库压力是之前的万分之一。而且id作为主键，是有索引的，这个时候占用的是这1000行数据的行级锁，不会影响其它的数据。有索引能大大优化查询性能，优化后的sql如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> $tableName$</span><br><span class="line"><span class="keyword">SET</span> brand_id = <span class="comment">#newBrandId#</span></span><br><span class="line"><span class="keyword">WHERE</span> pid = <span class="comment">#pid#</span></span><br><span class="line">    <span class="keyword">AND</span> brand_id = <span class="number">0</span></span><br><span class="line">    <span class="keyword">AND</span> <span class="keyword">id</span> <span class="keyword">BETWEEN</span> <span class="comment">#startNum# AND #endNum#</span></span><br></pre></td></tr></table></figure><p>仅仅用了id限区间的语句，将一个千万级的大表代码层次上进行横向切割。重新上线worker后，mysql主从没有任何延迟！而且经过监控，短短10分钟就更新了十几万数据，效率是之前的6倍！更重要的是数据库负载均衡，应用健康运行。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql查看数据库和表的占用空间大小</title>
      <link href="/posts/fd8f/"/>
      <url>/posts/fd8f/</url>
      
        <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    information_schema.TABLES </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    TABLE_SCHEMA = <span class="string">'&#123;db_name&#125;'</span> </span><br><span class="line">    <span class="keyword">AND</span> table_name = <span class="string">'&#123;tab_name&#125;'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">concat</span>(<span class="keyword">round</span>(<span class="keyword">sum</span>( data_length / <span class="number">1024</span> / <span class="number">1024</span> ),<span class="number">2</span> ),<span class="string">'MB'</span> ) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    information_schema.PARTITIONS </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    table_schema = <span class="string">'db_name'</span> </span><br><span class="line">    <span class="keyword">AND</span> table_name = <span class="string">'tab_name'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql导入数据命令</title>
      <link href="/posts/75ff/"/>
      <url>/posts/75ff/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>   d:/myprogram/database/db.sql</span><br></pre></td></tr></table></figure><h1 id="导入sql文件过慢，解决办法"><a href="#导入sql文件过慢，解决办法" class="headerlink" title="导入sql文件过慢，解决办法"></a>导入sql文件过慢，解决办法</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p -h 127.0.0.1</span><br><span class="line">mysql&gt;use cloud_followup_gfe;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> global innodb_flush_log_at_trx_commit=0;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> global max_allowed_packet=1024*1024*20;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> global bulk_insert_buffer_size=32*1024*1024;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> global innodb_buffer_pool_size=32*1024*1024;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.09 sec)</span><br><span class="line"></span><br><span class="line">&gt;mysql <span class="built_in">source</span> /root/test.sql</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>multi-statement not allow</title>
      <link href="/posts/b698/"/>
      <url>/posts/b698/</url>
      
        <content type="html"><![CDATA[<h3 id="sql-injection-violation-multi-statement-not-allow"><a href="#sql-injection-violation-multi-statement-not-allow" class="headerlink" title="sql injection violation, multi-statement not allow"></a>sql injection violation, multi-statement not allow</h3><p>数据库连接url加上支持批量的参数allowMultiQueries=true</p><p>如果用了druid，并且使用了wall-filter，需要配置</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LEFT</title>
      <link href="/posts/da34/"/>
      <url>/posts/da34/</url>
      
        <content type="html"><![CDATA[<h3 id="LEFT-str-len"><a href="#LEFT-str-len" class="headerlink" title="LEFT(str,len)"></a>LEFT(<strong><em>str</em></strong>,<strong><em>len</em></strong>)</h3><p>Returns the leftmost <strong><em>len</em></strong> characters from the string <strong><em>str</em></strong>, or<code>NULL</code>if any argument is<code>NULL</code>.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT LEFT('foobarbar', 5);</span><br><span class="line">        -&gt; 'fooba'</span><br></pre></td></tr></table></figure><p>This function is multibyte safe.</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Left Join 没有使用索引问题</title>
      <link href="/posts/5540/"/>
      <url>/posts/5540/</url>
      
        <content type="html"><![CDATA[<h3 id="问题：生产环境sql执行很慢"><a href="#问题：生产环境sql执行很慢" class="headerlink" title="问题：生产环境sql执行很慢"></a>问题：生产环境sql执行很慢</h3><p><strong>分析sql执行</strong></p><p><img src="https://i.loli.net/2019/01/15/5c3d4dabeb337.png" alt="5c3d4dabeb337"><img src="https://i.loli.net/2019/01/15/5c3d4dabeb337.png" alt="5c3d4dabeb337"></p><p>t_user_user表并没有使用到索引</p><a id="more"></a><h3 id="思路：索引用不上的原因可能是字符集不相同"><a href="#思路：索引用不上的原因可能是字符集不相同" class="headerlink" title="思路：索引用不上的原因可能是字符集不相同"></a>思路：索引用不上的原因可能是字符集不相同</h3><p>查看表字段字符集：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> <span class="keyword">COLUMNS</span> <span class="keyword">FROM</span> &#123;tab_name&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/01/15/5c3d4f64ab0d1.png" alt="5c3d4f64ab0d1"><img src="https://i.loli.net/2019/01/15/5c3d4f64ab0d1.png" alt="5c3d4f64ab0d1"></p><p><img src="https://i.loli.net/2019/01/15/5c3d4f7321aa0.png" alt="5c3d4f7321aa0"><img src="https://i.loli.net/2019/01/15/5c3d4f7321aa0.png" alt="5c3d4f7321aa0"></p><p>发现两张表的关联字段字符集不相同，修改字段字符集编码</p><p><img src="https://i.loli.net/2019/01/15/5c3d5028735dc.png" alt="5c3d5028735dc"><img src="https://i.loli.net/2019/01/15/5c3d5028735dc.png" alt="5c3d5028735dc"></p><p><strong>重新分析sql，发现已使用索引</strong></p><p><img src="https://i.loli.net/2019/01/15/5c3d505375fe6.png" alt="5c3d505375fe6"><img src="https://i.loli.net/2019/01/15/5c3d505375fe6.png" alt="5c3d505375fe6"></p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GROUP_CONCAT</title>
      <link href="/posts/ad29/"/>
      <url>/posts/ad29/</url>
      
        <content type="html"><![CDATA[<h3 id="GROUP-CONCAT-expr"><a href="#GROUP-CONCAT-expr" class="headerlink" title="GROUP_CONCAT(expr)"></a>GROUP_CONCAT(<strong><em>expr</em></strong>)</h3><p>This function returns a string result with the concatenated non-<code>NULL</code>values from a group. It returns<code>NULL</code>if there are no non-<code>NULL</code>values. The full syntax is as follows:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GROUP_CONCAT([DISTINCT] expr [,expr ...]</span><br><span class="line">             [ORDER BY &#123;unsigned_integer | col_name | expr&#125;</span><br><span class="line">                 [ASC | DESC] [,col_name ...]]</span><br><span class="line">             [SEPARATOR str_val])</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT student_name,</span><br><span class="line">         GROUP_CONCAT(test_score)</span><br><span class="line">       FROM student</span><br><span class="line">       GROUP BY student_name;</span><br></pre></td></tr></table></figure><p>Or:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT student_name,</span><br><span class="line">         GROUP_CONCAT(DISTINCT test_score</span><br><span class="line">                      ORDER BY test_score DESC SEPARATOR ' ')</span><br><span class="line">       FROM student</span><br><span class="line">       GROUP BY student_name;</span><br></pre></td></tr></table></figure><p>In MySQL, you can get the concatenated values of expression combinations. To eliminate duplicate values, use the<code>DISTINCT</code>clause. To sort values in the result, use the<code>ORDER BY</code>clause. To sort in reverse order, add the<code>DESC</code>(descending) keyword to the name of the column you are sorting by in the<code>ORDER BY</code>clause. The default is ascending order; this may be specified explicitly using the<code>ASC</code>keyword. The default separator between values in a group is comma (<code>,</code>). To specify a separator explicitly, use<code>SEPARATOR</code>followed by the string literal value that should be inserted between group values. To eliminate the separator altogether, specify<code>SEPARATOR &#39;&#39;</code>.</p><p>The result is truncated to the maximum length that is given by the<a href="https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len" target="_blank" rel="noopener"><code>group_concat_max_len</code></a>system variable, which has a default value of 1024. The value can be set higher, although the effective maximum length of the return value is constrained by the value of<a href="https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet" target="_blank" rel="noopener"><code>max_allowed_packet</code></a>. The syntax to change the value of<a href="https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len" target="_blank" rel="noopener"><code>group_concat_max_len</code></a>at runtime is as follows, where<em><code>val</code></em>is an unsigned integer:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> [<span class="keyword">GLOBAL</span> | <span class="keyword">SESSION</span>] group_concat_max_len = val;</span><br></pre></td></tr></table></figure><p>The return value is a nonbinary or binary string, depending on whether the arguments are nonbinary or binary strings. The result type is<a href="https://dev.mysql.com/doc/refman/8.0/en/blob.html" title="11.4.3 The BLOB and TEXT Types" target="_blank" rel="noopener"><code>TEXT</code></a>or<a href="https://dev.mysql.com/doc/refman/8.0/en/blob.html" title="11.4.3 The BLOB and TEXT Types" target="_blank" rel="noopener"><code>BLOB</code></a>unless<a href="https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_group_concat_max_len" target="_blank" rel="noopener"><code>group_concat_max_len</code></a>is less than or equal to 512, in which case the result type is<a href="https://dev.mysql.com/doc/refman/8.0/en/char.html" title="11.4.1 The CHAR and VARCHAR Types" target="_blank" rel="noopener"><code>VARCHAR</code></a>or<a href="https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html" title="11.4.2 The BINARY and VARBINARY Types" target="_blank" rel="noopener"><code>VARBINARY</code></a>.</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deadlock死锁</title>
      <link href="/posts/7509/"/>
      <url>/posts/7509/</url>
      
        <content type="html"><![CDATA[<h3 id="查看死锁信息"><a href="#查看死锁信息" class="headerlink" title="查看死锁信息"></a>查看死锁信息</h3><a id="more"></a><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">engine</span> <span class="keyword">innodb</span> <span class="keyword">status</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DATE_FORMAT</title>
      <link href="/posts/415c/"/>
      <url>/posts/415c/</url>
      
        <content type="html"><![CDATA[<h3 id="DATE-FORMAT-date-format"><a href="#DATE-FORMAT-date-format" class="headerlink" title="DATE_FORMAT(date,format)"></a>DATE_FORMAT(<strong><em>date</em></strong>,<strong><em>format</em></strong>)</h3><p>Formats the <strong><em>date</em></strong> value according to the <strong><em>format</em></strong> string.</p><p>The following specifiers may be used in the <strong><em>format</em></strong> string. The <code>%</code> character is required before format specifier characters.</p><a id="more"></a><table><thead><tr><th>Specifier</th><th>Description</th></tr></thead><tbody><tr><td><code>%a</code></td><td>Abbreviated weekday name (<code>Sun</code>..<code>Sat</code>)</td></tr><tr><td><code>%b</code></td><td>Abbreviated month name (<code>Jan</code>..<code>Dec</code>)</td></tr><tr><td><code>%c</code></td><td>Month, numeric (<code>0</code>..<code>12</code>)</td></tr><tr><td><code>%D</code></td><td>Day of the month with English suffix (<code>0th</code>,<code>1st</code>,<code>2nd</code>,<code>3rd</code>, …)</td></tr><tr><td><code>%d</code></td><td>Day of the month, numeric (<code>00</code>..<code>31</code>)</td></tr><tr><td><code>%e</code></td><td>Day of the month, numeric (<code>0</code>..<code>31</code>)</td></tr><tr><td><code>%f</code></td><td>Microseconds (<code>000000</code>..<code>999999</code>)</td></tr><tr><td><code>%H</code></td><td>Hour (<code>00</code>..<code>23</code>)</td></tr><tr><td><code>%h</code></td><td>Hour (<code>01</code>..<code>12</code>)</td></tr><tr><td><code>%I</code></td><td>Hour (<code>01</code>..<code>12</code>)</td></tr><tr><td><code>%i</code></td><td>Minutes, numeric (<code>00</code>..<code>59</code>)</td></tr><tr><td><code>%j</code></td><td>Day of year (<code>001</code>..<code>366</code>)</td></tr><tr><td><code>%k</code></td><td>Hour (<code>0</code>..<code>23</code>)</td></tr><tr><td><code>%l</code></td><td>Hour (<code>1</code>..<code>12</code>)</td></tr><tr><td><code>%M</code></td><td>Month name (<code>January</code>..<code>December</code>)</td></tr><tr><td><code>%m</code></td><td>Month, numeric (<code>00</code>..<code>12</code>)</td></tr><tr><td><code>%p</code></td><td><code>AM</code>or<code>PM</code></td></tr><tr><td><code>%r</code></td><td>Time, 12-hour (<code>hh:mm:ss</code>followed by<code>AM</code>or<code>PM</code>)</td></tr><tr><td><code>%S</code></td><td>Seconds (<code>00</code>..<code>59</code>)</td></tr><tr><td><code>%s</code></td><td>Seconds (<code>00</code>..<code>59</code>)</td></tr><tr><td><code>%T</code></td><td>Time, 24-hour (<code>hh:mm:ss</code>)</td></tr><tr><td><code>%U</code></td><td>Week (<code>00</code>..<code>53</code>), where Sunday is the first day of the week;<a href="https://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html#function_week" target="_blank" rel="noopener"><code>WEEK()</code></a>mode 0</td></tr><tr><td><code>%u</code></td><td>Week (<code>00</code>..<code>53</code>), where Monday is the first day of the week;<a href="https://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html#function_week" target="_blank" rel="noopener"><code>WEEK()</code></a>mode 1</td></tr><tr><td><code>%V</code></td><td>Week (<code>01</code>..<code>53</code>), where Sunday is the first day of the week;<a href="https://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html#function_week" target="_blank" rel="noopener"><code>WEEK()</code></a>mode 2; used with<code>%X</code></td></tr><tr><td><code>%v</code></td><td>Week (<code>01</code>..<code>53</code>), where Monday is the first day of the week;<a href="https://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html#function_week" target="_blank" rel="noopener"><code>WEEK()</code></a>mode 3; used with<code>%x</code></td></tr><tr><td><code>%W</code></td><td>Weekday name (<code>Sunday</code>..<code>Saturday</code>)</td></tr><tr><td><code>%w</code></td><td>Day of the week (<code>0</code>=Sunday..<code>6</code>=Saturday)</td></tr><tr><td><code>%X</code></td><td>Year for the week where Sunday is the first day of the week, numeric, four digits; used with<code>%V</code></td></tr><tr><td><code>%x</code></td><td>Year for the week, where Monday is the first day of the week, numeric, four digits; used with<code>%v</code></td></tr><tr><td><code>%Y</code></td><td>Year, numeric, four digits</td></tr><tr><td><code>%y</code></td><td>Year, numeric (two digits)</td></tr><tr><td><code>%%</code></td><td>A literal<code>%</code>character</td></tr><tr><td><code>%</code><em>x</em></td><td><em>x</em>, for any “<em>x</em>” not listed above</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务隔离级别设置</title>
      <link href="/posts/a91b/"/>
      <url>/posts/a91b/</url>
      
        <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询事务隔离级别</span></span><br><span class="line"><span class="keyword">SELECT</span> @@GLOBAL.tx_isolation,@@tx_isolation;</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置事务隔离级别 read committed</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">SESSION</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> <span class="keyword">READ</span> COMMITTED;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> <span class="keyword">READ</span> COMMITTED;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql启动</title>
      <link href="/posts/a027/"/>
      <url>/posts/a027/</url>
      
        <content type="html"><![CDATA[<p>Mysql服务启动</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld stop</span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据日期查询优化技巧</title>
      <link href="/posts/da9b/"/>
      <url>/posts/da9b/</url>
      
        <content type="html"><![CDATA[<p>问题：数据量达百万级别根据日期查询效率特别慢。create_time是datetime类型，转换为日期再匹配，需要查询出所有行进行过滤。</p><a id="more"></a><p><img src="https://i.loli.net/2019/01/15/5c3dd8fa873eb.png" alt="5c3dd8fa873eb"><img src="https://i.loli.net/2019/01/15/5c3dd8fa873eb.png" alt="5c3dd8fa873eb"></p><p>优化方案：利用在create_time字段上建立索引，使用BETWEEN…AND…，查询极快</p><p><img src="https://i.loli.net/2019/01/15/5c3dd9db916f0.png" alt="5c3dd9db916f0"><img src="https://i.loli.net/2019/01/15/5c3dd9db916f0.png" alt="5c3dd9db916f0"></p><h4 id="时间查询优化解决方案："><a href="#时间查询优化解决方案：" class="headerlink" title="时间查询优化解决方案："></a>时间查询优化解决方案：</h4><ol start="2"><li><p>尽量避免thisTime &gt; startTime and thisTime &lt; endTime这样的语句</p></li><li><p>使用索引，以查询时间的列建立索引</p></li><li><p>使用BETWEEN AND可能效果更好</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据量 Mybatis 分页插件Count语句优化</title>
      <link href="/posts/a039/"/>
      <url>/posts/a039/</url>
      
        <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>当在大数量的情况下，进行分页查询，统计总数时，会自动count一次，这个语句是在我们的查询语句的基础上嵌套一层，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> (主<span class="keyword">sql</span>)</span><br></pre></td></tr></table></figure><p>这样在数据量大的情况下，会出问题，很容易cpu就跑满了</p><a id="more"></a><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>在mapper.xml中自定义count查询，使用自定义的查询速度会快些</p><p>增加<code>countSuffix</code>count 查询后缀配置参数，该参数是针对<code>PageInterceptor</code>配置的，默认值为<code>_COUNT</code>。</p><p>分页插件会优先通过当前查询的 msId +<code>countSuffix</code>查找手写的分页查询。</p><p>如果存在就使用手写的 count 查询，如果不存在，仍然使用之前的方式自动创建 count 查询。</p><p>例如，如果存在下面两个查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> a.id,b.countryname,a.countrycode <span class="keyword">from</span> country a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> country b <span class="keyword">on</span> a.id = b.id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> a.id) <span class="keyword">from</span> country a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> country b <span class="keyword">on</span> a.id = b.id</span><br></pre></td></tr></table></figure><p>上面的<code>countSuffix</code>使用的默认值<code>_COUNT</code>，分页插件会自动获取到<code>selectLeftjoin_COUNT</code>查询，这个查询需要自己保证结果数正确。</p><p>返回值的类型必须是<code>resultType=&quot;Long&quot;</code>，入参使用的和<code>selectLeftjoin</code>查询相同的参数，所以在 SQL 中要按照<code>selectLeftjoin</code>的入参来使用。</p><p>因为<code>selectLeftjoin_COUNT</code>方法是自动调用的，所以不需要在接口提供相应的方法，如果需要单独调用，也可以提供。</p><p>上面方法执行输出的部分日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - ==&gt;  Preparing: select count(distinct a.id) from country a left join country b on a.id = b.id </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: </span><br><span class="line">TRACE [main] - &lt;==    Columns: C1</span><br><span class="line">TRACE [main] - &lt;==        Row: 183</span><br><span class="line">DEBUG [main] - &lt;==      Total: 1</span><br><span class="line">DEBUG [main] - Cache Hit Ratio [com.github.pagehelper.mapper.CountryMapper]: 0.0</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: select a.id,b.countryname,a.countrycode from country a left join country b on a.id = b.id order by a.id LIMIT 10 </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: </span><br><span class="line">TRACE [main] - &lt;==    Columns: ID, COUNTRYNAME, COUNTRYCODE</span><br><span class="line">TRACE [main] - &lt;==        Row: 1, Angola, AO</span><br><span class="line">TRACE [main] - &lt;==        Row: 2, Afghanistan, AF</span><br><span class="line">TRACE [main] - &lt;==        Row: 3, Albania, AL</span><br></pre></td></tr></table></figure><p>此功能pagehelper5.0.4版本以上支持，所以要升级pagehelper版本</p><h3 id="升级后单元测试报错"><a href="#升级后单元测试报错" class="headerlink" title="升级后单元测试报错"></a>升级后单元测试报错</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cause: java.lang.ClassCastException: com.github.pagehelper.PageHelper cannot be cast to org.apache.ibatis.plugin.Interceptor;</span><br></pre></td></tr></table></figure><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5.*使用新的分页com.github.pagehelper.PageInterceptor</span><br><span class="line"></span><br><span class="line">helperDialect 分页插件会自动检测当前的数据库链接，自动选择合适的分页方式。 你可以配置`helperDialect`属性来指定分页插件使用哪种方言。</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修改mybatis-Config.xml</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Caused by: com.github.pagehelper.PageException: java.lang.NoSuchMethodException: org.apache.ibatis.reflection.MetaObject.forObject(java.lang.Object)</span><br><span class="line">    at com.github.pagehelper.util.MetaObjectUtil.(MetaObjectUtil.java:<span class="number">49</span>)</span><br><span class="line">    ... <span class="number">57</span> more</span><br><span class="line">Caused by: java.lang.NoSuchMethodException: org.apache.ibatis.reflection.MetaObject.forObject(java.lang.Object)</span><br><span class="line">    at java.lang.Class.getDeclaredMethod(Class.java:<span class="number">2017</span>)</span><br><span class="line">    at com.github.pagehelper.util.MetaObjectUtil.(MetaObjectUtil.java:<span class="number">47</span>)</span><br><span class="line">    ... <span class="number">57</span> more</span><br></pre></td></tr></table></figure><h3 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis版本太低导致分页插件拦截器里面反射失败</span><br></pre></td></tr></table></figure><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">升级mybatis 版本为：3.4.4 、升级mybatis-spring版本为：1.3.0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis缓存</title>
      <link href="/posts/2ec3/"/>
      <url>/posts/2ec3/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MyBatis是常见的Java数据库访问层框架。在日常工作中，开发人员多数情况下是使用MyBatis的默认缓存配置，但是MyBatis缓存机制有一些不足之处，在使用中容易引起脏数据，形成一些潜在的隐患。个人在业务开发中也处理过一些由于MyBatis缓存引发的开发问题，带着个人的兴趣，希望从应用及源码的角度为读者梳理MyBatis缓存机制。</p><p>本次分析中涉及到的代码和数据库表均放在GitHub上，地址：<a href="https://github.com/kailuncen/mybatis-cache-demo" target="_blank" rel="noopener">mybatis-cache-demo</a>。</p><a id="more"></a><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>本文按照以下顺序展开。</p><ul><li>一级缓存介绍及相关配置。</li><li>一级缓存工作流程及源码分析。</li><li>一级缓存总结。</li><li>二级缓存介绍及相关配置。</li><li>二级缓存源码分析。</li><li>二级缓存总结。</li><li>全文总结。</li></ul><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><h3 id="一级缓存介绍"><a href="#一级缓存介绍" class="headerlink" title="一级缓存介绍"></a>一级缓存介绍</h3><p>在应用运行过程中，我们有可能在一次数据库会话中，执行多次查询条件完全相同的SQL，MyBatis提供了一级缓存的方案优化这部分场景，如果是相同的SQL语句，会优先命中一级缓存，避免直接对数据库进行查询，提高性能。具体执行过程如下图所示。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/6e38df6a.jpg" alt><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/6e38df6a.jpg" alt></p><p>每个SqlSession中持有了Executor，每个Executor中有一个LocalCache。当用户发起查询时，MyBatis根据当前执行的语句生成<code>MappedStatement</code>，在Local Cache进行查询，如果缓存命中的话，直接返回结果给用户，如果缓存没有命中的话，查询数据库，结果写入<code>Local Cache</code>，最后返回结果给用户。具体实现类的类关系图如下图所示。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/d76ec5fe.jpg" alt><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/d76ec5fe.jpg" alt></p><h3 id="一级缓存配置"><a href="#一级缓存配置" class="headerlink" title="一级缓存配置"></a>一级缓存配置</h3><p>我们来看看如何使用MyBatis一级缓存。开发者只需在MyBatis的配置文件中，添加如下语句，就可以使用一级缓存。共有两个选项，<code>SESSION</code>或者<code>STATEMENT</code>，默认是<code>SESSION</code>级别，即在一个MyBatis会话中执行的所有语句，都会共享这一个缓存。一种是<code>STATEMENT</code>级别，可以理解为缓存只对当前执行的这一个<code>Statement</code>有效。</p><h3 id="一级缓存实验"><a href="#一级缓存实验" class="headerlink" title="一级缓存实验"></a>一级缓存实验</h3><p>接下来通过实验，了解MyBatis一级缓存的效果，每个单元测试后都请恢复被修改的数据。</p><p>首先是创建示例表student，创建对应的POJO类和增改的方法，具体可以在entity包和mapper包中查看。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">tinyint</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin;</span><br></pre></td></tr></table></figure><p>在以下实验中，id为1的学生名称是凯伦。</p><h4 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a>实验1</h4><p>开启一级缓存，范围为会话级别，调用三次<code>getStudentById</code>，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getStudentById</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession = factory.openSession(<span class="keyword">true</span>); <span class="comment">// 自动提交事务</span></span><br><span class="line">        StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);</span><br><span class="line">        System.out.println(studentMapper.getStudentById(<span class="number">1</span>));</span><br><span class="line">        System.out.println(studentMapper.getStudentById(<span class="number">1</span>));</span><br><span class="line">        System.out.println(studentMapper.getStudentById(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/9e996384.jpg" alt><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/9e996384.jpg" alt></p><p>我们可以看到，只有第一次真正查询了数据库，后续的查询使用了一级缓存。</p><h4 id="实验2"><a href="#实验2" class="headerlink" title="实验2"></a>实验2</h4><p>增加了对数据库的修改操作，验证在一次数据库会话中，如果对数据库发生了修改操作，一级缓存是否会失效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession = factory.openSession(<span class="keyword">true</span>); <span class="comment">// 自动提交事务</span></span><br><span class="line">        StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);</span><br><span class="line">        System.out.println(studentMapper.getStudentById(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"增加了"</span> + studentMapper.addStudent(buildStudent()) + <span class="string">"个学生"</span>);</span><br><span class="line">        System.out.println(studentMapper.getStudentById(<span class="number">1</span>));</span><br><span class="line">        sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/fb6a78e0.jpg" alt><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/fb6a78e0.jpg" alt></p><p>我们可以看到，在修改操作后执行的相同查询，查询了数据库，<strong>一级缓存失效</strong>。</p><h4 id="实验3"><a href="#实验3" class="headerlink" title="实验3"></a>实验3</h4><p>开启两个<code>SqlSession</code>，在<code>sqlSession1</code>中查询数据，使一级缓存生效，在<code>sqlSession2</code>中更新数据库，验证一级缓存只在数据库会话内部共享。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLocalCacheScope</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession1 = factory.openSession(<span class="keyword">true</span>); </span><br><span class="line">        SqlSession sqlSession2 = factory.openSession(<span class="keyword">true</span>); </span><br><span class="line"></span><br><span class="line">        StudentMapper studentMapper = sqlSession1.getMapper(StudentMapper.class);</span><br><span class="line">        StudentMapper studentMapper2 = sqlSession2.getMapper(StudentMapper.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"studentMapper读取数据: "</span> + studentMapper.getStudentById(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"studentMapper读取数据: "</span> + studentMapper.getStudentById(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"studentMapper2更新了"</span> + studentMapper2.updateStudentName(<span class="string">"小岑"</span>,<span class="number">1</span>) + <span class="string">"个学生的数据"</span>);</span><br><span class="line">        System.out.println(<span class="string">"studentMapper读取数据: "</span> + studentMapper.getStudentById(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"studentMapper2读取数据: "</span> + studentMapper2.getStudentById(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/f480ac76.jpg" alt><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/f480ac76.jpg" alt></p><p><code>sqlSession2</code>更新了id为1的学生的姓名，从凯伦改为了小岑，但session1之后的查询中，id为1的学生的名字还是凯伦，出现了脏数据，也证明了之前的设想，一级缓存只在数据库会话内部共享。</p><h3 id="一级缓存工作流程-amp-源码分析"><a href="#一级缓存工作流程-amp-源码分析" class="headerlink" title="一级缓存工作流程&amp;源码分析"></a>一级缓存工作流程&amp;源码分析</h3><p>那么，一级缓存的工作流程是怎样的呢？我们从源码层面来学习一下。</p><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><p>一级缓存执行的时序图，如下图所示。</p><p><img src="https://i.loli.net/2019/04/02/5ca323e10cead.png" alt="5ca323e10cead"><img src="https://i.loli.net/2019/04/02/5ca323e10cead.png" alt="5ca323e10cead"></p><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>接下来将对MyBatis查询相关的核心类和一级缓存的源码进行走读。这对后面学习二级缓存也有帮助。</p><p><strong>SqlSession</strong>： 对外提供了用户和数据库之间交互需要的所有方法，隐藏了底层的细节。默认实现类是<code>DefaultSqlSession</code>。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/ba96bc7f.jpg" alt><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/ba96bc7f.jpg" alt></p><p><strong>Executor</strong>：<code>SqlSession</code>向用户提供操作数据库的方法，但和数据库操作有关的职责都会委托给Executor。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/ef5e0eb3.jpg" alt><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/ef5e0eb3.jpg" alt></p><p>如下图所示，Executor有若干个实现类，为Executor赋予了不同的能力，大家可以根据类名，自行学习每个类的基本作用。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/83326eb3.jpg" alt><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/83326eb3.jpg" alt></p><p>在一级缓存的源码分析中，主要学习<code>BaseExecutor</code>的内部实现。</p><p><strong>BaseExecutor</strong>：<code>BaseExecutor</code>是一个实现了Executor接口的抽象类，定义若干抽象方法，在执行的时候，把具体的操作委托给子类进行执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">doUpdate</span><span class="params">(MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> List <span class="title">doFlushStatements</span><span class="params">(<span class="keyword">boolean</span> isRollback)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span>  List <span class="title">doQuery</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span>  Cursor <span class="title">doQueryCursor</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException</span>;</span><br></pre></td></tr></table></figure><p>在一级缓存的介绍中提到对<code>Local Cache</code>的查询和写入是在<code>Executor</code>内部完成的。在阅读<code>BaseExecutor</code>的代码后发现<code>Local Cache</code>是<code>BaseExecutor</code>内部的一个成员变量，如下代码所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> ConcurrentLinkedQueue deferredLoads;</span><br><span class="line"><span class="keyword">protected</span> PerpetualCache localCache;</span><br></pre></td></tr></table></figure><p><strong>Cache</strong>： MyBatis中的Cache接口，提供了和缓存相关的最基本的操作，如下图所示：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/793031d0.jpg" alt><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/793031d0.jpg" alt></p><p>有若干个实现类，使用装饰器模式互相组装，提供丰富的操控缓存的能力，部分实现类如下图所示：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/cdb21712.jpg" alt><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/cdb21712.jpg" alt></p><p><code>BaseExecutor</code>成员变量之一的<code>PerpetualCache</code>，是对Cache接口最基本的实现，其实现非常简单，内部持有HashMap，对一级缓存的操作实则是对HashMap的操作。如下代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PerpetualCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String id;</span><br><span class="line">  <span class="keyword">private</span> Map cache = <span class="keyword">new</span> HashMap();</span><br></pre></td></tr></table></figure><p>在阅读相关核心类代码后，从源代码层面对一级缓存工作中涉及到的相关代码，出于篇幅的考虑，对源码做适当删减，读者朋友可以结合本文，后续进行更详细的学习。</p><p>为执行和数据库的交互，首先需要初始化<code>SqlSession</code>，通过<code>DefaultSqlSessionFactory</code>开启<code>SqlSession</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> SqlSession <span class="title">openSessionFromDataSource</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level, <span class="keyword">boolean</span> autoCommit)</span> </span>&#123;</span><br><span class="line">    ............</span><br><span class="line">    <span class="keyword">final</span> Executor executor = configuration.newExecutor(tx, execType);     </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSession(configuration, executor, autoCommit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在初始化<code>SqlSesion</code>时，会使用<code>Configuration</code>类创建一个全新的<code>Executor</code>，作为<code>DefaultSqlSession</code>构造函数的参数，创建Executor代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Executor <span class="title">newExecutor</span><span class="params">(Transaction transaction, ExecutorType executorType)</span> </span>&#123;</span><br><span class="line">    executorType = executorType == <span class="keyword">null</span> ? defaultExecutorType : executorType;</span><br><span class="line">    executorType = executorType == <span class="keyword">null</span> ? ExecutorType.SIMPLE : executorType;</span><br><span class="line">    Executor executor;</span><br><span class="line">    <span class="keyword">if</span> (ExecutorType.BATCH == executorType) &#123;</span><br><span class="line">      executor = <span class="keyword">new</span> BatchExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ExecutorType.REUSE == executorType) &#123;</span><br><span class="line">      executor = <span class="keyword">new</span> ReuseExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      executor = <span class="keyword">new</span> SimpleExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尤其可以注意这里，如果二级缓存开关开启的话，是使用CahingExecutor装饰BaseExecutor的子类</span></span><br><span class="line">    <span class="keyword">if</span> (cacheEnabled) &#123;</span><br><span class="line">      executor = <span class="keyword">new</span> CachingExecutor(executor);                      </span><br><span class="line">    &#125;</span><br><span class="line">    executor = (Executor) interceptorChain.pluginAll(executor);</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SqlSession</code>创建完毕后，根据Statment的不同类型，会进入<code>SqlSession</code>的不同方法中，如果是<code>Select</code>语句的话，最后会执行到<code>SqlSession</code>的<code>selectList</code>，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  List <span class="title">selectList</span><span class="params">(String statement, Object parameter, RowBounds rowBounds)</span> </span>&#123;</span><br><span class="line">      MappedStatement ms = configuration.getMappedStatement(statement);</span><br><span class="line">      <span class="keyword">return</span> executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SqlSession</code>把具体的查询职责委托给了Executor。如果只开启了一级缓存的话，首先会进入<code>BaseExecutor</code>的<code>query</code>方法。代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  List <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    BoundSql boundSql = ms.getBoundSql(parameter);</span><br><span class="line">    CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql);</span><br><span class="line">    <span class="keyword">return</span> query(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，会先根据传入的参数生成CacheKey，进入该方法查看CacheKey是如何生成的，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CacheKey cacheKey = <span class="keyword">new</span> CacheKey();</span><br><span class="line">cacheKey.update(ms.getId());</span><br><span class="line">cacheKey.update(rowBounds.getOffset());</span><br><span class="line">cacheKey.update(rowBounds.getLimit());</span><br><span class="line">cacheKey.update(boundSql.getSql());</span><br><span class="line"><span class="comment">//后面是update了sql中带的参数</span></span><br><span class="line">cacheKey.update(value);</span><br></pre></td></tr></table></figure><p>在上述的代码中，将<code>MappedStatement</code>的Id、SQL的offset、SQL的limit、SQL本身以及SQL中的参数传入了CacheKey这个类，最终构成CacheKey。以下是这个类的内部结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_MULTIPLYER = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_HASHCODE = <span class="number">17</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> multiplier;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> hashcode;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> checksum;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">private</span> List updateList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CacheKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hashcode = DEFAULT_HASHCODE;</span><br><span class="line">    <span class="keyword">this</span>.multiplier = DEFAULT_MULTIPLYER;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.updateList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是成员变量和构造函数，有一个初始的<code>hachcode</code>和乘数，同时维护了一个内部的<code>updatelist</code>。在<code>CacheKey</code>的<code>update</code>方法中，会进行一个<code>hashcode</code>和<code>checksum</code>的计算，同时把传入的参数添加进<code>updatelist</code>中。如下代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> baseHashCode = object == <span class="keyword">null</span> ? <span class="number">1</span> : ArrayUtil.hashCode(object); </span><br><span class="line">    count++;</span><br><span class="line">    checksum += baseHashCode;</span><br><span class="line">    baseHashCode *= count;</span><br><span class="line">    hashcode = multiplier * hashcode + baseHashCode;</span><br><span class="line"></span><br><span class="line">    updateList.add(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时重写了<code>CacheKey</code>的<code>equals</code>方法，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    .............</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; updateList.size(); i++) &#123;</span><br><span class="line">      Object thisObject = updateList.get(i);</span><br><span class="line">      Object thatObject = cacheKey.updateList.get(i);</span><br><span class="line">      <span class="keyword">if</span> (!ArrayUtil.equals(thisObject, thatObject)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除去hashcode、checksum和count的比较外，只要updatelist中的元素一一对应相等，那么就可以认为是CacheKey相等。只要两条SQL的下列五个值相同，即可以认为是相同的SQL。</p><blockquote><p>Statement Id + Offset + Limmit + Sql + Params</p></blockquote><p>BaseExecutor的query方法继续往下走，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list = resultHandler == <span class="keyword">null</span> ? (List) localCache.getObject(key) : <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 这个主要是处理存储过程用的。</span></span><br><span class="line">    handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果查不到的话，就从数据库查，在<code>queryFromDatabase</code>中，会对<code>localcache</code>进行写入。</p><p>在<code>query</code>方法执行的最后，会判断一级缓存级别是否是<code>STATEMENT</code>级别，如果是的话，就清空缓存，这也就是<code>STATEMENT</code>级别的一级缓存无法共享<code>localCache</code>的原因。代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;</span><br><span class="line">        clearLocalCache();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在源码分析的最后，我们确认一下，如果是<code>insert/delete/update</code>方法，缓存就会刷新的原因。</p><p><code>SqlSession</code>的<code>insert</code>方法和<code>delete</code>方法，都会统一走<code>update</code>的流程，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(String statement, Object parameter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> update(statement, parameter);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(String statement)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> update(statement, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>update</code>方法也是委托给了<code>Executor</code>执行。<code>BaseExecutor</code>的执行方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    ErrorContext.instance().resource(ms.getResource()).activity(<span class="string">"executing an update"</span>).object(ms.getId());</span><br><span class="line">    <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">"Executor was closed."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    clearLocalCache();</span><br><span class="line">    <span class="keyword">return</span> doUpdate(ms, parameter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次执行<code>update</code>前都会清空<code>localCache</code>。</p><p>至此，一级缓存的工作流程讲解以及源码分析完毕。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol start="2"><li>MyBatis一级缓存的生命周期和SqlSession一致。</li><li>MyBatis一级缓存内部设计简单，只是一个没有容量限定的HashMap，在缓存的功能性上有所欠缺。</li><li>MyBatis的一级缓存最大范围是SqlSession内部，有多个SqlSession或者分布式的环境下，数据库写操作会引起脏数据，建议设定缓存级别为Statement。</li></ol><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><h3 id="二级缓存介绍"><a href="#二级缓存介绍" class="headerlink" title="二级缓存介绍"></a>二级缓存介绍</h3><p>在上文中提到的一级缓存中，其最大的共享范围就是一个SqlSession内部，如果多个SqlSession之间需要共享缓存，则需要使用到二级缓存。开启二级缓存后，会使用CachingExecutor装饰Executor，进入一级缓存的查询流程前，先在CachingExecutor进行二级缓存的查询，具体的工作流程如下所示。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/28399eba.png" alt><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/28399eba.png" alt></p><p>二级缓存开启后，同一个namespace下的所有操作语句，都影响着同一个Cache，即二级缓存被多个SqlSession共享，是一个全局的变量。</p><p>当开启缓存后，数据的查询执行的流程就是 二级缓存 -&gt; 一级缓存 -&gt; 数据库。</p><h3 id="二级缓存配置"><a href="#二级缓存配置" class="headerlink" title="二级缓存配置"></a>二级缓存配置</h3><p>要正确的使用二级缓存，需完成如下配置的。</p><ol start="2"><li><p>在MyBatis的配置文件中开启二级缓存。</p></li><li><p>在MyBatis的映射XML中配置cache或者 cache-ref 。</p></li></ol><p>cache标签用于声明这个namespace使用二级缓存，并且可以自定义配置。</p><ul><li><code>type</code>：cache使用的类型，默认是<code>PerpetualCache</code>，这在一级缓存中提到过。</li><li><code>eviction</code>： 定义回收的策略，常见的有FIFO，LRU。</li><li><code>flushInterval</code>： 配置一定时间自动刷新缓存，单位是毫秒。</li><li><code>size</code>： 最多缓存对象的个数。</li><li><code>readOnly</code>： 是否只读，若配置可读写，则需要对应的实体类能够序列化。</li><li><code>blocking</code>： 若缓存中找不到对应的key，是否会一直blocking，直到有对应的数据进入缓存。</li></ul><p><code>cache-ref</code>代表引用别的命名空间的Cache配置，两个命名空间的操作使用的是同一个Cache。</p><h3 id="二级缓存实验"><a href="#二级缓存实验" class="headerlink" title="二级缓存实验"></a>二级缓存实验</h3><p>接下来我们通过实验，了解MyBatis二级缓存在使用上的一些特点。</p><p>在本实验中，id为1的学生名称初始化为点点。</p><h4 id="实验1-1"><a href="#实验1-1" class="headerlink" title="实验1"></a>实验1</h4><p>测试二级缓存效果，不提交事务，<code>sqlSession1</code>查询完数据后，<code>sqlSession2</code>相同的查询是否会从缓存中获取数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCacheWithoutCommitOrClose</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession1 = factory.openSession(<span class="keyword">true</span>); </span><br><span class="line">        SqlSession sqlSession2 = factory.openSession(<span class="keyword">true</span>); </span><br><span class="line"></span><br><span class="line">        StudentMapper studentMapper = sqlSession1.getMapper(StudentMapper.class);</span><br><span class="line">        StudentMapper studentMapper2 = sqlSession2.getMapper(StudentMapper.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"studentMapper读取数据: "</span> + studentMapper.getStudentById(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"studentMapper2读取数据: "</span> + studentMapper2.getStudentById(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/71e2bfdc.jpg" alt><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/71e2bfdc.jpg" alt></p><p>我们可以看到，当<code>sqlsession</code>没有调用<code>commit()</code>方法时，二级缓存并没有起到作用。</p><h4 id="实验2-1"><a href="#实验2-1" class="headerlink" title="实验2"></a>实验2</h4><p>测试二级缓存效果，当提交事务时，<code>sqlSession1</code>查询完数据后，<code>sqlSession2</code>相同的查询是否会从缓存中获取数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCacheWithCommitOrClose</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession1 = factory.openSession(<span class="keyword">true</span>); </span><br><span class="line">        SqlSession sqlSession2 = factory.openSession(<span class="keyword">true</span>); </span><br><span class="line"></span><br><span class="line">        StudentMapper studentMapper = sqlSession1.getMapper(StudentMapper.class);</span><br><span class="line">        StudentMapper studentMapper2 = sqlSession2.getMapper(StudentMapper.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"studentMapper读取数据: "</span> + studentMapper.getStudentById(<span class="number">1</span>));</span><br><span class="line">        sqlSession1.commit();</span><br><span class="line">        System.out.println(<span class="string">"studentMapper2读取数据: "</span> + studentMapper2.getStudentById(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/f366f34e.jpg" alt><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/f366f34e.jpg" alt></p><p>从图上可知，<code>sqlsession2</code>的查询，使用了缓存，缓存的命中率是0.5。</p><h4 id="实验3-1"><a href="#实验3-1" class="headerlink" title="实验3"></a>实验3</h4><p>测试<code>update</code>操作是否会刷新该<code>namespace</code>下的二级缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCacheWithUpdate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession1 = factory.openSession(<span class="keyword">true</span>); </span><br><span class="line">        SqlSession sqlSession2 = factory.openSession(<span class="keyword">true</span>); </span><br><span class="line">        SqlSession sqlSession3 = factory.openSession(<span class="keyword">true</span>); </span><br><span class="line"></span><br><span class="line">        StudentMapper studentMapper = sqlSession1.getMapper(StudentMapper.class);</span><br><span class="line">        StudentMapper studentMapper2 = sqlSession2.getMapper(StudentMapper.class);</span><br><span class="line">        StudentMapper studentMapper3 = sqlSession3.getMapper(StudentMapper.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"studentMapper读取数据: "</span> + studentMapper.getStudentById(<span class="number">1</span>));</span><br><span class="line">        sqlSession1.commit();</span><br><span class="line">        System.out.println(<span class="string">"studentMapper2读取数据: "</span> + studentMapper2.getStudentById(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        studentMapper3.updateStudentName(<span class="string">"方方"</span>,<span class="number">1</span>);</span><br><span class="line">        sqlSession3.commit();</span><br><span class="line">        System.out.println(<span class="string">"studentMapper2读取数据: "</span> + studentMapper2.getStudentById(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/3ad93c3a.jpg" alt></p><p>我们可以看到，在<code>sqlSession3</code>更新数据库，并提交事务后，<code>sqlsession2</code>的<code>StudentMapper namespace</code>下的查询走了数据库，没有走Cache。</p><h4 id="实验4"><a href="#实验4" class="headerlink" title="实验4"></a>实验4</h4><p>验证MyBatis的二级缓存不适应用于映射文件中存在多表查询的情况。</p><p>通常我们会为每个单表创建单独的映射文件，由于MyBatis的二级缓存是基于<code>namespace</code>的，多表查询语句所在的<code>namspace</code>无法感应到其他<code>namespace</code>中的语句对多表查询中涉及的表进行的修改，引发脏数据问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCacheWithDiffererntNamespace</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession1 = factory.openSession(<span class="keyword">true</span>); </span><br><span class="line">        SqlSession sqlSession2 = factory.openSession(<span class="keyword">true</span>); </span><br><span class="line">        SqlSession sqlSession3 = factory.openSession(<span class="keyword">true</span>); </span><br><span class="line"></span><br><span class="line">        StudentMapper studentMapper = sqlSession1.getMapper(StudentMapper.class);</span><br><span class="line">        StudentMapper studentMapper2 = sqlSession2.getMapper(StudentMapper.class);</span><br><span class="line">        ClassMapper classMapper = sqlSession3.getMapper(ClassMapper.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"studentMapper读取数据: "</span> + studentMapper.getStudentByIdWithClassInfo(<span class="number">1</span>));</span><br><span class="line">        sqlSession1.close();</span><br><span class="line">        System.out.println(<span class="string">"studentMapper2读取数据: "</span> + studentMapper2.getStudentByIdWithClassInfo(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        classMapper.updateClassName(<span class="string">"特色一班"</span>,<span class="number">1</span>);</span><br><span class="line">        sqlSession3.commit();</span><br><span class="line">        System.out.println(<span class="string">"studentMapper2读取数据: "</span> + studentMapper2.getStudentByIdWithClassInfo(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/5265ed97.jpg" alt><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/5265ed97.jpg" alt></p><p>在这个实验中，我们引入了两张新的表，一张class，一张classroom。class中保存了班级的id和班级名，classroom中保存了班级id和学生id。我们在<code>StudentMapper</code>中增加了一个查询方法<code>getStudentByIdWithClassInfo</code>，用于查询学生所在的班级，涉及到多表查询。在<code>ClassMapper</code>中添加了<code>updateClassName</code>，根据班级id更新班级名的操作。</p><p>当<code>sqlsession1</code>的<code>studentmapper</code>查询数据后，二级缓存生效。保存在StudentMapper的namespace下的cache中。当<code>sqlSession3</code>的<code>classMapper</code>的<code>updateClassName</code>方法对class表进行更新时，<code>updateClassName</code>不属于<code>StudentMapper</code>的<code>namespace</code>，所以<code>StudentMapper</code>下的cache没有感应到变化，没有刷新缓存。当<code>StudentMapper</code>中同样的查询再次发起时，从缓存中读取了脏数据。</p><h4 id="实验5"><a href="#实验5" class="headerlink" title="实验5"></a>实验5</h4><p>为了解决实验4的问题呢，可以使用Cache ref，让<code>ClassMapper</code>引用<code>StudenMapper</code>命名空间，这样两个映射文件对应的SQL操作都使用的是同一块缓存了。</p><p>执行结果：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/a2e4c2d8.jpg" alt></p><p>不过这样做的后果是，缓存的粒度变粗了，多个<code>Mapper namespace</code>下的所有操作都会对缓存使用造成影响。</p><h3 id="二级缓存源码分析"><a href="#二级缓存源码分析" class="headerlink" title="二级缓存源码分析"></a>二级缓存源码分析</h3><p>MyBatis二级缓存的工作流程和前文提到的一级缓存类似，只是在一级缓存处理前，用<code>CachingExecutor</code>装饰了<code>BaseExecutor</code>的子类，在委托具体职责给<code>delegate</code>之前，实现了二级缓存的查询和写入功能，具体类关系图如下图所示。</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/090216b1.jpg" alt><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/090216b1.jpg" alt></p><h4 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h4><p>源码分析从<code>CachingExecutor</code>的<code>query</code>方法展开，源代码走读过程中涉及到的知识点较多，不能一一详细讲解，读者朋友可以自行查询相关资料来学习。</p><p><code>CachingExecutor</code>的<code>query</code>方法，首先会从<code>MappedStatement</code>中获得在配置初始化时赋予的Cache。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache cache = ms.getCache();</span><br></pre></td></tr></table></figure><p>本质上是装饰器模式的使用，具体的装饰链是：</p><blockquote><p>SynchronizedCache -&gt; LoggingCache -&gt; SerializedCache -&gt; LruCache -&gt; PerpetualCache。</p></blockquote><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/1f5233b2.jpg" alt><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/1f5233b2.jpg" alt></p><p>以下是具体这些Cache实现类的介绍，他们的组合为Cache赋予了不同的能力。</p><ul><li><code>SynchronizedCache</code>：同步Cache，实现比较简单，直接使用synchronized修饰方法。</li><li><code>LoggingCache</code>：日志功能，装饰类，用于记录缓存的命中率，如果开启了DEBUG模式，则会输出命中率日志。</li><li><code>SerializedCache</code>：序列化功能，将值序列化后存到缓存中。该功能用于缓存返回一份实例的Copy，用于保存线程安全。</li><li><code>LruCache</code>：采用了Lru算法的Cache实现，移除最近最少使用的Key/Value。</li><li><code>PerpetualCache</code>： 作为为最基础的缓存类，底层实现比较简单，直接使用了HashMap。</li></ul><p>然后是判断是否需要刷新缓存，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flushCacheIfRequired(ms);</span><br></pre></td></tr></table></figure><p>在默认的设置中<code>SELECT</code>语句不会刷新缓存，<code>insert/update/delte</code>会刷新缓存。进入该方法。代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">flushCacheIfRequired</span><span class="params">(MappedStatement ms)</span> </span>&#123;</span><br><span class="line">    Cache cache = ms.getCache();</span><br><span class="line">    <span class="keyword">if</span> (cache != <span class="keyword">null</span> &amp;&amp; ms.isFlushCacheRequired()) &#123;      </span><br><span class="line">      tcm.clear(cache);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyBatis的<code>CachingExecutor</code>持有了<code>TransactionalCacheManager</code>，即上述代码中的tcm。</p><p><code>TransactionalCacheManager</code>中持有了一个Map，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map transactionalCaches = <span class="keyword">new</span> HashMap();</span><br></pre></td></tr></table></figure><p>这个Map保存了Cache和用<code>TransactionalCache</code>包装后的Cache的映射关系。</p><p><code>TransactionalCache</code>实现了Cache接口，<code>CachingExecutor</code>会默认使用他包装初始生成的Cache，作用是如果事务提交，对缓存的操作才会生效，如果事务回滚或者不提交事务，则不对缓存产生影响。</p><p>在<code>TransactionalCache</code>的clear，有以下两句。清空了需要在提交时加入缓存的列表，同时设定提交时清空缓存，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    clearOnCommit = <span class="keyword">true</span>;</span><br><span class="line">    entriesToAddOnCommit.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CachingExecutor</code>继续往下走，<code>ensureNoOutParams</code>主要是用来处理存储过程的，暂时不用考虑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ms.isUseCache() &amp;&amp; resultHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">    ensureNoOutParams(ms, parameterObject, boundSql);</span><br></pre></td></tr></table></figure><p>之后会尝试从tcm中获取缓存的列表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List list = (List) tcm.getObject(cache, key);</span><br></pre></td></tr></table></figure><p>在<code>getObject</code>方法中，会把获取值的职责一路传递，最终到<code>PerpetualCache</code>。如果没有查到，会把key加入Miss集合，这个主要是为了统计命中率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Object object = delegate.getObject(key);</span><br><span class="line"><span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">    entriesMissedInCache.add(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CachingExecutor</code>继续往下走，如果查询到数据，则调用<code>tcm.putObject</code>方法，往缓存中放入值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</span><br><span class="line">    list = delegate. query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">    tcm.putObject(cache, key, list); <span class="comment">// issue #578 and #116</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tcm的<code>put</code>方法也不是直接操作缓存，只是在把这次的数据和key放入待提交的Map中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object key, Object object)</span> </span>&#123;</span><br><span class="line">    entriesToAddOnCommit.put(key, object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从以上的代码分析中，我们可以明白，如果不调用<code>commit</code>方法的话，由于<code>TranscationalCache</code>的作用，并不会对二级缓存造成直接的影响。因此我们看看<code>Sqlsession</code>的<code>commit</code>方法中做了什么。代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(<span class="keyword">boolean</span> force)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor.commit(isCommitOrRollbackRequired(force));</span><br></pre></td></tr></table></figure><p>因为我们使用了CachingExecutor，首先会进入CachingExecutor实现的commit方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(<span class="keyword">boolean</span> required)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    delegate.commit(required);</span><br><span class="line">    tcm.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会把具体commit的职责委托给包装的<code>Executor</code>。主要是看下<code>tcm.commit()</code>，tcm最终又会调用到<code>TrancationalCache</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (clearOnCommit) &#123;</span><br><span class="line">      delegate.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    flushPendingEntries();</span><br><span class="line">    reset();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里的<code>clearOnCommit</code>就想起刚才<code>TrancationalCache</code>的<code>clear</code>方法设置的标志位，真正的清理Cache是放到这里来进行的。具体清理的职责委托给了包装的Cache类。之后进入<code>flushPendingEntries</code>方法。代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">flushPendingEntries</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry entry : entriesToAddOnCommit.entrySet()) &#123;</span><br><span class="line">      delegate.putObject(entry.getKey(), entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    ................</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>flushPending</code>Entries中，将待提交的Map进行循环处理，委托给包装的Cache类，进行<code>putObject</code>的操作。</p><p>后续的查询操作会重复执行这套流程。如果是<code>insert|update|delete</code>的话，会统一进入<code>CachingExecutor</code>的<code>update</code>方法，其中调用了这个函数，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">flushCacheIfRequired</span><span class="params">(MappedStatement ms)</span></span></span><br></pre></td></tr></table></figure><p>在二级缓存执行流程后就会进入一级缓存的执行流程，因此不再赘述。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ol start="2"><li>MyBatis的二级缓存相对于一级缓存来说，实现了<code>SqlSession</code>之间缓存数据的共享，同时粒度更加的细，能够到<code>namespace</code>级别，通过Cache接口实现类不同的组合，对Cache的可控性也更强。</li><li>MyBatis在多表查询时，极大可能会出现脏数据，有设计上的缺陷，安全使用二级缓存的条件比较苛刻。</li><li>在分布式环境下，由于默认的MyBatis Cache实现都是基于本地的，分布式环境下必然会出现读取到脏数据，需要使用集中式缓存将MyBatis的Cache接口实现，有一定的开发成本，直接使用Redis、Memcached等分布式缓存可能成本更低，安全性也更高。</li></ol><h2 id="全文总结"><a href="#全文总结" class="headerlink" title="全文总结"></a>全文总结</h2><p>本文对介绍了MyBatis一二级缓存的基本概念，并从应用及源码的角度对MyBatis的缓存机制进行了分析。最后对MyBatis缓存机制做了一定的总结，个人建议MyBatis缓存特性在生产环境中进行关闭，单纯作为一个ORM框架使用可能更为合适。</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用自定义count SQL</title>
      <link href="/posts/4247/"/>
      <url>/posts/4247/</url>
      
        <content type="html"><![CDATA[<p>pagehelper    5.1.8</p><p>mybatis    3.4.4</p><p>mybatis-spring    1.3.0</p><a id="more"></a><h4 id="PageHelper-5-0-4-增加手写-count-查询支持"><a href="#PageHelper-5-0-4-增加手写-count-查询支持" class="headerlink" title="PageHelper 5.0.4 增加手写 count 查询支持"></a>PageHelper 5.0.4 增加手写 count 查询支持</h4><p>增加<code>countSuffix</code>count 查询后缀配置参数，该参数是针对<code>PageInterceptor</code>配置的，默认值为<code>_COUNT</code>。</p><p>分页插件会优先通过当前查询的 msId +<code>countSuffix</code>查找手写的分页查询。</p><p>如果存在就使用手写的 count 查询，如果不存在，仍然使用之前的方式自动创建 count 查询。</p><p>例如，如果存在下面两个查询：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectLeftjoin"</span> <span class="attr">resultType</span>=<span class="string">"com.github.pagehelper.model.Country"</span>&gt;</span></span><br><span class="line">    select a.id,b.countryname,a.countrycode from country a</span><br><span class="line">    left join country b on a.id = b.id</span><br><span class="line">    order by a.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectLeftjoin_COUNT"</span> <span class="attr">resultType</span>=<span class="string">"Long"</span>&gt;</span></span><br><span class="line">    select count(distinct a.id) from country a</span><br><span class="line">    left join country b on a.id = b.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的<code>countSuffix</code>使用的默认值<code>_COUNT</code>，分页插件会自动获取到<code>selectLeftjoin_COUNT</code>查询，这个查询需要自己保证结果数正确。</p><p>返回值的类型必须是<code>resultType=&quot;Long&quot;</code>，入参使用的和<code>selectLeftjoin</code>查询相同的参数，所以在 SQL 中要按照<code>selectLeftjoin</code>的入参来使用。</p><p>因为<code>selectLeftjoin_COUNT</code>方法是自动调用的，所以不需要在接口提供相应的方法，如果需要单独调用，也可以提供。</p><p>上面方法执行输出的部分日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DEBUG [main] - ==&gt;  Preparing: select count(distinct a.id) from country a left join country b on a.id = b.id </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: </span><br><span class="line">TRACE [main] - &lt;==    Columns: C1</span><br><span class="line">TRACE [main] - &lt;==        Row: 183</span><br><span class="line">DEBUG [main] - &lt;==      Total: 1</span><br><span class="line">DEBUG [main] - Cache Hit Ratio [com.github.pagehelper.mapper.CountryMapper]: 0.0</span><br><span class="line">DEBUG [main] - ==&gt;  Preparing: select a.id,b.countryname,a.countrycode from country a left join country b on a.id = b.id order by a.id LIMIT 10 </span><br><span class="line">DEBUG [main] - ==&gt; Parameters: </span><br><span class="line">TRACE [main] - &lt;==    Columns: ID, COUNTRYNAME, COUNTRYCODE</span><br><span class="line">TRACE [main] - &lt;==        Row: 1, Angola, AO</span><br><span class="line">TRACE [main] - &lt;==        Row: 2, Afghanistan, AF</span><br><span class="line">TRACE [main] - &lt;==        Row: 3, Albania, AL</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadPoolExecutor线程池参数设置技巧</title>
      <link href="/posts/ff4c/"/>
      <url>/posts/ff4c/</url>
      
        <content type="html"><![CDATA[<h3 id="一、ThreadPoolExecutor的重要参数"><a href="#一、ThreadPoolExecutor的重要参数" class="headerlink" title="一、ThreadPoolExecutor的重要参数"></a><strong>一、ThreadPoolExecutor的重要参数</strong></h3><a id="more"></a><ul><li><p>corePoolSize：核心线程数</p><ul><li><p>核心线程会一直存活，及时没有任务需要执行</p></li><li><p>当线程数小于核心线程数时，即使有线程空闲，线程池也会优先创建新线程处理</p></li><li><p>设置allowCoreThreadTimeout=true（默认false）时，核心线程会超时关闭</p></li></ul></li><li><p>queueCapacity：任务队列容量（阻塞队列）</p><ul><li>当核心线程数达到最大时，新任务会放在队列中排队等待执行</li></ul></li><li><p>maxPoolSize：最大线程数</p><ul><li><p>当线程数&gt;=corePoolSize，且任务队列已满时。线程池会创建新线程来处理任务</p></li><li><p>当线程数=maxPoolSize，且任务队列已满时，线程池会拒绝处理任务而抛出异常</p></li></ul></li><li><p>keepAliveTime：线程空闲时间</p><ul><li><p>当线程空闲时间达到keepAliveTime时，线程会退出，直到线程数量=corePoolSize</p></li><li><p>如果allowCoreThreadTimeout=true，则会直到线程数量=0</p></li></ul></li><li><p>allowCoreThreadTimeout：允许核心线程超时</p></li><li><p>rejectedExecutionHandler：任务拒绝处理器</p><ul><li><p>两种情况会拒绝处理任务：</p></li><li><ul><li>当线程数已经达到maxPoolSize，切队列已满，会拒绝新任务</li><li>当线程池被调用shutdown()后，会等待线程池里的任务执行完毕，再shutdown。如果在调用shutdown()和线程池真正shutdown之间提交任务，会拒绝新任务</li></ul></li><li><p>线程池会调用rejectedExecutionHandler来处理这个任务。如果没有设置默认是AbortPolicy，会抛出异常</p></li><li><p>ThreadPoolExecutor类有几个内部实现类来处理这类情况：</p></li><li><ul><li>AbortPolicy 丢弃任务，抛运行时异常</li><li>CallerRunsPolicy 执行任务</li><li>DiscardPolicy 忽视，什么都不会发生</li><li>DiscardOldestPolicy 从队列中踢出最先进入队列（最后一个执行）的任务</li></ul></li><li><p>实现RejectedExecutionHandler接口，可自定义处理器</p></li></ul></li></ul><h3 id="二、ThreadPoolExecutor执行顺序："><a href="#二、ThreadPoolExecutor执行顺序：" class="headerlink" title="二、ThreadPoolExecutor执行顺序："></a><strong>二、ThreadPoolExecutor执行顺序：</strong></h3><p>线程池按以下行为执行任务</p><ol start="2"><li>当线程数小于核心线程数时，创建线程。</li><li>当线程数大于等于核心线程数，且任务队列未满时，将任务放入任务队列。</li><li>当线程数大于等于核心线程数，且任务队列已满<ol><li>若线程数小于最大线程数，创建线程</li><li>若线程数等于最大线程数，抛出异常，拒绝任务</li></ol></li></ol><h3 id="三、如何设置参数"><a href="#三、如何设置参数" class="headerlink" title="三、如何设置参数"></a><strong>三、如何设置参数</strong></h3><ul><li><p>默认值</p><ul><li><p>corePoolSize=1</p></li><li><p>queueCapacity=Integer.MAX_VALUE</p></li><li><p>maxPoolSize=Integer.MAX_VALUE</p></li><li><p>keepAliveTime=60s</p></li><li><p>allowCoreThreadTimeout=false</p></li><li><p>rejectedExecutionHandler=AbortPolicy()</p></li></ul></li><li><p>如何来设置</p><ul><li><p>需要根据几个值来决定</p></li><li><ul><li>tasks ：每秒的任务数，假设为500~1000</li><li>taskcost：每个任务花费时间，假设为0.1s</li><li>responsetime：系统允许容忍的最大响应时间，假设为1s</li></ul></li><li><p>做几个计算</p></li><li><ul><li>corePoolSize = 每秒需要多少个线程处理？</li><li><ul><li>threadcount = tasks/(1/taskcost) =tasks<em>taskcout = (500~1000)</em>0.1 = 50~100 个线程。corePoolSize设置应该大于50</li><li>根据8020原则，如果80%的每秒任务数小于800，那么corePoolSize设置为80即可</li></ul></li><li>queueCapacity = (coreSizePool/taskcost)*responsetime</li><li><ul><li>计算可得 queueCapacity = 80/0.1*1 = 80。意思是队列里的线程可以等待1s，超过了的需要新开线程来执行</li><li>切记不能设置为Integer.MAX_VALUE，这样队列会很大，线程数只会保持在corePoolSize大小，当任务陡增时，不能新开线程来执行，响应时间会随之陡增。</li></ul></li><li>maxPoolSize = (max(tasks)- queueCapacity)/(1/taskcost)</li><li><ul><li>计算可得 maxPoolSize = (1000-80)/10 = 92</li><li>（最大任务数-队列容量）/每个线程每秒处理能力 = 最大线程数</li></ul></li><li>rejectedExecutionHandler：根据具体情况来决定，任务不重要可丢弃，任务重要则要利用一些缓冲机制来处理</li><li>keepAliveTime和allowCoreThreadTimeout采用默认通常能满足</li></ul></li></ul></li><li><p>以上都是理想值，实际情况下要根据机器性能来决定。如果在未达到最大线程数的情况机器cpu load已经满了，则需要通过升级硬件（呵呵）和优化代码，降低taskcost来处理。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MultiThread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MultiThread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LockSupport</title>
      <link href="/posts/8785/"/>
      <url>/posts/8785/</url>
      
        <content type="html"><![CDATA[<h3 id="用例1：子线程等待主线程发放许可！"><a href="#用例1：子线程等待主线程发放许可！" class="headerlink" title="用例1：子线程等待主线程发放许可！"></a>用例1：子线程等待主线程发放许可！</h3><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"子线程 -&gt; 测试通行许可！"</span>);</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.println(<span class="string">"子线程 -&gt; 已通行！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    thread.start();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"主线程 -&gt; 休眠1秒！"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"主线程 -&gt; 发放通行许可于子线程！"</span>);</span><br><span class="line">    LockSupport.unpark(thread);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        运行结果：</span></span><br><span class="line"><span class="comment">        主线程 -&gt; 休眠1秒！</span></span><br><span class="line"><span class="comment">        子线程 -&gt; 测试通行许可！</span></span><br><span class="line"><span class="comment">        主线程 -&gt; 发放通行许可于子线程！</span></span><br><span class="line"><span class="comment">        子线程 -&gt; 已通行！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用例2：主线程提前发放许可给子线程！"><a href="#用例2：主线程提前发放许可给子线程！" class="headerlink" title="用例2：主线程提前发放许可给子线程！"></a>用例2：主线程提前发放许可给子线程！</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"子线程 -&gt; 休眠1秒！"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"子线程 -&gt; 测试通行许可！"</span>);</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.println(<span class="string">"子线程 -&gt; 已通行！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    thread.start();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"主线程 -&gt; 提前发放通行许可于子线程！"</span>);</span><br><span class="line">    LockSupport.unpark(thread);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        运行结果：</span></span><br><span class="line"><span class="comment">        主线程 -&gt; 提前发放通行许可于子线程！</span></span><br><span class="line"><span class="comment">        子线程 -&gt; 休眠1秒！</span></span><br><span class="line"><span class="comment">        子线程 -&gt; 测试通行许可！</span></span><br><span class="line"><span class="comment">        子线程 -&gt; 已通行！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用例3：子线程传递数据给主线程。"><a href="#用例3：子线程传递数据给主线程。" class="headerlink" title="用例3：子线程传递数据给主线程。"></a>用例3：子线程传递数据给主线程。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"子线程 -&gt; 测试通行许可！并提供通行证：A"</span>);</span><br><span class="line">            LockSupport.park(<span class="keyword">new</span> String(<span class="string">"A"</span>));</span><br><span class="line">            System.out.println(<span class="string">"子线程 -&gt; 已通行！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    thread.start();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"主线程 -&gt; 休眠1秒！"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"主线程 -&gt; 检查并处理子线程的通行证："</span> + LockSupport.getBlocker(thread));</span><br><span class="line">    System.out.println(<span class="string">"主线程 -&gt; 许可子线程通行！"</span>);</span><br><span class="line">    LockSupport.unpark(thread);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        运行结果：</span></span><br><span class="line"><span class="comment">        主线程 -&gt; 休眠1秒！</span></span><br><span class="line"><span class="comment">        子线程 -&gt; 测试通行许可！并提供通行证：A</span></span><br><span class="line"><span class="comment">        主线程 -&gt; 检查并处理子线程的通行证：A</span></span><br><span class="line"><span class="comment">        主线程 -&gt; 许可子线程通行！</span></span><br><span class="line"><span class="comment">        子线程 -&gt; 已通行！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全部操作："><a href="#全部操作：" class="headerlink" title="全部操作："></a>全部操作：</h3><ul><li><p>park()/park(Object)</p><p>等待通行准许。</p></li><li><p>parkNanos(long)/parkNanos(Object, long)</p><p>在指定运行时间（即相对时间）内，等待通行准许。</p></li><li><p>parkUntil(long)/parkUntil(Object, long)</p><p>在指定到期时间（即绝对时间）内，等待通行准许。</p></li><li><p>unpark(Thread)</p><p>发放通行准许或提前发放。（注：不管提前发放多少次，只用于一次性使用。）</p></li><li><p>getBlocker(Thread)</p><p>进入等待通行准许时，所提供的对象。</p></li></ul><h3 id="主要用途："><a href="#主要用途：" class="headerlink" title="主要用途："></a>主要用途：</h3><p>当前线程需要唤醒另一个线程，但是只确定它会进入阻塞，但不确定它是否已经进入阻塞，因此不管是否已经进入阻塞，还是准备进入阻塞，都将发放一个通行准许。</p><h3 id="正确用法："><a href="#正确用法：" class="headerlink" title="正确用法："></a>正确用法：</h3><p>　　把LockSupport视为一个sleep()来用，只是sleep()是定时唤醒，LockSupport既可以定时唤醒，也可以由其它线程唤醒。</p>]]></content>
      
      
      <categories>
          
          <category> MultiThread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MultiThread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AtomicInteger</title>
      <link href="/posts/e8f0/"/>
      <url>/posts/e8f0/</url>
      
        <content type="html"><![CDATA[<h1 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h1><p>AtomicInteger，一个提供原子操作的Integer的类。在Java语言中，++i和i++操作并不是线程安全的，在使用的时候，不可避免的会用到synchronized关键字。而AtomicInteger则通过一种线程安全的加减操作接口。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count++; <span class="comment">// 若要线程安全执行执行count++，需要加锁</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用AtomicInteger之后，不需要加锁，也可以实现线程安全。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AtomicInteger常用接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当前的值</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> <span class="comment">//取当前的值，并设置新的值</span></span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">int</span> newValue)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> <span class="comment">//获取当前的值，并自增</span></span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> <span class="comment">//获取当前的值，并自减</span></span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndDecrement</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> <span class="comment">//获取当前的值，并加上预期的值</span></span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAdd</span><span class="params">(<span class="keyword">int</span> delta)</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MultiThread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MultiThread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是CPU密集型、IO密集型</title>
      <link href="/posts/93d6/"/>
      <url>/posts/93d6/</url>
      
        <content type="html"><![CDATA[<h3 id="CPU密集型（CPU-bound）"><a href="#CPU密集型（CPU-bound）" class="headerlink" title="CPU密集型（CPU-bound）"></a>CPU密集型（CPU-bound）</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CPU密集型也叫计算密集型，指的是系统的硬盘、内存性能相对CPU要好很多，此时，系统运作大部分的状况是CPU Loading 100%，CPU要读/写I/O(硬盘/内存)，I/O在很短的时间就可以完成，而CPU还有许多运算要处理，CPU Loading很高。</span><br><span class="line"></span><br><span class="line">在多重程序系统中，大部份时间用来做计算、逻辑判断等CPU动作的程序称之CPU bound。例如一个计算圆周率至小数点一千位以下的程序，在执行的过程当中绝大部份时间用在三角函数和开根号的计算，便是属于CPU bound的程序。</span><br><span class="line"></span><br><span class="line">CPU bound的程序一般而言CPU占用率相当高。这可能是因为任务本身不太需要访问I/O设备，也可能是因为程序是多线程实现因此屏蔽掉了等待I/O的时间。</span><br></pre></td></tr></table></figure><h3 id="IO密集型（I-O-bound）"><a href="#IO密集型（I-O-bound）" class="headerlink" title="IO密集型（I/O bound）"></a>IO密集型（I/O bound）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IO密集型指的是系统的CPU性能相对硬盘、内存要好很多，此时，系统运作，大部分的状况是CPU在等I/O (硬盘/内存) 的读/写操作，此时CPU Loading并不高。</span><br><span class="line"></span><br><span class="line">I/O bound的程序一般在达到性能极限时，CPU占用率仍然较低。这可能是因为任务本身需要大量I/O操作，而pipeline做得不是很好，没有充分利用处理器能力。</span><br></pre></td></tr></table></figure><h3 id="CPU密集型-vs-IO密集型"><a href="#CPU密集型-vs-IO密集型" class="headerlink" title="CPU密集型 vs IO密集型"></a>CPU密集型 vs IO密集型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">我们可以把任务分为计算密集型和IO密集型。</span><br><span class="line"></span><br><span class="line">计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，全靠CPU的运算能力。这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低，所以，要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数。</span><br><span class="line"></span><br><span class="line">计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。</span><br><span class="line"></span><br><span class="line">第二种任务的类型是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用。</span><br><span class="line"></span><br><span class="line">IO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率。对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。</span><br><span class="line"></span><br><span class="line">总之，计算密集型程序适合C语言多线程，I/O密集型适合脚本语言开发的多线程。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MultiThread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MultiThread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven PurgingLocalRepository</title>
      <link href="/posts/63e4/"/>
      <url>/posts/63e4/</url>
      
        <content type="html"><![CDATA[<h2 id="Purging-local-repository-dependencies"><a href="#Purging-local-repository-dependencies" class="headerlink" title="Purging local repository dependencies"></a>Purging local repository dependencies</h2><p>The purpose of thedependency:purge-local-repositorygoal is to purge (delete and optionally re-resolve) artifacts from the local maven repository. This page describes some of the configuration options available to the plugin.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:purge-local-repository</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Dependency-includes-excludes"><a href="#Dependency-includes-excludes" class="headerlink" title="Dependency includes/excludes"></a>Dependency includes/excludes</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;project&gt;</span><br><span class="line">  [...]</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.1.1&lt;/version&gt;</span><br><span class="line">        &lt;executions&gt;</span><br><span class="line">          &lt;execution&gt;</span><br><span class="line">            &lt;id&gt;purge-local-dependencies&lt;/id&gt;</span><br><span class="line">            &lt;phase&gt;process-sources&lt;/phase&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">              &lt;goal&gt;purge-local-repository&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">              &lt;excludes&gt;</span><br><span class="line">                &lt;exclude&gt;[groupId1]:[artifactId1]&lt;/exclude&gt;</span><br><span class="line">                &lt;exclude&gt;[groupId2]:[artifactId2]&lt;/exclude&gt;</span><br><span class="line">              &lt;/excludes&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">          &lt;/execution&gt;</span><br><span class="line">        &lt;/executions&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">  [...]</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven maven.test.skip和skipTests的区别</title>
      <link href="/posts/9298/"/>
      <url>/posts/9298/</url>
      
        <content type="html"><![CDATA[<p><strong><code>-DskipTests</code></strong>，不执行测试用例，但编译测试用例类生成相应的class文件至target/test-classes下。</p><p><strong><code>-Dmaven.test.skip=true</code></strong>，不执行测试用例，也不编译测试用例类。</p><p>也可以在pom.xml文件中修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;  </span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugin&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;2.1&lt;/version&gt;  </span><br><span class="line">    &lt;configuration&gt;  </span><br><span class="line">        &lt;skip&gt;true&lt;/skip&gt;  </span><br><span class="line">    &lt;/configuration&gt;  </span><br><span class="line">&lt;/plugin&gt;  </span><br><span class="line">&lt;plugin&gt;  </span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;2.5&lt;/version&gt;  </span><br><span class="line">    &lt;configuration&gt;  </span><br><span class="line">        &lt;skip&gt;true&lt;/skip&gt;  </span><br><span class="line">    &lt;/configuration&gt;  </span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven Deploy</title>
      <link href="/posts/92b0/"/>
      <url>/posts/92b0/</url>
      
        <content type="html"><![CDATA[<h2 id="pom-xml配置"><a href="#pom-xml配置" class="headerlink" title="pom.xml配置"></a>pom.xml配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;distributionManagement&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">      &lt;id&gt;releases&lt;/id&gt;</span><br><span class="line">      &lt;name&gt;Internal Releases&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http://121.40.185.58:8081/nexus/content/repositories/thirdparty&lt;/url&gt;</span><br><span class="line">    &lt;/repository&gt;</span><br><span class="line">    &lt;snapshotRepository&gt;</span><br><span class="line">      &lt;id&gt;releases&lt;/id&gt;</span><br><span class="line">      &lt;name&gt;Internal Releases&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http://121.40.185.58:8081/nexus/content/repositories/thirdparty&lt;/url&gt;</span><br><span class="line">    &lt;/snapshotRepository&gt;</span><br><span class="line">  &lt;/distributionManagement&gt;</span><br></pre></td></tr></table></figure><h2 id="setting-xml文件配置"><a href="#setting-xml文件配置" class="headerlink" title="setting.xml文件配置"></a>setting.xml文件配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;server&gt;  </span><br><span class="line">   &lt;id&gt;releases&lt;/id&gt;  </span><br><span class="line">   &lt;username&gt;admin&lt;/username&gt;  </span><br><span class="line">   &lt;password&gt;admin123&lt;/password&gt;  </span><br><span class="line">&lt;/server&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda表达式</title>
      <link href="/posts/8609/"/>
      <url>/posts/8609/</url>
      
        <content type="html"><![CDATA[<p># </p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(parameters) -&gt; expression</span><br><span class="line">或</span><br><span class="line">(parameters) -&gt;&#123; statements; &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>可选类型声明：</strong>不需要声明参数类型，编译器可以统一识别参数值。</li><li><strong>可选的参数圆括号：</strong>一个参数无需定义圆括号，但多个参数需要定义圆括号。</li><li><strong>可选的大括号：</strong>如果主体包含了一个语句，就不需要使用大括号。</li><li><strong>可选的返回关键字：</strong>如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。</li></ul><h3 id="Lambda-表达式实例"><a href="#Lambda-表达式实例" class="headerlink" title="Lambda 表达式实例"></a>Lambda 表达式实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 不需要参数,返回值为 5  </span></span><br><span class="line">() -&gt; <span class="number">5</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 接收一个参数(数字类型),返回其2倍的值  </span></span><br><span class="line">x -&gt; <span class="number">2</span> * x  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 接受2个参数(数字),并返回他们的差值  </span></span><br><span class="line">(x, y) -&gt; x – y  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 接收2个int型整数,返回他们的和  </span></span><br><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; x + y  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span></span><br><span class="line">(String s) -&gt; System.out.print(s)</span><br></pre></td></tr></table></figure><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>lambda 表达式只能引用标记了 final 的外层局部变量，这就是说不能在 lambda 内部修改定义在域外的局部变量，否则会编译错误。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka消息事务</title>
      <link href="/posts/76c2/"/>
      <url>/posts/76c2/</url>
      
        <content type="html"><![CDATA[<h3 id="数据传输事务的定义"><a href="#数据传输事务的定义" class="headerlink" title="数据传输事务的定义"></a>数据传输事务的定义</h3><ul><li>最多一次：消息不会被重复发送，最多被传输一次，但也有可能一次不传输。</li><li>最少一次：消息不会被漏发送，最少被传输一次，但也有可能被重复发送。</li><li>精确的一次（Exactly once）：不会漏传输也不会重复传输，每个消息都被传输一次而且仅仅被传输一次，这是大家所期望的。</li></ul><h3 id="事务保证"><a href="#事务保证" class="headerlink" title="事务保证"></a>事务保证</h3><ul><li>内部重试问题：Preceducer幂等处理</li><li>多分区原子写入</li></ul>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka介绍</title>
      <link href="/posts/d84c/"/>
      <url>/posts/d84c/</url>
      
        <content type="html"><![CDATA[<h3 id="LinkedIn-开源"><a href="#LinkedIn-开源" class="headerlink" title="LinkedIn 开源"></a>LinkedIn 开源</h3><ol start="2"><li>分布式数据同步系统Databus</li><li>高性能计算引擎Cubert</li><li>Java异步处理框架ParSeq</li><li>Kafka流处理平台</li></ol><a id="more"></a><h3 id="A-streaming-platform-has-three-key-capabilities"><a href="#A-streaming-platform-has-three-key-capabilities" class="headerlink" title="A streaming platform has three key capabilities:"></a>A streaming platform has three key capabilities:</h3><ul><li>Publish and subscribe to streams of records, similar to a message queue or enterprise messaging system.</li><li>Store streams of records in a fault-tolerant durable way.</li><li>Process streams of records as they occur.</li></ul><h3 id="Kafka-is-generally-used-for-two-broad-classes-of-applications"><a href="#Kafka-is-generally-used-for-two-broad-classes-of-applications" class="headerlink" title="Kafka is generally used for two broad classes of applications:"></a>Kafka is generally used for two broad classes of applications:</h3><ul><li>Building real-time streaming data pipelines that reliably get data between systems or applications</li><li>Building real-time streaming applications that transform or react to the streams of data</li></ul>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka基本概念</title>
      <link href="/posts/6dd5/"/>
      <url>/posts/6dd5/</url>
      
        <content type="html"><![CDATA[<h1 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h1><p>提供一串流式的记录。</p><p>Topic 就是数据主题，是数据记录发布的地方,可以用来区分业务系统。Kafka中的Topics总是多订阅者模式，一个topic可以拥有一个或者多个消费者来订阅它的数据。</p><a id="more"></a><h1 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h1><p>日志的分区partition （分布）在Kafka集群的服务器上。每个服务器在处理数据和请求时，共享这些分区。每一个分区都会在已配置的服务器上进行备份，确保容错性.</p><p>每个分区都有一台 server 作为 “leader”，零台或者多台server作为 follwers 。leader server 处理一切对 partition （分区）的读写请求，而follwers只需被动的同步leader上的数据。当leader宕机了，followers 中的一台服务器会自动成为新的 leader。每台 server 都会成为某些分区的 leader 和某些分区的 follower，因此集群的负载是平衡的。</p><h1 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h1><p>生产者可以将数据发布到所选择的topic（主题）中。生产者负责将记录分配到topic的哪一个 partition（分区）中。可以使用循环的方式来简单地实现负载均衡，也可以根据某些语义分区函数(例如：记录中的key)来完成。下面会介绍更多关于分区的使用。</p><h1 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h1><p>消费者使用一个 <em>消费组</em> 名称来进行标识，发布到topic中的每条记录被分配给订阅消费组中的一个消费者实例.消费者实例可以分布在多个进程中或者多个机器上。</p><p>如果所有的消费者实例在同一消费组中，消息记录会负载平衡到每一个消费者实例.</p><p>如果所有的消费者实例在不同的消费组中，每条消息记录会广播到所有的消费者进程.</p><h1 id="分区Partition"><a href="#分区Partition" class="headerlink" title="分区Partition"></a>分区Partition</h1><p>物理概念，Kafka下数据存储的基本单元。一个Topic数据，会被分散存储到多个Partition，每一个Partition是有序的</p><ul><li>每一个Topic被切分为多个Partitions</li><li>消费者数目少于或等于Partition的数目</li><li>Broker Group中的每一个Broker保存Topic的一个或多个Partitions</li><li>Consumer Group中的仅有一个Consumer读取Topic的一个或多个Partitions，并且是唯一的Consumer</li></ul><h1 id="消息的分发策略"><a href="#消息的分发策略" class="headerlink" title="消息的分发策略"></a>消息的分发策略</h1><p>消息是kafka中最基本数据单元。一条消息由Key、Value两部分构成，其中，key可以指定也可以不指定。默认情况下，kafka 采用的是 hash 取模算法决定消息存储到哪个分区。如果Key 为 null，则会随机分配一个分区。</p><h1 id="消息的消费策略"><a href="#消息的消费策略" class="headerlink" title="消息的消费策略"></a>消息的消费策略</h1><p>一个consumer group-0 里有3个consumer时，他们一起消费topic.test，这个test下有3个分区，怎么协调？</p><p>c1消费p0,c2消费p1,c3消费p2</p><p>kafka的策略是：一个分区只能由一个消费者消费。</p><p><strong>分区分配策略</strong>：</p><ul><li><p>范围分区(Range strategy 默认)</p><p>范围分区策略先对一个主题里面的分区按照序号排序，并对消费者按字母顺序排序。对于如上3个分区，3个消费者，排序后：</p><blockquote><p>分区序列:0,1,2</p><p>消费者序列:C1-0,C2-0,C3-0</p></blockquote><p>然后将<em>分区数 / 消费者数</em> 决定每个消费线程消费几个分区,最终</p><blockquote><p>C1-0 : p0</p><p>C2-0：p1</p><p>C3-0：p2</p></blockquote><p><strong>如果2个主题，每个主题10个分区，group-0下的3个消费者怎么协调呢？</strong></p><p>C1-0 将消费 T1 主题的 0, 1, 2, 3 分区以及 T2 主题的 0,1, 2, 3 分区</p><p>C2-0 将消费 T1 主题的 4, 5, 6 分区以及 T2 主题的 4, 5, 6 分区 </p><p>C3-0 将消费 T1 主题的 7, 8, 9 分区以及 T2 主题的 7, 8, 9分区</p></li><li><p>轮询分配</p><p>轮询分区策略是把所有 partition 和所有 consumer 线程都列出来，按照 hashcode 进行排序。然后将所有分区依次轮流分配给所有consumer。</p></li></ul><h5 id="5-什么时候触发消费分配策略？"><a href="#5-什么时候触发消费分配策略？" class="headerlink" title="5. 什么时候触发消费分配策略？"></a>5. 什么时候触发消费分配策略？</h5><p>消费者分区分配策略又叫 consumer rebalance。当：</p><ul><li><p>一个consumer group里新增消费者</p></li><li><p>有消费者离开当前的consumer group</p></li><li><p>topic新增分区</p></li></ul><p>消费者 &lt;= 分区数，若大于分区数，就会有闲置的消费者</p><p>partition最好是consumer的整数倍</p><h3 id="ConsumerGroup"><a href="#ConsumerGroup" class="headerlink" title="ConsumerGroup"></a>ConsumerGroup</h3><p>逻辑概念，对于同一个topic，会广播给不同的group，一个group中，只有一个consumer可以消费该消息</p><h3 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h3><p>物理概念，Kafka集群中的每个Kafka节点</p><p>### </p><p># </p><h3 id="Replication"><a href="#Replication" class="headerlink" title="Replication"></a>Replication</h3><p>同一个Partition可能会有多个Replica，多个Replica之间数据是一样的</p><ul><li>当集群中有Broker挂掉的情况，系统可以主动地使用Replicas提供服务</li><li>系统默认设置每一个Topic的replication系数为1，可以在创建Topic时单独设置</li><li>Replication的基本单位是Topic的Partition</li><li>所有的读和写都从Leader进，Followers只是做备份</li><li>Followers必须能够及时复制Leader的数据</li><li>增加容错性与可扩展性</li></ul><h3 id="Replication-Leader"><a href="#Replication-Leader" class="headerlink" title="Replication Leader"></a>Replication Leader</h3><p>一个Partition的多个Replica上，需要一个Leader负责该Partition上与Producer和Consumer交互</p><h3 id="ReplicaManager"><a href="#ReplicaManager" class="headerlink" title="ReplicaManager"></a>ReplicaManager</h3><p>负责管理当前broker所有分区和副本的信息，处理KafkaController发起的一些请求，副本状态的切换、添加/读取消息等</p>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>REST POST&amp;PUT</title>
      <link href="/posts/90ac/"/>
      <url>/posts/90ac/</url>
      
        <content type="html"><![CDATA[<h1 id="REST-–-PUT-vs-POST"><a href="#REST-–-PUT-vs-POST" class="headerlink" title="REST – PUT vs POST"></a>REST – PUT vs POST</h1><p>It has been observed that many people struggle to choose between<strong>HTTP PUT vs POST</strong>methods when designing a system. Though,<a href="https://www.ietf.org/rfc/rfc2616.txt" target="_blank" rel="noopener">RFC 2616</a>has been very clear in differentiating between the two – yet complex wordings are a source of confusion for many of us. Let’s try to solve the puzzle<strong>when to use PUT or POST</strong>.</p><p>Let’s compare them for better understanding.</p><a id="more"></a><table><thead><tr><th><strong>PUT</strong></th><th><strong>POST</strong></th></tr></thead><tbody><tr><td>RFC-2616 clearly mention that PUT method requests for the enclosed entity be stored under the supplied Request-URI. If the Request-URI refers to an already existing resource – an update operation will happen, otherwise create operation should happen if Request-URI is a valid resource URI (assuming client is allowed to determine resource identifier).</td><td>The POST method is used to request that the origin server accept the entity enclosed in the request as a new subordinate of the resource identified by the Request-URI in the Request-Line. It essentially means that POST request-URI should be of a collection URI.</td></tr><tr><td>PUT method is idempotent. So if you send retry a request multiple times, that should be equivalent to single request modification.</td><td>POST is NOT idempotent. So if you retry the request N times, you will end up having N resources with N different URIs created on server.</td></tr><tr><td>Use PUT when you want to modify a singular resource which is already a part of resources collection. PUT replaces the resource in its entirety. Use PATCH if request updates part of the resource.</td><td>Use POST when you want to add a child resource under resources collection.</td></tr><tr><td>PUT is idempotent, so you can cache the response.</td><td>Responses to this method are not cacheable, unless the response includes appropriate Cache-Control or Expires header fields. However, the 303 (See Other) response can be used to direct the user agent to retrieve a cacheable resource.</td></tr><tr><td>Generally, in practice, always use PUT for UPDATE operations.</td><td>Always use POST for CREATE operations.</td></tr></tbody></table><p>PUT /questions/{question-id}</p><p>| The<code>POST</code>method is used to request that the origin server accept the entity enclosed in the request as a new subordinate of the resource identified by the Request-URI in the Request-Line. It essentially means that<code>POST</code>request-URI should be of a collection URI.</p><p>POST /questions</p><p>| | <code>PUT</code>method is<a href="https://restfulapi.net/idempotent-rest-apis/" target="_blank" rel="noopener">idempotent</a>. So if you send retry a request multiple times, that should be equivalent to single request modification. | <code>POST</code>is NOT idempotent. So if you retry the request N times, you will end up having N resources with N different URIs created on server. | | Use<code>PUT</code>when you want to modify a singular resource which is already a part of resources collection. PUT replaces the resource in its entirety. Use PATCH if request updates part of the resource. | Use<code>POST</code>when you want to add a child resource under resources collection. | | <code>PUT</code>is idempotent, so you can cache the response. | Responses to this method are not<a href="https://restfulapi.net/caching/" target="_blank" rel="noopener">cacheable</a>, unless the response includes appropriate Cache-Control or Expires header fields. However, the 303 (See Other) response can be used to direct the user agent to retrieve a cacheable resource. | | Generally, in practice, always use<code>PUT</code>for UPDATE operations. | Always use<code>POST</code>for CREATE operations. |</p><h2 id="PUT-vs-POST-An-Example"><a href="#PUT-vs-POST-An-Example" class="headerlink" title="PUT vs POST : An Example"></a>PUT vs POST : An Example</h2><p>Let’s say we are designing a network application. Let’s list down few URIs and their purpose to get better understanding when to use<code>POST</code>and when to use<code>PUT</code>operations.</p><p>GET /device-management/devices : Get all devices <strong>POST</strong> /device-management/devices : Create a new device</p><p>GET /device-management/devices/{id} : Get the device information identified by “id” <strong>PUT</strong> /device-management/devices/{id} : Update the device information identified by “id” DELETE /device-management/devices/{id} : Delete device by “id”</p><p>Follow the similar URI design practices for other resources as well.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Restful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OKHttpUtil</title>
      <link href="/posts/5275/"/>
      <url>/posts/5275/</url>
      
        <content type="html"><![CDATA[<h3 id="OKHttpUtil"><a href="#OKHttpUtil" class="headerlink" title="OKHttpUtil"></a>OKHttpUtil</h3><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdyun.weixin.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.HostnameVerifier;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSession;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.TrustManager;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.X509TrustManager;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.KeyManagementException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</span><br><span class="line"><span class="keyword">import</span> okhttp3.ConnectionPool;</span><br><span class="line"><span class="keyword">import</span> okhttp3.FormBody;</span><br><span class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Request;</span><br><span class="line"><span class="keyword">import</span> okhttp3.RequestBody;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Response;</span><br><span class="line"><span class="keyword">import</span> okhttp3.FormBody.Builder;</span><br><span class="line"><span class="keyword">import</span> okhttp3.MediaType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Description: 用okhttp进行get和post的访问</span></span><br><span class="line"><span class="comment">* Copyright: jdy groups 2019年1月29日</span></span><br><span class="line"><span class="comment">* Company: jdyun </span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> jdyun</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2018年1月29日</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OKHttpUtil</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> Logger logger=LoggerFactory.getLogger(OKHttpUtil.class); <span class="comment">//log</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> Logger interfaceLog = LoggerFactory.getLogger(<span class="string">"interfaceLog"</span>);<span class="comment">//interfaceLog</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient httpClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;client.backurl&#125;"</span>)</span><br><span class="line">    String backurl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;client.name&#125;"</span>)</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;client.secretkey&#125;"</span>)</span><br><span class="line">    String secretkey;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">               * 绕过验证 </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> KeyManagementException  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//获取这个SSLSocketFactory </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SSLSocketFactory <span class="title">getSSLSocketFactory</span><span class="params">()</span> </span>&#123; </span><br><span class="line">      <span class="keyword">try</span> &#123; </span><br><span class="line">        SSLContext sslContext = SSLContext.getInstance(<span class="string">"SSL"</span>); </span><br><span class="line">        sslContext.init(<span class="keyword">null</span>, getTrustManager(), <span class="keyword">new</span> SecureRandom()); </span><br><span class="line">        <span class="keyword">return</span> sslContext.getSocketFactory(); </span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e); </span><br><span class="line">      &#125; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//获取TrustManager </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TrustManager[] getTrustManager() &#123; </span><br><span class="line">      TrustManager[] trustAllCerts = <span class="keyword">new</span> TrustManager[]&#123; </span><br><span class="line">          <span class="keyword">new</span> X509TrustManager() &#123; </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> </span>&#123; </span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> </span>&#123; </span><br><span class="line">           &#125; </span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123; </span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[]&#123;&#125;; </span><br><span class="line">            &#125; </span><br><span class="line">          &#125; </span><br><span class="line">      &#125;; </span><br><span class="line">      <span class="keyword">return</span> trustAllCerts; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取HostnameVerifier </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HostnameVerifier <span class="title">getHostnameVerifier</span><span class="params">()</span> </span>&#123; </span><br><span class="line">      HostnameVerifier hostnameVerifier = <span class="keyword">new</span> HostnameVerifier() &#123; </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String s, SSLSession sslSession)</span> </span>&#123; </span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">        &#125; </span><br><span class="line">      &#125;; </span><br><span class="line">      <span class="keyword">return</span> hostnameVerifier; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OKHttpUtil</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(httpClient == <span class="keyword">null</span>)&#123;</span><br><span class="line">            ConnectionPool pool = <span class="keyword">new</span> ConnectionPool(<span class="number">5</span>, <span class="number">50</span>, TimeUnit.MINUTES);</span><br><span class="line">            <span class="comment">// 配置请求的超时设置  设置连接池属性 设置ssl绕过验证</span></span><br><span class="line">            httpClient = <span class="keyword">new</span> OkHttpClient.Builder() <span class="comment">//</span></span><br><span class="line">                    .connectTimeout(<span class="number">1</span>, TimeUnit.MINUTES) <span class="comment">//</span></span><br><span class="line">                    .followRedirects(<span class="keyword">true</span>) <span class="comment">//</span></span><br><span class="line">                    .readTimeout(<span class="number">1</span>, TimeUnit.MINUTES) <span class="comment">//</span></span><br><span class="line">                    .retryOnConnectionFailure(<span class="keyword">false</span>) <span class="comment">//</span></span><br><span class="line">                    .writeTimeout(<span class="number">3</span>, TimeUnit.MINUTES) <span class="comment">//</span></span><br><span class="line">                    .connectionPool(pool) <span class="comment">//</span></span><br><span class="line">                    .sslSocketFactory(getSSLSocketFactory())</span><br><span class="line">                    .hostnameVerifier(getHostnameVerifier())</span><br><span class="line">                    .build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">config</span><span class="params">(Request.Builder builder)</span> </span>&#123;  </span><br><span class="line">        builder.addHeader(<span class="string">"User-Agent"</span>, <span class="string">"Mozilla/5.0"</span>);  </span><br><span class="line">        builder.addHeader(<span class="string">"Accept"</span>,<span class="string">"text/html,application/xhtml+xml,application/xml,application/json;q=0.9,*/*;q=0.8"</span>);  </span><br><span class="line">        builder.addHeader(<span class="string">"Accept-Language"</span>, <span class="string">"zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3"</span>);<span class="comment">//"en-US,en;q=0.5");  </span></span><br><span class="line">        builder.addHeader(<span class="string">"Accept-Charset"</span>, <span class="string">"ISO-8859-1,utf-8,gbk,gb2312;q=0.7,*;q=0.7"</span>);  </span><br><span class="line">        builder.addHeader(<span class="string">"Connection"</span>, <span class="string">"close"</span>);</span><br><span class="line">        builder.addHeader(<span class="string">"secretkey"</span>, secretkey);</span><br><span class="line">        builder.addHeader(<span class="string">"name"</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *httpGet</span></span><br><span class="line"><span class="comment">     * Description:get请求 </span></span><br><span class="line"><span class="comment">     * Copyright: jdyun 2019年1月30日</span></span><br><span class="line"><span class="comment">     * Company:  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> jdyun-ceo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2019年1月30日 下午7:39:44</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strurl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">httpGet</span><span class="params">(Map paramurl,String url)</span> <span class="keyword">throws</span> MalformedURLException, UnsupportedEncodingException, NoSuchAlgorithmException</span>&#123;</span><br><span class="line">        String strUrl=backurl+url;</span><br><span class="line">        String addres = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry entry : paramurl.entrySet()) &#123; </span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">                addres += <span class="string">"?"</span>+entry.getKey() +<span class="string">"="</span>+entry.getValue();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                addres += <span class="string">"&amp;"</span>+entry.getKey() +<span class="string">"="</span>+entry.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        strUrl += addres;</span><br><span class="line">        URL u=<span class="keyword">new</span> URL(strUrl);</span><br><span class="line"></span><br><span class="line">        Request.Builder builder =<span class="keyword">new</span> Request.Builder();</span><br><span class="line">        config(builder);</span><br><span class="line"></span><br><span class="line">        String rtn=<span class="string">"&#123;\"status\":\"fail\"&#125;"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Request request = builder.url(u).get()</span><br><span class="line">                    .build();</span><br><span class="line">            Response response = httpClient.newCall(request).execute();</span><br><span class="line">            <span class="keyword">if</span>(response.isSuccessful())&#123;</span><br><span class="line">                rtn = response.body().string();</span><br><span class="line">                interfaceLog.info(<span class="string">"系统"</span>+url+<span class="string">"接口result===============&gt;&gt;"</span>+rtn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"系统"</span>+url+<span class="string">"error===============&gt;&gt;"</span>+e);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rtn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">    * httpPost</span></span><br><span class="line"><span class="comment">    * Description: post提交表单</span></span><br><span class="line"><span class="comment">    * Copyright:  2018年1月30日</span></span><br><span class="line"><span class="comment">    * Company:  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> email:bleach.song@.cn</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@date</span> 2018年1月30日 下午7:39:29</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> strurl</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">httpPost</span><span class="params">(Map map,String strurl)</span> </span>&#123;  </span><br><span class="line">        <span class="comment">// 获取配置文件验证参数</span></span><br><span class="line">        strurl=backurl+strurl;</span><br><span class="line">        String result = <span class="keyword">null</span>;  </span><br><span class="line">        Request.Builder builder =<span class="keyword">new</span> Request.Builder();</span><br><span class="line">        config(builder);</span><br><span class="line"></span><br><span class="line">        Builder body = <span class="keyword">new</span> FormBody.Builder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry entry : map.entrySet()) &#123;  </span><br><span class="line">            body.add(entry.getKey(), entry.getValue()==<span class="keyword">null</span>?<span class="string">""</span>:entry.getValue().toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FormBody formbody = body.build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Request request = builder.url(strurl).post(formbody)</span><br><span class="line">                    .build();</span><br><span class="line">            Response response = httpClient.newCall(request).execute();</span><br><span class="line">            <span class="keyword">if</span>(response.isSuccessful())&#123;</span><br><span class="line">                result = response.body().string();</span><br><span class="line">                interfaceLog.info(<span class="string">"系统"</span>+strurl+<span class="string">"接口result===============&gt;&gt;"</span>+result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">    * httpGetForWechat</span></span><br><span class="line"><span class="comment">    * Description:微信用 </span></span><br><span class="line"><span class="comment">    * Copyright:  2018年8月29日</span></span><br><span class="line"><span class="comment">    * Company:  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> jdyun</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@date</span> 2019年8月29日 下午3:56:02</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> paramurl</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> MalformedURLException</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">httpGetForJSTicket</span><span class="params">(String paramurl,String url)</span> <span class="keyword">throws</span> MalformedURLException, UnsupportedEncodingException, NoSuchAlgorithmException</span>&#123;</span><br><span class="line">        url += paramurl;</span><br><span class="line">        URL u=<span class="keyword">new</span> URL(url);</span><br><span class="line">        Request.Builder builder =<span class="keyword">new</span> Request.Builder();</span><br><span class="line">        config(builder);</span><br><span class="line"></span><br><span class="line">        String rtn=<span class="string">"&#123;\"status\":\"fail\"&#125;"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Request request = builder.url(u).get()</span><br><span class="line">                    .build();</span><br><span class="line">            Response response = httpClient.newCall(request).execute();</span><br><span class="line">            <span class="keyword">if</span>(response.isSuccessful())&#123;</span><br><span class="line">                rtn = response.body().string();</span><br><span class="line">                interfaceLog.info(<span class="string">"httpGetForJSTicketrtn===============&gt;&gt;"</span>+rtn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"httpGetForJSTicketerror===============&gt;&gt;"</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rtn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">httpGetWebtoken</span><span class="params">(String paramurl,String url)</span> <span class="keyword">throws</span> MalformedURLException, UnsupportedEncodingException, NoSuchAlgorithmException</span>&#123;</span><br><span class="line">        url += paramurl;</span><br><span class="line">        URL u=<span class="keyword">new</span> URL(url);</span><br><span class="line">        Request.Builder builder =<span class="keyword">new</span> Request.Builder();</span><br><span class="line">        config(builder);</span><br><span class="line"></span><br><span class="line">        String rtn=<span class="string">"&#123;\"status\":\"fail\"&#125;"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Request request = builder.url(u).get().build();</span><br><span class="line">            Response response = httpClient.newCall(request).execute();</span><br><span class="line">            Boolean para = response.isSuccessful();</span><br><span class="line">            interfaceLog.info(<span class="string">"para===============&gt;&gt;"</span>+para);</span><br><span class="line">            <span class="keyword">if</span>(para)&#123;</span><br><span class="line">                rtn = response.body().string();</span><br><span class="line">                interfaceLog.info(<span class="string">"httpGetWebtokenrtn===============&gt;&gt;"</span>+rtn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"httpGetWebtokenerror===============&gt;&gt;"</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rtn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">    * gettoken</span></span><br><span class="line"><span class="comment">    * Copyright:  2018年9月12日</span></span><br><span class="line"><span class="comment">    * Company:  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> jdyun</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@date</span> 2018年9月12日 上午10:48:23</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> MalformedURLException</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">gettoken</span><span class="params">(String url)</span> <span class="keyword">throws</span> MalformedURLException, UnsupportedEncodingException, NoSuchAlgorithmException</span>&#123;</span><br><span class="line">        URL u=<span class="keyword">new</span> URL(url);</span><br><span class="line">        Request.Builder builder =<span class="keyword">new</span> Request.Builder();</span><br><span class="line">        config(builder);</span><br><span class="line"></span><br><span class="line">        String rtn=<span class="string">"&#123;\"status\":\"fail\"&#125;"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Request request = builder.url(u).get()</span><br><span class="line">                    .build();</span><br><span class="line">            Response response = httpClient.newCall(request).execute();</span><br><span class="line">            <span class="keyword">if</span>(response.isSuccessful())&#123;</span><br><span class="line">                rtn = response.body().string();</span><br><span class="line">                interfaceLog.info(<span class="string">"本地token===============&gt;&gt;"</span>+rtn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"gettokenerror===============&gt;&gt;"</span>+e);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rtn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvisualvm 工具使用</title>
      <link href="/posts/950d/"/>
      <url>/posts/950d/</url>
      
        <content type="html"><![CDATA[<p>VisualVM 是Netbeans的profile子项目，已在JDK6.0 update 7 中自带(java启动时不需要特定参数，监控工具在bin/jvisualvm.exe)。</p><a id="more"></a><h2 id="https-visualvm-dev-java-net"><a href="#https-visualvm-dev-java-net" class="headerlink" title="https://visualvm.dev.java.net/"></a><a href="https://visualvm.dev.java.net/" target="_blank" rel="noopener">https://visualvm.dev.java.net/</a></h2><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>VisualVM，能够监控线程，内存情况，查看方法的CPU时间和内存中的对 象，已被GC的对象，反向查看分配的堆栈(如100个String对象分别由哪几个对象分配出来的).</p><p>从界面上看还是比较简洁的，左边是树形结构，自动显示当前本机所运行的Java程序，还可以添加远程的Java VM，其中括号里面的PID指的是进程ID。OverView界面显示VM启动参数以及该VM对应的一些属性。Monitor界面则是监控Java堆大小，Permgen大小，Classes和线程数量。jdk不同版本中界面会不太一致，如有的含cpu监控，有的则不含（jdk1.6.0_10未包含）。</p><p>官网上关于jvisualvm的用法介绍</p><p><a href="http://docs.oracle.com/javase/6/docs/technotes/tools/share/jvisualvm.html" target="_blank" rel="noopener">http://docs.oracle.com/javase/6/docs/technotes/tools/share/jvisualvm.html</a></p><p>作用：JVM和监控的应用程序运行在不同的服务器上，减轻应用程序的负担，特别是HeapDump的时候，应用常能够续负担很大。</p><p>VisualVM使用简单，几乎0配置，功能还是比较丰富的，几乎囊括了其它JDK自带命令的所有功能。</p><ul><li>内存信息</li><li>线程信息</li><li>Dump堆（本地进程）</li><li>Dump线程（本地进程）</li><li>打开堆Dump。堆Dump可以用jmap来生成。</li><li>打开线程Dump</li><li>生成应用快照（包含内存信息、线程信息等等）</li><li>性能分析。 :idea: CPU分析（各个方法调用时间，检查哪些方法耗时多），内存分析（各类对象占用的内存，检查哪些类占用内存多）</li><li>……</li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>本地监控不需要配置，只要打开某个JAVA程序就会自动的加入到本地监控中。</p><p>远程监控： 本机的VisualVM就必须和远程的JVM要进行通信, Visualvm目前支持两种remote connection方式，分别是jstatd和JMX方式。</p><p>远程监控某个中间件时，需要修改中间件的启动文件，添加上关于jmx等的信息。</p><p>1、远程监控tomcat，jmx方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">服务器 上的 tomcat 配置 jvm 启动参数。</span><br><span class="line">在 tomcat 的 catalina.bat 中添 加如下参数: </span><br><span class="line">JAVA_OPTS=&quot;$JAVA_OPTS -Djava.rmi.server.hostname=192.168.0.237    </span><br><span class="line">                      -Dcom.sun.management.jmxremote.port=18999</span><br><span class="line">                      -Dcom.sun.management.jmxremote.ssl=false </span><br><span class="line">                      -Dcom.sun.management.jmxremote.authenticate=false&quot;</span><br><span class="line"></span><br><span class="line">上述参数未设用户名与密码登录。</span><br><span class="line">  客户端VisualVM配置 (我客户端用的是WinXP).</span><br><span class="line">     a.直接反键点击Remote，选择Add Remote Host...</span><br><span class="line">     b.在弹出的界面中输入远程机器的IP地址(192.168.0.237)，这个IP地址会加入到Remote节点下.</span><br><span class="line">     c.反键点击这个IP地址，选择Add JMX Connection, 在弹出的界面中输入刚配置的端口号(18999), 这个连接会加入到该IP节点下.</span><br><span class="line">     d.反键点击这个连接，选择Open.</span><br></pre></td></tr></table></figure><p>此处参数设置与jconsole工具远程监控tomcat相同。</p><p>2、监视websphere服务器JVM的配置</p><p><a href="http://xjsunjie.blog.51cto.com/999372/1331880" target="_blank" rel="noopener">http://xjsunjie.blog.51cto.com/999372/1331880</a></p><p><a href="http://www.cnblogs.com/sideny/p/3517814.html" target="_blank" rel="noopener">jconsole &amp; jvisualvm远程监视websphere服务器JVM的配置案</a></p><p>在启动文件里配置。</p><p>3、jstatd 配置。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p><a href="http://zhouanya.blog.51cto.com/4944792/1370017" target="_blank" rel="noopener">http://zhouanya.blog.51cto.com/4944792/1370017</a></p><p><strong>visualVM 插件</strong></p><p><a href="https://github.com/irockel/tda" target="_blank" rel="noopener">https://github.com/irockel/tda</a></p><p>visualVM还可通过扩展增加功能。启动页面时有“<a href="https://visualvm.github.io/plugins.html" target="_blank" rel="noopener">visualVM 扩展入门指南</a>”，如果需要哪些插件可看下这里的介绍。</p><p>在“工具”-》“插件”-》可用插件项中列出。</p><p><img src="https://images2017.cnblogs.com/blog/430613/201712/430613-20171222122710975-1342520301.png" alt><img src="https://images2017.cnblogs.com/blog/430613/201712/430613-20171222122710975-1342520301.png" alt></p><p>除这些可用插件外，还可以增加第三方的插件扩展功能。</p><p>Third Party Plugins:</p><p><strong>BTrace Plugin:</strong> support for creating, deploying and saving BTrace scripts directly from the VisualVM. <a href="https://github.com/btraceio/btrace" target="_blank" rel="noopener">Home »</a></p><p><strong>Coherence Plugin:</strong> summarized statistics and information for a JMX enabled Coherence cluster. <a href="http://coherence-community.github.io/coherence-incubator/12.1.0/jvisualvm/index.html" target="_blank" rel="noopener">Home »</a></p><p><strong>CRaSH Plugin:</strong> support for the CRaSH open source shell for the Java Platform in VisualVM. <a href="https://github.com/crashub/visualvm" target="_blank" rel="noopener">Home »</a></p><p><strong>OSGi Plugin:</strong> basic management of OSGi platforms via JMX. <a href="http://wiki.chameleon.ow2.org/xwiki/bin/view/Main/AdminTools" target="_blank" rel="noopener">Home »</a></p><p><strong>TDA Plugin:</strong> Thread Dump Analyzer is a GUI for analyzing thread dumps generated by the Java VM. <a href="https://github.com/irockel/tda" target="_blank" rel="noopener">Home »</a></p><p>其他插件里：</p><p><strong>Buffer Monitor:</strong> monitoring usage of direct buffers created by <code>ByteBuffer.allocateDirect</code> and mapped buffers created by <code>FileChannel.map</code>.</p><p>Buffer Pools和MBeans Browser可以通过GUI的方式查看DirectMemory的即时使用情况。</p><p>如果是JDK 7及以上版本，可以用jconsole或者jvisualvm的MBean窗口查看java.nio.BufferPool.direct属性。参考：<a href="https://www.zhihu.com/question/55033583" target="_blank" rel="noopener">https://www.zhihu.com/question/55033583</a></p><h1 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h1><h2 id="1、插件“Visual-GC”使用。"><a href="#1、插件“Visual-GC”使用。" class="headerlink" title="1、插件“Visual GC”使用。"></a>1、插件“Visual GC”使用。</h2><p>转自：<a href="http://supercharles888.blog.51cto.com/609344/1179790" target="_blank" rel="noopener">http://supercharles888.blog.51cto.com/609344/1179790</a></p><p>安装 ”Visual GC”插件:</p><p>这个插件是jvisualvm的插件，它非常强大，可以动态的对指定的进程进行监控，并且来通过统计面板来分类显示出各项任务/事件的总时间开销：</p><p>安装方法： Tool-&gt;Plugin-&gt;Available Plugins:</p><p><img src="https://images0.cnblogs.com/blog/430613/201412/022120335144773.png" alt><img src="https://images0.cnblogs.com/blog/430613/201412/022120335144773.png" alt></p><p>重启Visual VM 之后，就可以看到这个”Visual GC”已经被正确的显示了。</p><p><strong>实战： 用Visual VM和Visual GC来优化我们的Eclipse启动：</strong></p><p>首先，我们启动eclipse:</p><p>在ps -ef|grep eclipse（windows则是任务管理器）中，我们可以从看到这个进程id为32561</p><p>我们从Visual VM中找到对应的process id:</p><p><img src="https://images0.cnblogs.com/blog/430613/201412/022128212336982.png" alt><img src="https://images0.cnblogs.com/blog/430613/201412/022128212336982.png" alt></p><p>我们切换到 “Visual GC”标签页，它会显示启动eclipse的所有测量数据：</p><p><img src="https://images0.cnblogs.com/blog/430613/201412/022128423589095.png" alt><img src="https://images0.cnblogs.com/blog/430613/201412/022128423589095.png" alt></p><p>分析：</p><p>从上图中我们可以很明显的看出来，主要的时间开销在以下2方面：</p><p>(1)编译时间有点长，用了3.794秒，这个时间主要是用来校验eclipse平台本身的字节码了，所以我们需要关闭字节码校验，让启动时候不会去校验平台本身（也是java写的）的字节码，为了达到这个目的，我们只需要在eclipse启动参数中加上-Xverify:none</p><p>如下所示，因为我们用的是Spring Source Tool Suite,所以我们在STS.ini中增加这一行。</p><p><img src="https://images0.cnblogs.com/blog/430613/201412/022129346864342.png" alt><img src="https://images0.cnblogs.com/blog/430613/201412/022129346864342.png" alt></p><p><img src="https://images0.cnblogs.com/blog/430613/201412/022129483114746.png" alt><img src="https://images0.cnblogs.com/blog/430613/201412/022129483114746.png" alt></p><p>(2)另外一个大问题就是类加载时间，它有2部分组成，因为类有2部分组成，一是eclipse平台自带的类，二是它所使用的插件的类文件，我们可以在eclipse启动的时候关闭不必要的插件加载来减少类加载时间，方法是Preference-&gt;General-&gt;Startup and Shutdown</p><p><img src="https://images0.cnblogs.com/blog/430613/201412/022130152955868.png" alt><img src="https://images0.cnblogs.com/blog/430613/201412/022130152955868.png" alt></p><p>校验结果：</p><p>现在我们把eclipse关闭并且重新打开，这会启动一个新的进程，id为32696,我们把这次Visual GC的测量图和原来的进行比较：</p><p><img src="https://images0.cnblogs.com/blog/430613/201412/022130429057334.png" alt><img src="https://images0.cnblogs.com/blog/430613/201412/022130429057334.png" alt></p><p>从这里可以看出来，时间被明显的缩短了，编译时间从3.794秒缩短到2.155秒，提升百分比为43.1%。而类加载时间从18.424秒缩短到10.208秒，提升百分比为44.6%。</p><p>额外步骤：</p><p>对于一些其他的启动参数，比如初始内存，最大内存，Gem,Perm的参数。</p><p><strong>2、将堆dump的文件，使用其进行查看。</strong></p><p>1）堆dump文件。</p><p><img src="https://images0.cnblogs.com/i/430613/201403/301044399697231.jpg" alt><img src="https://images0.cnblogs.com/i/430613/201403/301044399697231.jpg" alt></p><p>2）将dump文件传至jvisualvm本机，点击”文件“-》”装入“，选择第一步生成的dump文件。</p><p>a.摘要标签</p><p><img src="https://images0.cnblogs.com/i/430613/201403/301047340786772.jpg" alt><img src="https://images0.cnblogs.com/i/430613/201403/301047340786772.jpg" alt></p><p>可查看dump的各项信息。</p><p>文件-&gt;装入-&gt;堆Dump－&gt;<strong>检查</strong> -&gt; <strong>查找20保留大小最大的对象</strong>，就会触发保留大小的计算，然后就可以类视图里浏览，按保留大小排序了。</p><p>对象的大小有两种统计方式：</p><ul><li>本身大小(Shallow Size)：对象本来的大小。</li><li>保留大小(Retained Size)： 当前对象大小 + 当前对象直接或间接引用到的对象的大小总和。</li></ul><p>看本身大小时，占大头的都是char[] ,byte[]之类的，没什么意思（用jmap -histo:live pid 看的也是本身大小）。所以需要关心的是保留大小比较大的对象，看谁在引用这些char[], byte[]。</p><p>b.类 标签</p><p><img src="https://images0.cnblogs.com/i/430613/201403/301051182507920.jpg" alt><img src="https://images0.cnblogs.com/i/430613/201403/301051182507920.jpg" alt></p><p>双击某个类，点击实例视图。</p><p>c.实例试图</p><h1 id="远程监控内存泄露、解决内存溢出问题"><a href="#远程监控内存泄露、解决内存溢出问题" class="headerlink" title="远程监控内存泄露、解决内存溢出问题"></a>远程监控内存泄露、解决内存溢出问题</h1><p>1)内存泄露、溢出的异同</p><p>同：都会导致应用程序运行出现问题，性能下降或挂起。</p><p>异：</p><p>v内存泄露是导致内存溢出的原因之一；内存泄露积累起来将导致内存溢出。</p><p>v内存泄露可以通过完善代码来避免；内存溢出可以通过调整配置来减少发生频率，但无法彻底避免。</p><p>2)监测内存泄漏</p><p>·内存泄漏是指程序中间动态分配了内存，但在程序结束时没有释放这部分内存，从而造成那部分内存不可用的情况，重启计算机可以解决，但也有可能再次发生内存泄露，内存泄露和硬件没有关系，它是由软件设计缺陷引起的。</p><p>·内存泄漏可以分为4类：</p><p>a. 常发性内存泄漏。发生内存泄漏的代码会被多次执行到，每次被执行的时候都会导致一块内存泄漏。</p><p>b.偶发性内存泄漏。发生内存泄漏的代码只有在某些特定环境或操作过程下才会发生。常发性和偶发性是相对的。对于特定的环境，偶发性的也许就变成了常发性的。所以测试环境和测试方法对检测内存泄漏至关重要。</p><p>c.一次性内存泄漏。发生内存泄漏的代码只会被执行一次，或者由于算法上的缺陷，导致总会有一块仅且一块内存发生泄漏。比如，在类的构造函数中分配内存，在析构函数中却没有释放该内存，所以内存泄漏只会发生一次。</p><p>d.隐式内存泄漏。程序在运行过程中不停的分配内存，但是直到结束的时候才释放内存。严格的说这里并没有发生内存泄漏，因为最终程序释放了所有申请的内存。但是对于一个服务器程序，需要运行几天，几周甚至几个月，不及时释放内存也可能导致最终耗尽系统的所有内存。所以，我们称这类内存泄漏为隐式内存泄漏。</p><p>3)Heap dump 分析</p><p>每隔一段时间给所检测的java应用做一次heap dump：</p><p><a href="http://s3.51cto.com/wyfs02/M01/22/4A/wKiom1MZtKTTJ5K3AABJbkv4_d4875.jpg" target="_blank" rel="noopener"><img src="http://s3.51cto.com/wyfs02/M01/22/4A/wKiom1MZtKTTJ5K3AABJbkv4_d4875.jpg &quot;图片7.jp" alt="wKiom1MZtKTTJ5K3AABJbkv4_d4875.jpg"></a></p><p>（或者在响应应用pid上鼠标右键heap dump）弹出以下提示框：</p><p><a href="http://s3.51cto.com/wyfs02/M00/22/4B/wKioL1MZtKaiSdicAAB6rwX6AqE541.jpg" target="_blank" rel="noopener"><img src="http://s3.51cto.com/wyfs02/M00/22/4B/wKioL1MZtKaiSdicAAB6rwX6AqE541.jpg &quot;图片8.jpg" alt="wKioL1MZtKaiSdicAAB6rwX6AqE541.jpg"></a></p><p>在应用服务器将此文件下载到jvisual vm所在的机器上，file–load打开此文件，如下面三图所示：</p><p><a href="http://s3.51cto.com/wyfs02/M02/22/4A/wKiom1MZtSiQgvHBAAF6Dw_4JBI844.jpg" target="_blank" rel="noopener"><img src="http://s3.51cto.com/wyfs02/M02/22/4A/wKiom1MZtSiQgvHBAAF6Dw_4JBI844.jpg &quot;图片11.jp" alt="wKiom1MZtSiQgvHBAAF6Dw_4JBI844.jpg"></a></p><p><a href="http://s3.51cto.com/wyfs02/M01/22/4B/wKioL1MZtQLDKyaOAAO9bvzBju0083.jpg" target="_blank" rel="noopener"><img src="http://s3.51cto.com/wyfs02/M01/22/4B/wKioL1MZtQLDKyaOAAO9bvzBju0083.jpg &quot;图片9.jpg" alt="wKioL1MZtQLDKyaOAAO9bvzBju0083.jpg"></a></p><p><a href="http://s3.51cto.com/wyfs02/M00/22/4A/wKiom1MZtSixQ5WVAAGs96BTilg611.jpg" target="_blank" rel="noopener"><img src="http://s3.51cto.com/wyfs02/M00/22/4A/wKiom1MZtSixQ5WVAAGs96BTilg611.jpg &quot;图片10.jpg" alt="wKiom1MZtSixQ5WVAAGs96BTilg611.jpg"></a></p><p>对比上面三个截图，发现似乎有个东西在急速飙升，仔细一看是这个对象：org.eclipse.swt.graphics.Image 在第一章图中这个还没排的上，第二次dump已经上升到5181个，第三次就是7845个了。涨速相当快，而且和任务管理器里面看到的GDI数量增涨一致，就是它了。</p><p>问题到这儿就比较清楚了，回到代码里面仔细一看可以发现，是某个地方反复的用图片来创建Image对象导致的，改掉以后搞定问题。</p><p>到这里其实我想说的是，Java使用起来其实要比C++更容易导致内存泄漏。对于C++来说，每一个申请的对象都必须明确释放，任何没有释放的对象都会导致memleak，这是不可饶恕的，而且这类问题已经有很多工具和方法来解决。但是到了Java里面情况就不同了，对于Java程序员来说对象都是不需要也无法主动销毁的，所以一般的思路是：随用随new，用完即丢。很多对象具体的生命周期可能连写代码的人自己也不清楚，或者不需要清楚，只知道某个时刻垃圾收集器会去做的，不用管。但很可能某个对象在“用完即丢”的时候在另一个不容易发现的地方被保存了一个引用，那么这个对象就永远不会被回收。更加糟糕的是整个程序从设计之初就没有考虑过对象回收的问题，对于C++程序员来说memleak必然是一个设计错误，但是对Java程序员来说这只是一个疏忽，而且似乎没有什么好的办法来避免。今天看到的这个问题是因为GDI泄漏会造成严重后果才被重视，但如果仅仅是造成内存泄漏，那这个程序可能得连续跑上个十天半个月才会发现问题。最后就是，对于c++，错误的代码在测试阶段就可以快速的侦测出哪怕一个byte的memleak并加以改正，但是对于java程序，理论上没有哪个工具能够知道是不是有泄漏，因为除了作者自己以外没有人能够知道一个被引用的对象是不是应该被销毁，只有通过大量的，长期的压力测试才能发现问题，这是很危险的一件事情。</p><p>4)解决内存溢出问题</p><p>1、java.lang.OutOfMemoryError: PermGen space</p><p>JVM管理两种类型的内存，堆和非堆。堆是在JVM启动时创建；非堆是留给JVM自己用的，用来存放类的信息的。它和堆不同，运行期内GC不会释放空间。如果web app用了大量的第三方jar或者应用有太多的class文件而恰好MaxPermSize设置较小，超出了也会导致这块内存的占用过多造成溢出，或者tomcat热部署时侯不会清理前面加载的环境，只会将context更改为新部署的，非堆存的内容就会越来越多。</p><p>PermGen space的全称是Permanent Generation space，是指内存的永久保存区域，这块内存主要是被JVM存放Class和Meta信息的，Class在被Loader时就会被放到PermGen space中，它和存放类实例(Instance)的Heap区域不同，GC(Garbage Collection)不会在主程序运行期对PermGen space进行清理，所以如果你的应用中有很CLASS的话，就很可能出现PermGen space错误，这种错误常见在web服务器对JSP进行pre compile的时候。如果你的WEB APP下都用了大量的第三方jar, 其大小超过了jvm默认的大小(4M)那么就会产生此错误信息了。</p><p><a href="http://s3.51cto.com/wyfs02/M01/22/4B/wKioL1MZtlHREhrhAAMFKXoTEMw761.jpg" target="_blank" rel="noopener"><img src="http://s3.51cto.com/wyfs02/M01/22/4B/wKioL1MZtlHREhrhAAMFKXoTEMw761.jpg &quot;图片13.jpg" alt="wKioL1MZtlHREhrhAAMFKXoTEMw761.jpg"></a></p><p>如上图所示，PermGen在程序运行一段时间后超出了我们指定的128MB，通过Classes视图看到，Java在运行的同时加载了大量的类到内存中。PermGen会存储Jar或者Class的描述信息；所以在class大量增加的同时PermGen超出了我们指定的范围。为了让应用稳定，我们需要探寻新的PermGen范围。检测时段时候后（如下图）发现PermGen在145MB左右稳定，那么我们就得到了稳定的新参数；这样PermGen内存溢出的问题得到解决。</p><p><a href="http://s3.51cto.com/wyfs02/M01/22/4A/wKiom1MZtrWRVGIQAAMV1WiIwr0717.jpg" target="_blank" rel="noopener"><img src="http://s3.51cto.com/wyfs02/M01/22/4A/wKiom1MZtrWRVGIQAAMV1WiIwr0717.jpg &quot;图片12.jpg" alt="wKiom1MZtrWRVGIQAAMV1WiIwr0717.jpg"></a></p><p>2、java.lang.OutOfMemoryError: Java heap space</p><p>第一种情况是个补充，主要存在问题就是出现在这个情况中。其默认空间(即-Xms)是物理内存的1/64，最大空间(-Xmx)是物理内存的1/4。如果内存剩余不到40％，JVM就会增大堆到Xmx设置的值，内存剩余超过70％，JVM就会减小堆到Xms设置的值。所以服务器的Xmx和Xms设置一般应该设置相同避免每次GC后都要调整虚拟机堆的大小。假设物理内存无限大，那么JVM内存的最大值跟操作系统有关，一般32位机是1.5g到3g之间，而64位的就不会有限制了。</p><p>注意：如果Xms超过了Xmx值，或者堆最大值和非堆最大值的总和超过了物理内存或者操作系统的最大限制都会引起服务器启动不起来。</p><p>垃圾回收GC的角色，JVM调用GC的频度还是很高的，主要两种情况下进行垃圾回收：</p><p>一个是当应用程序线程空闲；另一个是java内存堆不足时，会不断调用GC，若连续回收都解决不了内存堆不足的问题时，就会报out of memory错误。因为这个异常根据系统运行环境决定，所以无法预期它何时出现。</p><p>根据GC的机制，程序的运行会引起系统运行环境的变化，增加GC的触发机会。</p><p>为了避免这些问题，程序的设计和编写就应避免垃圾对象的内存占用和GC的开销。显示调用System.GC()只能建议JVM需要在内存中对垃圾对象进行回收，但不是必须马上回收。一个是并不能解决内存资源耗空的局面，另外也会增加GC的消耗。</p><p><a href="http://s3.51cto.com/wyfs02/M01/22/4A/wKiom1MZuOfBZE4hAAJS5vcnocE082.jpg" target="_blank" rel="noopener"><img src="http://s3.51cto.com/wyfs02/M01/22/4A/wKiom1MZuOfBZE4hAAJS5vcnocE082.jpg &quot;图片14.jpg" alt="wKiom1MZuOfBZE4hAAJS5vcnocE082.jpg"></a></p><h2 id="如何避免内存泄漏、溢出"><a href="#如何避免内存泄漏、溢出" class="headerlink" title="如何避免内存泄漏、溢出"></a>如何避免内存泄漏、溢出</h2><p>1)尽早释放无用对象的引用。</p><p>好的办法是使用临时变量的时候，让引用变量在退出活动域后自动设置为null，暗示垃圾收集器来收集该对象，防止发生内存泄露。</p><ol start="3"><li>程序进行字符串处理时，尽量避免使用String，而应使用StringBuffer。</li></ol><p>因为每一个String对象都会独立占用内存一块区域，如：</p><p>1.String str = “aaa”;</p><p>2.String str2 = “bbb”;</p><p>3.String str3 = str + str2;</p><p>4.// 假如执行此次之后str , str2再不被调用，那么它们就会在内存中等待GC回收；</p><p>5.// 假如程序中存在过多的类似情况就会出现内存错误；</p><ol start="4"><li>尽量少用静态变量。</li></ol><p>因为静态变量是全局的，GC不会回收。</p><ol start="5"><li>避免集中创建对象尤其是大对象，如果可以的话尽量使用流操作。</li></ol><p>JVM会突然需要大量内存，这时会触发GC优化系统内存环境； 一个案例如下：</p><p>1.// 使用jspsmartUpload作文件上传，运行过程中经常出现java.outofMemoryError的错误，</p><p>2.// 检查之后发现问题：组件里的代码</p><p>3.m_totalBytes = m_request.getContentLength();</p><p>4.m_binArray = new byte[m_totalBytes];</p><p>5.// totalBytes这个变量得到的数极大，导致该数组分配了很多内存空间，而且该数组不能及时释放。</p><p>6.// 解决办法只能换一种更合适的办法，至少是不会引发outofMemoryError的方式解决。</p><p>7.// 参考：<a href="http://bbs.xml.org.cn/blog/more.asp?name=hongrui&amp;id=3747" target="_blank" rel="noopener">http://bbs.xml.org.cn/blog/more.asp?name=hongrui&amp;id=3747</a></p><ol start="6"><li>尽量运用对象池技术以提高系统性能。</li></ol><p>生命周期长的对象拥有生命周期短的对象时容易引发内存泄漏，例如大集合对象拥有大数据量的业务对象的时候，可以考虑分块进行处理，然后解决一块释放一块的策略。</p><ol start="7"><li>不要在经常调用的方法中创建对象，尤其是忌讳在循环中创建对象。</li></ol><p>可以适当的使用hashtable，vector 创建一组对象容器，然后从容器中去取那些对象，而不用每次new之后又丢弃。</p><ol start="8"><li>优化配置。</li></ol><p>a.设置-Xms、-Xmx相等；</p><p>b.设置NewSize、MaxNewSize相等；</p><p>c.设置Heap size, PermGen space:</p><h1 id="使用过程中遇到的一些问题与疑问"><a href="#使用过程中遇到的一些问题与疑问" class="headerlink" title="使用过程中遇到的一些问题与疑问"></a>使用过程中遇到的一些问题与疑问</h1><p>问题1：从服务器dump堆内存后文件比较大（3.5G左右），加载文件、查看实例对象都很慢，还提示配置xmx大小。在windows上如何配置xmx大小？</p><p>表明给VisualVM分配的堆内存不够，找到${visualvm}/etc/visualvm.conf （如：C:\Program Files\Java\jdk1.6.0_10\lib\visualvm\etc）这个文件，修改</p><p>default_options=”-J-Xms24m -J-Xmx192m“</p><p>为</p><p>default_options=”-J-Xms24m -J-Xmx1024m”（</p><p>再重启VisualVM就行了。</p><p>对于“堆 dump”来说，在远程监控jvm的时候，VisualVM是没有这个功能的，只有本地监控的时候才有。另外，就算是本地监控，它在dump和得到实例的 速度那是相当的慢的。所以鉴于这几个原因，不建议用VisualVM，而是用jmap加上Mat来分析内存情况。</p><p>问题2：</p><p>参考资料：</p><p>1、<a href="http://www.kankanews.com/ICkengine/archives/106440.shtml" target="_blank" rel="noopener">http://www.kankanews.com/ICkengine/archives/106440.shtml</a></p><p>2、<a href="http://freewind.me/blog/20111023/479.html" target="_blank" rel="noopener">http://freewind.me/blog/20111023/479.html</a></p><p>3、<a href="http://supercharles888.blog.51cto.com/609344/1179790" target="_blank" rel="noopener">http://supercharles888.blog.51cto.com/609344/1179790</a></p><p>4、<a href="http://zhouanya.blog.51cto.com/4944792/1370017" target="_blank" rel="noopener">http://zhouanya.blog.51cto.com/4944792/1370017</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK升级</title>
      <link href="/posts/d721/"/>
      <url>/posts/d721/</url>
      
        <content type="html"><![CDATA[<h3 id="修改pom-xml"><a href="#修改pom-xml" class="headerlink" title="修改pom.xml"></a>修改pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">     &lt;project.build.jdk&gt;1.8&lt;/project.build.jdk&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.1&lt;/version&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">                &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">                &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">         &lt;/plugin&gt;</span><br><span class="line">     &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><h3 id="修改Project-Structure"><a href="#修改Project-Structure" class="headerlink" title="修改Project Structure"></a>修改Project Structure</h3><p><img src="https://i.loli.net/2019/03/20/5c91b320a31a7.png" alt="5c91b320a31a7"></p><h3 id="修改idea-tomcat-jdk"><a href="#修改idea-tomcat-jdk" class="headerlink" title="修改idea tomcat jdk"></a>修改idea tomcat jdk</h3><p><img src="https://i.loli.net/2019/03/26/5c9988deada8b.png" alt="5c9988deada8b"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
            <tag> Java </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java字符串拼接效率比较</title>
      <link href="/posts/3e2c/"/>
      <url>/posts/3e2c/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串拼接的三种方法"><a href="#字符串拼接的三种方法" class="headerlink" title="字符串拼接的三种方法"></a>字符串拼接的三种方法</h2><ol start="2"><li><p>加号</p></li><li><p>concat方法</p></li><li><p>StringBuilder（或StringBuffer）的append方法</p></li></ol><p>程序例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"a"</span>;</span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line">            str += <span class="string">"c"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"加号所花费的时间："</span>);</span><br><span class="line">        System.out.println(System.currentTimeMillis()-time);</span><br><span class="line">        String str2 = <span class="string">"a"</span>;</span><br><span class="line">        time = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line">            str2.concat(<span class="string">"c"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"cancat方法所花费的时间："</span>);</span><br><span class="line">        System.out.println(System.currentTimeMillis()-time);</span><br><span class="line">        time = System.currentTimeMillis();</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder(<span class="string">"a"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line">            stringBuilder.append(<span class="string">"c"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String str3 = stringBuilder.toString();</span><br><span class="line">        System.out.println(<span class="string">"StringBuilder的append方法："</span>);</span><br><span class="line">        System.out.println(System.currentTimeMillis()-time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序输出</p><p><img src="https://i.loli.net/2019/04/28/5cc54b2b87ac0.png" alt="5cc54b2b87ac0"><img src="https://i.loli.net/2019/04/28/5cc54b2b87ac0.png" alt="5cc54b2b87ac0"></p><p>###</p><h3 id="append方法最快、concat次之、加号最慢"><a href="#append方法最快、concat次之、加号最慢" class="headerlink" title="append方法最快、concat次之、加号最慢"></a>append方法最快、concat次之、加号最慢</h3><h4 id="“-”方法"><a href="#“-”方法" class="headerlink" title="“+”方法"></a>“+”方法</h4><p>虽然编译器对字符串的加号做了优化，它会使用StringBuilder的append方法进行追加，而它最终通过toString方法转换成String字符串，上例中“+”拼接的代码即如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="keyword">new</span> StringBuilder(str).append(<span class="string">"JTZen9"</span>).toString();</span><br></pre></td></tr></table></figure><p>它与纯粹地使用StringBuilder的append方法是不同的：</p><ol start="2"><li><p>每趟循环都会创建一个StringBuilder对象</p></li><li><p>每次执行完毕都会调用toString方法将其转换为字符串</p></li></ol><p>所以，就耗费了更多的时间。</p><h4 id="concat方法"><a href="#concat方法" class="headerlink" title="concat方法"></a>concat方法</h4><p>concat源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">concat</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 追加的字符串长度为0</span></span><br><span class="line">        <span class="keyword">int</span> otherLen = str.length();</span><br><span class="line">        <span class="comment">// 如果追加的字符串长度为0，则返回原字符串本身</span></span><br><span class="line">        <span class="keyword">if</span> (otherLen == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取原字符串的字符数组的长度</span></span><br><span class="line">        <span class="keyword">int</span> len = value.length;</span><br><span class="line">        <span class="comment">// 将原字符串的字符数组放到buf数组中</span></span><br><span class="line">        <span class="keyword">char</span> buf[] = Arrays.copyOf(value, len + otherLen);</span><br><span class="line">        <span class="comment">// 追加的字符串转化成字符数组，添加到buf中</span></span><br><span class="line">        str.getChars(buf, len);</span><br><span class="line">        <span class="comment">// 产生一个新的字符串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>整体是一个数组的拷贝，虽然在内存中是处理都是原子性操作，速度非常快，但是，最后的return语句创建一个新String对象，也就是每次concat操作都会创建一个新的String对象，这也是限制concat方法速度的原因。</p><h4 id="append方法"><a href="#append方法" class="headerlink" title="append方法"></a>append方法</h4><p>append源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果是null值，则把null作为字符串处理</span></span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> appendNull();</span><br><span class="line">        <span class="keyword">int</span> len = str.length();</span><br><span class="line">        <span class="comment">// 追加后的字符数组长度是否超过当前值</span></span><br><span class="line">        ensureCapacityInternal(count + len);</span><br><span class="line">        <span class="comment">// 字符串复制到目标数组</span></span><br><span class="line">        str.getChars(<span class="number">0</span>, len, value, count);</span><br><span class="line">        count += len;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> AbstractStringBuilder <span class="title">appendNull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = count;</span><br><span class="line">        ensureCapacityInternal(c + <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">char</span>[] value = <span class="keyword">this</span>.value;</span><br><span class="line">        value[c++] = <span class="string">'n'</span>;</span><br><span class="line">        value[c++] = <span class="string">'u'</span>;</span><br><span class="line">        value[c++] = <span class="string">'l'</span>;</span><br><span class="line">        value[c++] = <span class="string">'l'</span>;</span><br><span class="line">        count = c;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minimumCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">if</span> (minimumCapacity - value.length &gt; <span class="number">0</span>)</span><br><span class="line">            expandCapacity(minimumCapacity);  <span class="comment">// 加长，并作数组拷贝</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>整个append方法都在做字符数组的处理，加长，拷贝等，这些都是基本的数据处理，整个方法内并没有生成对象。只是最后toString返回一个对象而已。</p><h3 id="题外"><a href="#题外" class="headerlink" title="题外"></a>题外</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"My name is "</span>;</span><br><span class="line">str = str + <span class="string">"JTZen9"</span>;</span><br></pre></td></tr></table></figure><p>相当于 str = new StringBuilder(str).append(“JTZen9”).toString(); 也就是说，该str = str + “JTZen9”;语句执行完之后，总共有三个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"My name is "</span> + <span class="string">"JTZen9"</span>;</span><br></pre></td></tr></table></figure><p>JVM会直接把str作为一个对象，即 “My name is JTZen9”</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol start="2"><li><p>大多数情况，我们使用“+”，符合编码习惯和我们的阅读</p></li><li><p>当在频繁进行字符串的运算（如拼接、替换、删除等），或者在系统性能临界的时候，我们可以考虑使用concat或append方法</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Final关键字</title>
      <link href="/posts/c11c/"/>
      <url>/posts/c11c/</url>
      
        <content type="html"><![CDATA[<h3 id="final关键字的基本用法"><a href="#final关键字的基本用法" class="headerlink" title="final关键字的基本用法"></a>final关键字的基本用法</h3><p>　　在Java中，final关键字可以用来修饰类、方法和变量（包括成员变量和局部变量）。下面就从这三个方面来了解一下final关键字的基本用法。</p><a id="more"></a><p>　　1.修饰类</p><p>　　当用final修饰一个类时，表明这个类不能被继承。也就是说，如果一个类你永远不会让他被继承，就可以用final进行修饰。final类中的成员变量可以根据需要设为final，但是要注意final类中的所有成员方法都会被隐式地指定为final方法。</p><p><img src="https://images0.cnblogs.com/i/288799/201407/091032249893721.jpg" alt><img src="https://images0.cnblogs.com/i/288799/201407/091032249893721.jpg" alt></p><p>　　在使用final修饰类的时候，要注意谨慎选择，除非这个类真的在以后不会用来继承或者出于安全的考虑，尽量不要将类设计为final类。</p><p>　　2.修饰方法</p><p>　　下面这段话摘自《Java编程思想》第四版第143页：</p><p>　　“使用final方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升。在最近的Java版本中，不需要使用final方法进行这些优化了。“</p><p>　　因此，如果只有在想明确禁止 该方法在子类中被覆盖的情况下才将方法设置为final的。</p><p>　　注：类的private方法会隐式地被指定为final方法。</p><p>　　3.修饰变量</p><p>　　修饰变量是final用得最多的地方，也是本文接下来要重点阐述的内容。首先了解一下final变量的基本语法：</p><p>　　对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</p><p>　　举个例子：</p><p>　　<img src="https://images0.cnblogs.com/i/288799/201407/091114508325258.jpg" alt><img src="https://images0.cnblogs.com/i/288799/201407/091114508325258.jpg" alt></p><p>　　上面的一段代码中，对变量i和obj的重新赋值都报错了。</p><h3 id="深入理解final关键字"><a href="#深入理解final关键字" class="headerlink" title="深入理解final关键字"></a>深入理解final关键字</h3><p>　　在了解了final关键字的基本用法之后，这一节我们来看一下final关键字容易混淆的地方。</p><p>1.类的final变量和普通变量有什么区别？</p><p>　　当用final作用于类的成员变量时，成员变量（注意是类的成员变量，局部变量只需要保证在使用之前被初始化赋值即可）必须在定义时或者构造器中进行初始化赋值，而且final变量一旦被初始化赋值之后，就不能再被赋值了。</p><p>　　那么final变量和普通变量到底有何区别呢？下面请看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        String a = <span class="string">"hello2"</span>; </span><br><span class="line">        <span class="keyword">final</span> String b = <span class="string">"hello"</span>;</span><br><span class="line">        String d = <span class="string">"hello"</span>;</span><br><span class="line">        String c = b + <span class="number">2</span>; </span><br><span class="line">        String e = d + <span class="number">2</span>;</span><br><span class="line">        System.out.println((a == c));</span><br><span class="line">        System.out.println((a == e));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>　　大家可以先想一下这道题的输出结果。为什么第一个比较结果为true，而第二个比较结果为fasle。这里面就是final变量和普通变量的区别了，当final变量是基本数据类型以及String类型时，如果在编译期间能知道它的确切值，则编译器会把它当做编译期常量使用。也就是说在用到该final变量的地方，相当于直接访问的这个常量，不需要在运行时确定。这种和C语言中的宏替换有点像。因此在上面的一段代码中，由于变量b被final修饰，因此会被当做编译器常量，所以在使用到b的地方会直接将变量b 替换为它的 值。而对于变量d的访问却需要在运行时通过链接来进行。想必其中的区别大家应该明白了，不过要注意，只有在编译期间能确切知道final变量值的情况下，编译器才会进行这样的优化，比如下面的这段代码就不会进行优化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        String a = <span class="string">"hello2"</span>; </span><br><span class="line">        <span class="keyword">final</span> String b = getHello();</span><br><span class="line">        String c = b + <span class="number">2</span>; </span><br><span class="line">        System.out.println((a == c));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　这段代码的输出结果为false。</p><p>2.被final修饰的引用变量指向的对象内容可变吗？</p><p>　　在上面提到被final修饰的引用变量一旦初始化赋值之后就不能再指向其他的对象，那么该引用变量指向的对象的内容可变吗？看下面这个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> MyClass myClass = <span class="keyword">new</span> MyClass();</span><br><span class="line">        System.out.println(++myClass.i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　这段代码可以顺利编译通过并且有输出结果，输出结果为1。这说明引用变量被final修饰之后，虽然不能再指向其他对象，但是它指向的对象的内容是可变的。</p><p>3.final和static</p><p>　　很多时候会容易把static和final关键字混淆，static作用于成员变量用来表示只保存一份副本，而final的作用是用来保证变量不可变。看下面这个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        MyClass myClass1 = <span class="keyword">new</span> MyClass();</span><br><span class="line">        MyClass myClass2 = <span class="keyword">new</span> MyClass();</span><br><span class="line">        System.out.println(myClass1.i);</span><br><span class="line">        System.out.println(myClass1.j);</span><br><span class="line">        System.out.println(myClass2.i);</span><br><span class="line">        System.out.println(myClass2.j);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> i = Math.random();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> j = Math.random();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　运行这段代码就会发现，每次打印的两个j值都是一样的，而i的值却是不同的。从这里就可以知道final和static变量的区别了。</p><p>4.匿名内部类中使用的外部局部变量为什么只能是final变量？</p><p>　　这个问题请参见上一篇博文中<a href="http://www.cnblogs.com/dolphin0520/p/3811445.html" target="_blank" rel="noopener">《Java内部类详解》</a>中的解释，在此处不再赘述。</p><p>5.关于final参数的问题</p><p>　　关于网上流传的”当你在方法中不需要改变作为参数的对象变量时，明确使用final进行声明，会防止你无意的修改而影响到调用方法外的变量“这句话，我个人理解这样说是不恰当的。</p><p>　　因为无论参数是基本数据类型的变量还是引用类型的变量，使用final声明都不会达到上面所说的效果。</p><p>　　看这个例子就清楚了：</p><p><img src="https://images0.cnblogs.com/i/288799/201407/091522525043726.jpg" alt><img src="https://images0.cnblogs.com/i/288799/201407/091522525043726.jpg" alt></p><p>　　上面这段代码好像让人觉得用final修饰之后，就不能在方法中更改变量i的值了。殊不知，方法changeValue和main方法中的变量i根本就不是一个变量，因为java参数传递采用的是值传递，对于基本类型的变量，相当于直接将变量进行了拷贝。所以即使没有final修饰的情况下，在方法内部改变了变量i的值也不会影响方法外的i。</p><p>　　再看下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        MyClass myClass = <span class="keyword">new</span> MyClass();</span><br><span class="line">        StringBuffer buffer = <span class="keyword">new</span> StringBuffer(<span class="string">"hello"</span>);</span><br><span class="line">        myClass.changeValue(buffer);</span><br><span class="line">        System.out.println(buffer.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeValue</span><span class="params">(<span class="keyword">final</span> StringBuffer buffer)</span> </span>&#123;</span><br><span class="line">        buffer.append(<span class="string">"world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　运行这段代码就会发现输出结果为 helloworld。很显然，用final进行修饰并没有阻止在changeValue中改变buffer指向的对象的内容。有人说假如把final去掉了，万一在changeValue中让buffer指向了其他对象怎么办。有这种想法的朋友可以自己动手写代码试一下这样的结果是什么，如果把final去掉了，然后在changeValue中让buffer指向了其他对象，也不会影响到main方法中的buffer，原因在于java采用的是值传递，对于引用变量，传递的是引用的值，也就是说让实参和形参同时指向了同一个对象，因此让形参重新指向另一个对象对实参并没有任何影响。</p><p>　　所以关于网上流传的final参数的说法，我个人不是很赞同。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工程实践：如何给变量取一个好的名字</title>
      <link href="/posts/49d/"/>
      <url>/posts/49d/</url>
      
        <content type="html"><![CDATA[<h3 id="变量命名风格"><a href="#变量命名风格" class="headerlink" title="变量命名风格"></a>变量命名风格</h3><p>　　变量命名风格通常会根据不同的变量类型来区分，以Java语言为例，根据变量类型不同有两种命名风格：</p><a id="more"></a><p>1）类成员变量、局部变量</p><p>　　类成员变量、局部变量通常采用<strong>驼峰命名</strong>风格，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String userName;</span><br></pre></td></tr></table></figure><p>2）静态成员变量、枚举值、常量</p><p>　　静态成员变量、枚举值、常量通常采用<strong>所有字母大写、多个单词以英文下划线连接</strong>，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_YEARS = <span class="number">25</span>;</span><br><span class="line">​</span><br><span class="line"><span class="comment">// 建议枚举类都以Enum结尾</span></span><br><span class="line"><span class="keyword">enum</span> ColorEnum &#123;</span><br><span class="line">    RED(<span class="number">0</span>, <span class="string">"红色"</span>),</span><br><span class="line">    YELLOW(<span class="number">1</span>, <span class="string">"黄色"</span>),</span><br><span class="line">    GREEN(<span class="number">2</span>, <span class="string">"绿色"</span>),</span><br><span class="line">    WHITE(<span class="number">3</span>, <span class="string">"白色"</span>),</span><br><span class="line">    BLACK(<span class="number">4</span>, <span class="string">"黑色"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">​</span><br><span class="line">    Color(<span class="keyword">int</span> code, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量命名最高境界"><a href="#变量命名最高境界" class="headerlink" title="变量命名最高境界"></a>变量命名最高境界</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在函数命名那篇中我们说的函数命名最高境界是见字如面，那么对于变量命名来说，最高境界是什么呢？ 我认为是：自解释，即&quot;代码即注释&quot;。</span><br></pre></td></tr></table></figure><p>　　为什么这么说呢，因为通常来说一个函数是会有函数注释的，即使函数名字取的不好，如果注释写的比较清楚，对于后续维护人员来说也是了解函数具体功能的一种方式。</p><p>　　而变量则不同，在一个工程里面，变量的数量远远大于函数的数量，所以不太可能对于每个变量都去写注释，所以如果一个工程的变量命名很糟糕，那么对于后续维护人员来说将是毁灭性的打击，因为每读到一个变量，可能就需要去猜测变量的含义，我想没有哪个人愿意读到这样的代码，永远记住一点：”代码是写给人看的，不是写给机器看的”。</p><p>　　譬如下面这段代码的命名就非常糟糕：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ppn = (cpn &gt; <span class="number">1</span>) ? (cpn - <span class="number">1</span>) : cpn;</span><br><span class="line">npn = (cpn &lt; tpn) ? (cpn + <span class="number">1</span>) : tpn;</span><br><span class="line">​</span><br><span class="line">p = <span class="keyword">new</span> Page(ppn, cpn, npn, tpn);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">上面这段代码估计只有原作者清楚地知道各个变量的含义是啥了，</span><br></pre></td></tr></table></figure><p>　　如果修改为下面这种写法，可读性会好很多，并且一目了然，很容易知道其大概意图是计算分页信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">prePageNum = (curPageNum &gt; <span class="number">1</span>) ? (curPageNum - <span class="number">1</span>) : curPageNum;</span><br><span class="line">nextPageNum = (curPageNum &lt; totalPageNum) ? (curPageNum + <span class="number">1</span>) : totalPageNum;</span><br><span class="line">​</span><br><span class="line">page = <span class="keyword">new</span> Page(prePageNum, curPageNum, nextPageNum, totalPageNum);</span><br></pre></td></tr></table></figure><h3 id="变量命名最佳实践"><a href="#变量命名最佳实践" class="headerlink" title="变量命名最佳实践"></a>变量命名最佳实践</h3><p><strong>1）采用名词或者形容词来命名变量</strong></p><p>　　变量一般情况下建议使用名词、名字组合或者形容词，因为变量一般形容的是一种事物或者事物的属性，所以用名词或者名词组合更容易让人理解，而形容词一般用于bool类型的变量。</p><p><strong>2）避免使用单字母变量，尽量细化变量含义</strong></p><p>　　在程序中，尽量避免使用单字母变量，唯一可以接受使用单字母变量的场景只有for循环，不过还是不太推荐在for循环中使用单字母变量(用pos、index比for循环的i、j、k要好很多)。</p><p>　　举个例子，比如下面这行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calConeVolume</span><span class="params">(<span class="keyword">double</span> b, <span class="keyword">double</span> d)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Math.PI * b * b * d / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">咋一看这个函数参数感觉挺清晰，但是一细看，b是什么？d又是什么？如果我要用这个函数，该怎么传参？估计大部人是一脸懵逼状，只能进去看实际的函数实现才知道b是圆锥体半径，d是圆锥体高度；</span><br><span class="line"></span><br><span class="line">那么怎么优化这段代码命名呢？其实很简单，稍微细化一下变量含义，让变量名自己去表达实际意图：</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calConeVolume</span><span class="params">(<span class="keyword">double</span> radius, <span class="keyword">double</span> height)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Math.PI * radius * radius * height / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3）变量命名前后用词需统一</strong></p><p>　　在同一个工程或者一个场景下，变量命名风格需前后统一，比如total和sum都能表示总计的意思，那么所有需要用到”总计”含义的地方要么全部使用total、要么全部使用sum。</p><p>　　保持前后命名风格统一是保证工程代码良好可读性的关键保证。</p><p><strong>4）集合变量用类型或者复数s作为后缀</strong></p><p>　　在java中，有很多集合，比如List、Map、Set等，那么集合变量该怎么命名呢？</p><p>　　一般可采取两种方式：</p><ul><li>使用复数s结尾</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><ul><li>用集合类型作为后缀</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List studentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>上面两种方式均可，没有比较明显的偏好，根据实际场景决定。第一种方式相对更简洁，第二种在局部作用域里面有多种相关的集合变量时区分度更大，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List studentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Map studentMap = Maps.newHashMap();</span><br><span class="line">​</span><br><span class="line"><span class="keyword">for</span> (Student stu : studentList) &#123;</span><br><span class="line">  studentMap.put(stu.getId, stu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的建议是如果局部作用域只有一种类型的集合，那么推荐使用复数形式；如果局部作用域有多个相关的集合类型，那么推荐用类型结尾。</p><p><strong>5）禁止使用is作为bool类型的类成员变量前置</strong></p><p>　　在java中，禁止用is作为bool类型的类成员变量的前缀，因为is作为前缀会导致序列化/反序列出现问题，阿里的java代码规范中也明确提到了这一点，所以在写代码的时候最好还是遵守公认的规范，不然哪天说不定就踩坑了。</p><p><strong>6）尽量避免使用缩写进行命名</strong></p><p>　　有些时候，变量名可能有点长，不利于代码可读性，因此很多时候在写代码的时候喜欢用缩写来命名，但这个不是一个好的习惯，除非使用的缩写是大家都会使用的约定俗称的缩写。</p><p>　　比如下面这个命名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> averageStudentAge;  =&gt;  <span class="keyword">int</span> avgStudentAge;</span><br></pre></td></tr></table></figure><p>　 因为avg大家都知道是average的缩写，所以这么写问题不大，不会引起歧义；</p><p>　　但是下面这种缩写命名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res</span><br><span class="line">tmp</span><br><span class="line">cnt</span><br></pre></td></tr></table></figure><p>就不是好的缩写命名，因为不同的人阅读可能会有不同的理解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res =&gt; response、resource、result</span><br><span class="line">tmp =&gt; temporary、template</span><br><span class="line">cnt =&gt; count、content、context</span><br></pre></td></tr></table></figure><p>附上一些约定俗称的缩写：</p><table><thead><tr><th>全称</th><th>缩写</th></tr></thead><tbody><tr><td>identification</td><td>id</td></tr><tr><td>average</td><td>avg</td></tr><tr><td>maximum</td><td>max</td></tr><tr><td>minimum</td><td>min</td></tr><tr><td>buffer</td><td>buf</td></tr><tr><td>error</td><td>err</td></tr><tr><td>message</td><td>msg</td></tr><tr><td>image</td><td>img</td></tr><tr><td>length</td><td>len</td></tr><tr><td>library</td><td>lib</td></tr><tr><td>password</td><td>pwd</td></tr><tr><td>position</td><td>pos</td></tr><tr><td>data transfer object</td><td>dto</td></tr><tr><td>view object</td><td>vo</td></tr></tbody></table><p><strong>7）抛弃掉flag变量</strong></p><p>　　国内一些早期的教材上，到处充斥着各种flag风格的变量，这种命名方式对于大型工程简直就是噩梦，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> flag = getDoctorFlag(doctorId);</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">看到这段代码，读者会有疑问flag变量的含义是什么？flag值为1的时候又代表什么含义？是医生的值班/在岗状态、还是医生的身体状态？估计读者的内心是崩溃的。</span><br></pre></td></tr></table></figure><p>　　如果优化成下面这种形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DutyStatus doctorDutyStatus = getDoctorDutyStatus(doctorId);</span><br><span class="line"><span class="keyword">if</span> (doctorDutyStatus == DutyStatus.ONLINE) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>工程实践：给函数取一个好的名字</title>
      <link href="/posts/93bc/"/>
      <url>/posts/93bc/</url>
      
        <content type="html"><![CDATA[<h3 id="常见函数命名风格"><a href="#常见函数命名风格" class="headerlink" title="常见函数命名风格"></a>常见函数命名风格</h3><p>　　目前来说，最常见的函数命名主要有两种风格：驼峰命名和帕斯卡命名。</p><a id="more"></a><ul><li>驼峰命名：多个单词组成一个名称时，第一个单词全部小写，后面单词首字母大写；如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>帕斯卡命名：多个单词组成一个名称时，每个单词的首字母大写；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetUserName</span><span class="params">(String userName)</span></span>;</span><br></pre></td></tr></table></figure><p>　　两种命名风格都是ok的，但要保证一点，对于一个团队或者一个项目，需要根据语言本身的推荐命名方式做好约定。比如java一般都采取驼峰命名，C#采取帕斯卡命名。</p><h3 id="函数命名最高境界"><a href="#函数命名最高境界" class="headerlink" title="函数命名最高境界"></a>函数命名最高境界</h3><p>　　我们通常说：天下武功，唯快不破。那么对于函数命名来说最高境界是什么呢？我认为是：<strong>见字如面</strong>，顾名思义，就是看到函数的名字就知道这个函数具体做了哪些事情。</p><p>　　比如上面的函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span></span>;</span><br></pre></td></tr></table></figure><p>　　但是下面这个函数命名就不是一个好的命名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addCharacter</span><span class="params">(String originString, <span class="keyword">char</span> ch)</span></span>;`</span><br></pre></td></tr></table></figure><p>　　这个函数，一咋看，还不错，从函数字面意思看是给某个字符串添加一个字符。<strong>但是到底是在原有字符串首部添加，还是在原有字符串末尾追加呢？亦或是在某个固定位置插入呢？</strong>从函数名字完全看不出来这个函数的真正意图，只能继续往下读这个函数的具体实现才知道。</p><p>　　而下面这几个名字就比上面要好得多：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">appendCharacter</span><span class="params">(String originString, <span class="keyword">char</span> ch)</span></span>;     <span class="comment">// 追加到末尾</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">insertCharacter</span><span class="params">(String originString, <span class="keyword">char</span> ch, <span class="keyword">int</span> insertPosition)</span></span>; <span class="comment">// 插入指定位置</span></span><br></pre></td></tr></table></figure><h3 id="函数命名最佳实践"><a href="#函数命名最佳实践" class="headerlink" title="函数命名最佳实践"></a>函数命名最佳实践</h3><p><strong>1）要领1：动词选取要精准</strong></p><p>　　通常来说，动词决定了一个函数要采取什么”动作”。动词取的好，一个函数名字已经成功了80%。</p><p>　　常用动词表：</p><table><thead><tr><th>类别</th><th>单词</th></tr></thead><tbody><tr><td>添加/插入/创建/初始化/加载</td><td>add、append、insert、create、initialize、load</td></tr><tr><td>删除/销毁</td><td>delete、remove、destroy、drop</td></tr><tr><td>打开/开始/启动</td><td>open、start</td></tr><tr><td>关闭/停止</td><td>close、stop</td></tr><tr><td>获取/读取/查找/查询</td><td>get、fetch、acquire、read、search、find、query</td></tr><tr><td>设置/重置/放入/写入/释放/刷新</td><td>set、reset、put、write、release、refresh</td></tr><tr><td>发送/推送</td><td>send、push</td></tr><tr><td>接收/拉取</td><td>receive、pull</td></tr><tr><td>提交/撤销/取消</td><td>submit、cancel</td></tr><tr><td>收集/采集/选取/选择</td><td>collect、pick、select</td></tr><tr><td>提取/解析</td><td>sub、extract、parse</td></tr><tr><td>编码/解码</td><td>encode、decode</td></tr><tr><td>填充/打包/压缩</td><td>fill、pack、compress</td></tr><tr><td>清空/拆包/解压</td><td>flush、clear、unpack、decompress</td></tr><tr><td>增加/减少</td><td>increase、decrease、reduce</td></tr><tr><td>分隔/拼接</td><td>split、join、concat</td></tr><tr><td>过滤/校验/检测</td><td>filter、valid、check</td></tr></tbody></table><p>　　动词决定了函数的具体动作，而名词决定了函数具体的操作对象，对于名词，尽量使用领域词汇，不要使用生僻或者大家很少使用的词语。</p><p><strong>2）要领2：名词使用领域词汇</strong></p><p>　　举个例子：集合的容量通常用capacity、集合实际元素个数用size、字符串长度用length，这种就遵循大家的使用习惯，不要用size去形如字符串的长度。</p><p>　　再比如，假如使用到建造者模式，那么通常会用build作为函数名字，这个时候就不要另辟蹊径，用create来作为函数名字，使用大家约定俗成的命名习惯更容易让你的代码被别人读懂。</p><p>　　常用名词表：</p><table><thead><tr><th>类别</th><th>单词</th></tr></thead><tbody><tr><td>容量/大小/长度</td><td>capacity、size、length</td></tr><tr><td>实例/上下文</td><td>instance、context</td></tr><tr><td>配置</td><td>config、settings</td></tr><tr><td>头部/前面/前一个/第一个</td><td>header、front、previous、first</td></tr><tr><td>尾部/后面/后一个/最后一个</td><td>tail、back、next、last</td></tr><tr><td>区间/区域/某一部分/范围/规模</td><td>range、interval、region、area、section、scope、scale</td></tr><tr><td>缓存/缓冲/会话</td><td>cache、buffer、session</td></tr><tr><td>本地/局部/全局</td><td>local、global</td></tr><tr><td>成员/元素</td><td>member、element</td></tr><tr><td>菜单/列表</td><td>menu、list</td></tr><tr><td>源/目标</td><td>source、destination、target</td></tr></tbody></table><p><strong>3）要领3：函数取名最忌讳”名不副实”</strong></p><p>　　函数取名最忌讳的是”名不副实”，举个例子，假如有个Cache类，里面有个函数判断key是否过期：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExpired</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前时间戳</span></span><br><span class="line">        <span class="keyword">long</span> curTimestamp = DateUtils.nowUnixTime();</span><br><span class="line">        <span class="comment">// 获取key的存入时间戳</span></span><br><span class="line">        <span class="keyword">long</span> storeTimestamp = getStoreTimestamp(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (curTimestamp - storeTimestamp &gt; MAX_EXPIRE_SECONDS) &#123;</span><br><span class="line">            <span class="comment">// 注意这个地方的delete是个隐藏逻辑</span></span><br><span class="line">            delete(key);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>　　上面这个函数从函数字面意思看是判断key是否过期，但是！！<strong>它居然在函数里面隐藏了一段特殊逻辑：如果过期则删除掉key。</strong>这个就是典型的”名不副实”，这个是最忌讳的，会给后续的开发人员留下”巨坑”。</p><p>　　有两种方式去优化这段代码：</p><ul><li>方式一：将隐藏逻辑去掉</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExpired</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前时间戳</span></span><br><span class="line">        <span class="keyword">long</span> curTimestamp = DateUtils.nowUnixTime();</span><br><span class="line">        <span class="comment">// 获取key的存入时间戳</span></span><br><span class="line">        <span class="keyword">long</span> storeTimestamp = getStoreTimestamp(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (curTimestamp - storeTimestamp &gt; MAX_EXPIRE_SECONDS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>方式二：改变函数名字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteIfExpired</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前时间戳</span></span><br><span class="line">        <span class="keyword">long</span> curTimestamp = DateUtils.nowUnixTime();</span><br><span class="line">        <span class="comment">// 获取key的存入时间戳</span></span><br><span class="line">        <span class="keyword">long</span> storeTimestamp = getStoreTimestamp(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (curTimestamp - storeTimestamp &gt; MAX_EXPIRE_SECONDS) &#123;</span><br><span class="line">            <span class="keyword">return</span> delete(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>4）<strong>要领4：多查询条件的函数名字谨慎使用介词by</strong></p><p>　　我们平时在写查询接口时，假如有多个查询参数怎么办？每个通过by一起连接依赖？No！这绝对不是明智的方式。假如一开始产品的需求是通过学生姓名查询学生信息，写出来的可能是这样的函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">getByName</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure><p>　　然后突然又有一天产品提出了新的需求，希望同时可以通过姓名和电话号码来查询学生信息，那么函数可能变成这样了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">getByNameAndMobile</span><span class="params">(String name, String mobile)</span></span>;</span><br></pre></td></tr></table></figure><p>　　接着，没过多久，产品又希望根据学生年龄来查询学生信息，那么函数可能变成这样了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">getByNameAndMobileAndAge</span><span class="params">(String name, String mobile, <span class="keyword">int</span> age)</span></span>;</span><br></pre></td></tr></table></figure><p>　　如果这样来给函数命名，那么你的噩梦大门即将打开。</p><p>　　通常比较好的做法是：</p><ul><li>如果是通过主键id来查询，那么可以通过by来连接查询信息，比如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">getByStudentId</span><span class="params">(<span class="keyword">long</span> studentId)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>如果是通过其他属性来查询，并且未来会存在多个组合查询的可能性，建议进行封装，比如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">getStudents</span><span class="params">(StudentSearchParam searchParam)</span></span>;</span><br></pre></td></tr></table></figure><p>　　最后，建议大家平时在写代码过程中，不要怕在函数命名上耗费时间，一个好的函数命名在后期会大大减少你代码重构的成本，争取对函数命名做到”见字如面”~</p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA切换Git地址</title>
      <link href="/posts/5fd7/"/>
      <url>/posts/5fd7/</url>
      
        <content type="html"><![CDATA[<p>VCS–&gt;Git–&gt;Remotes</p><p><img src="https://i.loli.net/2019/02/23/5c70e4c502667.png" alt="5c70e4c502667"><img src="https://i.loli.net/2019/02/23/5c70e4c502667.png" alt="5c70e4c502667"></p>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea常用设置</title>
      <link href="/posts/c655/"/>
      <url>/posts/c655/</url>
      
        <content type="html"><![CDATA[<h3 id="隐藏文件"><a href="#隐藏文件" class="headerlink" title="隐藏文件"></a>隐藏文件</h3><p>![]![]<img src="https://i.loli.net/2019/04/25/5cc14e5ad46b7.jpg" alt="5cc14e5ad46b7"></p><h3 id="显示文件修改"><a href="#显示文件修改" class="headerlink" title="显示文件修改"></a>显示文件修改</h3><p><img src="https://i.loli.net/2019/04/25/5cc14e6e339c0.jpg" alt="5cc14e6e339c0"></p><h3 id="auto-import"><a href="#auto-import" class="headerlink" title="auto import"></a>auto import</h3><p><img src="https://i.loli.net/2019/04/25/5cc14e7cbf032.jpg" alt="5cc14e7cbf032"></p><h3 id="Favorites-Command-2"><a href="#Favorites-Command-2" class="headerlink" title="Favorites(Command + 2)"></a>Favorites(Command + 2)</h3><p><img src="https://i.loli.net/2019/04/25/5cc14e916b1be.jpg" alt="5cc14e916b1be"></p><h3 id="Bookmarks"><a href="#Bookmarks" class="headerlink" title="Bookmarks()"></a>Bookmarks()</h3><p><img src="https://i.loli.net/2019/04/25/5cc14e9f246ce.jpg" alt="5cc14e9f246ce"></p><h3 id="Recent-Files-Command-E"><a href="#Recent-Files-Command-E" class="headerlink" title="Recent Files(Command + E)"></a>Recent Files(Command + E)</h3><p><img src="https://i.loli.net/2019/04/25/5cc14eacaa9d6.jpg" alt="5cc14eacaa9d6"></p><h3 id="Find-Action-Shift-Command-A"><a href="#Find-Action-Shift-Command-A" class="headerlink" title="Find Action(Shift + Command + A)"></a>Find Action(Shift + Command + A)</h3><p><img src="https://i.loli.net/2019/04/25/5cc14ebb549eb.jpg" alt="5cc14ebb549eb"></p><h3 id="Search-Everywhere-Shift-Shift"><a href="#Search-Everywhere-Shift-Shift" class="headerlink" title="Search Everywhere(Shift Shift)"></a>Search Everywhere(Shift Shift)</h3><p><img src="https://i.loli.net/2019/04/25/5cc14ecb1cda8.jpg" alt="5cc14ecb1cda8"></p><p>Find in Path(Command + Shift + F)</p><p><img src="https://i.loli.net/2019/04/25/5cc14ed8dfc6f.jpg" alt="5cc14ed8dfc6f"></p><h3 id="Usages-Alt-F7"><a href="#Usages-Alt-F7" class="headerlink" title="Usages(Alt + F7)"></a>Usages(Alt + F7)</h3><p><img src="https://i.loli.net/2019/04/25/5cc14ee5a3c71.jpg" alt="5cc14ee5a3c71"></p><h3 id="VM-options-设置默认配置"><a href="#VM-options-设置默认配置" class="headerlink" title="VM options 设置默认配置"></a>VM options 设置默认配置</h3><p><img src="https://i.loli.net/2019/11/05/z1FEGQewnMq5dls.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA常用插件</title>
      <link href="/posts/4d6d/"/>
      <url>/posts/4d6d/</url>
      
        <content type="html"><![CDATA[<h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>设置–&gt;Plugins–&gt;Browse repositories–&gt;搜索插件–&gt;install–&gt;重启idea <img src="https://i.loli.net/2019/04/25/5cc14f01c5f2b.jpg" alt="5cc14f01c5f2b"><img src="https://i.loli.net/2019/04/25/5cc14f01c5f2b.jpg" alt="5cc14f01c5f2b"></p><a id="more"></a><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><h5 id="Maven-Helper"><a href="#Maven-Helper" class="headerlink" title="Maven Helper"></a>Maven Helper</h5><h5 id="JRebel"><a href="#JRebel" class="headerlink" title="JRebel"></a>JRebel</h5><h5 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h5><h5 id="ignore"><a href="#ignore" class="headerlink" title=".ignore"></a>.ignore</h5><h5 id="Alibaba-Cloud-Toolkit"><a href="#Alibaba-Cloud-Toolkit" class="headerlink" title="Alibaba Cloud Toolkit"></a>Alibaba Cloud Toolkit</h5><h5 id="MybatisCodeHelperPro"><a href="#MybatisCodeHelperPro" class="headerlink" title="MybatisCodeHelperPro"></a>MybatisCodeHelperPro</h5><h5 id="RestfulToolkit"><a href="#RestfulToolkit" class="headerlink" title="RestfulToolkit"></a>RestfulToolkit</h5><h5 id="SonarLint"><a href="#SonarLint" class="headerlink" title="SonarLint"></a>SonarLint</h5><h5 id="stackoverflow"><a href="#stackoverflow" class="headerlink" title="stackoverflow"></a>stackoverflow</h5>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git设置默认分支</title>
      <link href="/posts/e5a8/"/>
      <url>/posts/e5a8/</url>
      
        <content type="html"><![CDATA[<p>要把push和pull的默认分支设置为dev，那么：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/dev dev</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基本命令</title>
      <link href="/posts/93c0/"/>
      <url>/posts/93c0/</url>
      
        <content type="html"><![CDATA[<p>打算使用 Git 来对现有的项目进行管理，你只需要进入该项目目录并输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><a id="more"></a><p>实现对指定文件的跟踪</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add *.c</span><br><span class="line">$ git add LICENSE</span><br></pre></td></tr></table></figure><p>提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">'initial project version'</span></span><br></pre></td></tr></table></figure><p>克隆仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/libgit2/libgit2  mylibgit</span><br></pre></td></tr></table></figure><p>检查当前文件状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><p>忽略文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch .gitignore</span><br></pre></td></tr></table></figure><p>格式规范</p><ul><li>所有空行或者以 ＃ 开头的行都会被 Git 忽略。</li><li>可以使用标准的 glob 模式匹配。</li><li>匹配模式可以以（/）开头防止递归。</li><li>匹配模式可以以（/）结尾指定目录。</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</li></ul><p>查看差异 只显示尚未暂存的改动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br></pre></td></tr></table></figure><p>查看已暂存的将要添加到下次提交里的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --cached</span><br></pre></td></tr></table></figure><p>查看已经暂存起来的变化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --cached</span><br></pre></td></tr></table></figure><p>提交更新 -a跳过使用暂存区域 -m提交信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"Story 182: Fix benchmarks for speed"</span></span><br></pre></td></tr></table></figure><p>移除文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm</span><br></pre></td></tr></table></figure><p>查看提交历史</p><ul><li>-p显示每次提交的内容差异</li><li>-2仅显示最近两次提交</li><li>–stat每次提交的简略的统计信息</li><li>–pretty指定使用不同于默认格式的方式展示提交历史</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">$ git <span class="built_in">log</span> --pretty=oneline</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git分支管理最佳实践</title>
      <link href="/posts/cf82/"/>
      <url>/posts/cf82/</url>
      
        <content type="html"><![CDATA[<p>Git 是目前最流行的源代码管理工具。大量的软件项目由 GitHub、Bitbucket 和 GitLab 这样的云服务平台或是私有的 Git 仓库来管理。在使用 Git 时通常会遇到的一个问题是采用何种分支管理实践，即如何管理仓库中作用不同的各类分支。和软件开发中的其他实践一样，Git 分支管理并没有普遍适用的最佳做法，而只有对每个团队和项目而言最适合的做法。简单来说，在项目开发中使用多个分支会带来额外的管理和维护开销，但是多个分支对于项目的团队合作、新功能开发和发布管理都是有一定好处的。不同的团队可以根据团队人员组成和意愿、项目的发布周期等因素选择最适合的策略，找到最适合团队的管理方式。本文将介绍三种常见的 Git 分支管理方式。</p><a id="more"></a><h2 id="单主干"><a href="#单主干" class="headerlink" title="单主干"></a>单主干</h2><p>单主干的分支实践（Trunk-based development，TBD）在 SVN 中比较流行。<a href="http://paulhammant.com/2013/05/06/googles-scaled-trunk-based-development/" target="_blank" rel="noopener">Google</a>和<a href="http://paulhammant.com/2013/03/13/facebook-tbd-take-2/" target="_blank" rel="noopener">Facebook</a>都使用这种方式。trunk 是 SVN 中主干分支的名称，对应到 Git 中则是 master 分支。TBD 的特点是所有团队成员都在单个主干分支上进行开发。当需要发布时，先考虑使用标签（tag），即 tag 某个 commit 来作为发布的版本。如果仅靠 tag 不能满足要求，则从主干分支创建发布分支。bug 修复在主干分支中进行，再 cherry-pick 到发布分支。图 1 是 TBD 中分支流程的示意图。</p><h5 id="图-1-TBD-中的分支流程的示意图"><a href="#图-1-TBD-中的分支流程的示意图" class="headerlink" title="图 1. TBD 中的分支流程的示意图"></a>图 1. TBD 中的分支流程的示意图</h5><p><img src="https://i.loli.net/2019/04/04/5ca59ba074233.png" alt="5ca59ba074233"><img src="https://i.loli.net/2019/04/04/5ca59ba074233.png" alt="5ca59ba074233"></p><p>由于所有开发人员都在同一个分支上工作，团队需要合理的分工和充分的沟通来保证不同开发人员的代码尽可能少的发生冲突。持续集成和自动化测试是必要的，用来及时发现主干分支中的 bug。因为主干分支是所有开发人员公用的，一个开发人员引入的 bug 可能对其他很多人造成影响。不过好处是由于分支所带来的额外开销非常小。开发人员不需要频繁在不同的分支之间切换。</p><h2 id="GitHub-flow"><a href="#GitHub-flow" class="headerlink" title="GitHub flow"></a>GitHub flow</h2><p><a href="http://scottchacon.com/2011/08/31/github-flow.html" target="_blank" rel="noopener">GitHub flow</a>是 GitHub 所使用的一种简单的流程。该流程只使用两类分支，并依托于 GitHub 的 pull request 功能。在 GitHub flow 中，master 分支中包含稳定的代码。该分支已经或即将被部署到生产环境。master 分支的作用是提供一个稳定可靠的代码基础。任何开发人员都不允许把未测试或未审查的代码直接提交到 master 分支。</p><p>对代码的任何修改，包括 bug 修复、hotfix、新功能开发等都在单独的分支中进行。不管是一行代码的小改动，还是需要几个星期开发的新功能，都采用同样的方式来管理。当需要进行修改时，从 master 分支创建一个新的分支。新分支的名称应该简单清晰地描述该分支的作用。所有相关的代码修改都在新分支中进行。开发人员可以自由地提交代码和 push 到远程仓库。</p><p>当新分支中的代码全部完成之后，通过 GitHub 提交一个新的 pull request。团队中的其他人员会对代码进行审查，提出相关的修改意见。由持续集成服务器（如 Jenkins）对新分支进行自动化测试。当代码通过自动化测试和代码审查之后，该分支的代码被合并到 master 分支。再从 master 分支部署到生产环境。图 2 是 GitHub flow 分支流程的示意图。</p><h5 id="图-2-Github-flow-中的分支流程的示意图"><a href="#图-2-Github-flow-中的分支流程的示意图" class="headerlink" title="图 2. Github flow 中的分支流程的示意图"></a>图 2. Github flow 中的分支流程的示意图</h5><p><img src="https://i.loli.net/2019/04/04/5ca59bae9e994.png" alt="5ca59bae9e994"><img src="https://i.loli.net/2019/04/04/5ca59bae9e994.png" alt="5ca59bae9e994"></p><p>GitHub flow 的好处在于非常简单实用。开发人员需要注意的事项非常少，很容易形成习惯。当需要进行任何修改时，总是从 master 分支创建新分支。完成之后通过 pull request 和相关的代码审查来合并回 master 分支。GitHub flow 要求项目有完善的自动化测试、持续集成和部署等相关的基础设施。每个新分支都需要测试和部署，如果这些不能自动化进行，会增加开发人员的工作量，导致无法有效地实施该流程。这种分支实践也要求团队有代码审查的相应流程。</p><h2 id="git-flow"><a href="#git-flow" class="headerlink" title="git-flow"></a>git-flow</h2><p><a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">git-flow</a>应该是目前流传最广的 Git 分支管理实践。git-flow 围绕的核心概念是版本发布（release）。因此 git-flow 适用于有较长版本发布周期的项目。虽然目前推崇的做法是持续集成和随时发布。有的项目甚至可以一天发布很多次。随时发布对于 SaaS 服务类的项目来说是很适合的。不过仍然有很大数量的项目的发布周期是几个星期甚至几个月。较长的发布周期可能是由于非技术相关的因素造成的，比如人员限制、管理层决策和市场营销策略等。</p><p>git-flow 流程中包含 5 类分支，分别是 master、develop、新功能分支（feature）、发布分支（release）和 hotfix。这些分支的作用和生命周期各不相同。master 分支中包含的是可以部署到生产环境中的代码，这一点和 GitHub flow 是相同的。develop 分支中包含的是下个版本需要发布的内容。从某种意义上来说，develop 是一个进行代码集成的分支。当 develop 分支集成了足够的新功能和 bug 修复代码之后，通过一个发布流程来完成新版本的发布。发布完成之后，develop 分支的代码会被合并到 master 分支中。</p><p>其余三类分支的描述如<a href="https://www.ibm.com/developerworks/cn/java/j-lo-git-mange/index.html#_%E8%A1%A8%201.%20git-flow%20%E5%88%86%E6%94%AF%E7%B1%BB%E5%9E%8B" target="_blank" rel="noopener">表 1</a>所示。这三类分支只在需要时从 develop 或 master 分支创建。在完成之后合并到 develop 或 master 分支。合并完成之后该分支被删除。这几类分支的名称应该遵循一定的命名规范，以方便开发人员识别。</p><h5 id="表-1-git-flow-分支类型"><a href="#表-1-git-flow-分支类型" class="headerlink" title="表 1. git-flow 分支类型"></a>表 1. git-flow 分支类型</h5><table><thead><tr><th>分支类型</th><th>命名规范</th><th>创建自</th><th>合并到</th><th>说明</th></tr></thead><tbody><tr><td>feature</td><td>feature/*</td><td>develop</td><td>develop</td><td>新功能</td></tr><tr><td>release</td><td>release/*</td><td>develop</td><td>develop 和 master</td><td>一次新版本的发布</td></tr><tr><td>hotfix</td><td>hotfix/*</td><td>master</td><td>develop 和 master</td><td>生产环境中发现的紧急 bug 的修复</td></tr></tbody></table><p>对于开发过程中的不同任务，需要在对应的分支上进行工作并正确地进行合并。每个任务开始前需要按照指定的步骤完成分支的创建。例如当需要开发一个新的功能时，基本的流程如下：</p><ul><li>从 develop 分支创建一个新的 feature 分支，如 feature/my-awesome-feature。</li><li>在该 feature 分支上进行开发，提交代码，push 到远端仓库。</li><li>当代码完成之后，合并到 develop 分支并删除当前 feature 分支。</li></ul><p>在进行版本发布和 hotfix 时也有类似的流程。当需要发布新版本时，采用的是如下的流程：</p><ul><li>从 develop 分支创建一个新的 release 分支，如 release/1.4。</li><li>把 release 分支部署到持续集成服务器上进行测试。测试包括自动化集成测试和手动的用户接受测试。</li><li>对于测试中发现的问题，直接在 release 分支上提交修改。完成修改之后再次部署和测试。</li><li>当 release 分支中的代码通过测试之后，把 release 分支合并到 develop 和 master 分支，并在 master 分支上添加相应的 tag。</li></ul><p>因为 git-flow 相关的流程比较繁琐和难以记忆，在实践中一般使用<a href="https://github.com/nvie/gitflow" target="_blank" rel="noopener">辅助脚本</a>来完成相关的工作。比如同样的开发新功能的任务，可以使用 git flow feature start my-awesome-feature 来完成新分支的创建，使用 git flow feature finish my-awesome-feature 来结束 feature 分支。辅助脚本会完成正确的分支创建、切换和合并等工作。</p><h3 id="Maven-JGit-Flow"><a href="#Maven-JGit-Flow" class="headerlink" title="Maven JGit-Flow"></a>Maven JGit-Flow</h3><p>对于使用 Apache Maven 的项目来说，Atlassian 的<a href="http://jgitflow.bitbucket.org/index.html" target="_blank" rel="noopener">JGit-Flow</a>是一个更好的 git-flow 实现。JGit-Flow 是一个基于<a href="http://eclipse.org/jgit/" target="_blank" rel="noopener">JGit</a>的纯 Java 实现的 git-flow，并不需要安装额外的脚本，只需要作为 Maven 的插件添加到 Maven 项目中即可。JGit-Flow 同时可以替代<a href="http://maven.apache.org/maven-release/maven-release-plugin/" target="_blank" rel="noopener">Maven release 插件</a>来进行发布管理。JGit-Flow 会负责正确的设置不同分支中的 Maven 项目的 POM 文件中的版本，这对于 Maven 项目的构建和发布是很重要的。</p><p>在 Maven 项目的 pom.xml 文件中添加<a href="https://www.ibm.com/developerworks/cn/java/j-lo-git-mange/index.html#_%E6%B8%85%E5%8D%95%201.%20JGit-Flow%20%E7%9A%84%20Maven%20%E8%AE%BE%E7%BD%AE" target="_blank" rel="noopener">代码清单</a><a href="https://www.ibm.com/developerworks/cn/java/j-lo-git-mange/index.html#_%E6%B8%85%E5%8D%95%201.%20JGit-Flow%20%E7%9A%84%20Maven%20%E8%AE%BE%E7%BD%AE" target="_blank" rel="noopener">1</a>中的插件声明就可以使用 JGit-Flow。中包含的是 JGit-Flow 不同任务的配置。</p><h5 id="清单-1-JGit-Flow-的-Maven-设置"><a href="#清单-1-JGit-Flow-的-Maven-设置" class="headerlink" title="清单 1. JGit-Flow 的 Maven 设置"></a>清单 1. JGit-Flow 的 Maven 设置</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">external.atlassian.jgitflow</span><br><span class="line">jgitflow-maven-plugin</span><br><span class="line"><span class="number">1.0</span>-m5.<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     release-</span><br><span class="line"></span><br><span class="line">    RC</span><br><span class="line">    true</span><br><span class="line">    true</span><br><span class="line">    true</span><br></pre></td></tr></table></figure><p>JGit-Flow 提供了很多配置选项，可以在 POM 文件中声明。这些配置项可以对不同的任务生效。常用的配置项如<a href="https://www.ibm.com/developerworks/cn/java/j-lo-git-mange/index.html#_%E8%A1%A8%202.%20JGit-Flow%20%E7%9A%84%E9%85%8D%E7%BD%AE%E9%A1%B9" target="_blank" rel="noopener">表</a><a href="https://www.ibm.com/developerworks/cn/java/j-lo-git-mange/index.html#_%E8%A1%A8%202.%20JGit-Flow%20%E7%9A%84%E9%85%8D%E7%BD%AE%E9%A1%B9" target="_blank" rel="noopener">2</a>所示。</p><h5 id="表-2-JGit-Flow-的配置项"><a href="#表-2-JGit-Flow-的配置项" class="headerlink" title="表 2. JGit-Flow 的配置项"></a>表 2. JGit-Flow 的配置项</h5><table><thead><tr><th>名称</th><th>描述</th><th>适用任务</th></tr></thead><tbody><tr><td>flowInitContext</td><td>配置不同类型的分支的名称</td><td>全局</td></tr><tr><td>allowSnapshots</td><td>是否允许存在 SNAPSHOT 类型的依赖</td><td></td></tr><tr><td>allowUntracked</td><td>是否允许本地 Git 中存在未提交的内容</td><td></td></tr><tr><td>scmCommentPrefix 和 scmCommentSuffix</td><td>JGit-Flow 会进行代码合并工作。通过这两个配置项来设置 JGit-Flow 进行代码提交时的消息的前缀和后缀</td><td>全局</td></tr><tr><td>username 和 password</td><td>进行 Git 认证时的用户名和密码，适用于 HTTPS 仓库</td><td>全局</td></tr><tr><td>releaseBranchVersionSuffix</td><td>release 分支中项目的 POM 文件版本号的后缀</td><td></td></tr><tr><td>developmentVersion</td><td>下一个开发版本的版本号</td><td></td></tr><tr><td>releaseVersion</td><td>发布版本的版本号</td><td></td></tr><tr><td>pushReleases</td><td>是否把 release 分支 push 到远程仓库</td><td></td></tr><tr><td>goals</td><td>当部署发布版本到 Maven 仓库时执行的目标</td><td>release-finish，hotfix-finish</td></tr><tr><td>keepBranch</td><td>当发布完成之后是否保留相应的分支</td><td>release-finish，hotfix-finish</td></tr><tr><td>noDeploy</td><td>是否启用部署到 Maven 仓库的功能</td><td>release-finish，hotfix-finish</td></tr><tr><td>noReleaseBuild</td><td>在完成发布时是否禁用 Maven 构建</td><td>release-finish</td></tr><tr><td>noReleaseMerge</td><td>在完成发布时是否把 release 分支合并回 develop 和 master 分支</td><td>release-finish</td></tr><tr><td>noTag</td><td>在完成发布时是否添加标签</td><td>release-finish，hotfix-finish</td></tr><tr><td>squash</td><td>在进行分支合并时，是否把多个 commit 合并成一个</td><td>release-finish，hotfix-finish</td></tr><tr><td>featureName</td><td>新特性分支的名称</td><td>feature-start，feature-finish，feature-deploy</td></tr><tr><td>pushFeatures</td><td>是否把特性分支 push 到远程仓库</td><td>feature-start，feature-finish</td></tr><tr><td>noFeatureBuild</td><td>在完成特性时是否禁用 Maven 构建</td><td>feature-finish</td></tr><tr><td>noFeatureMerge</td><td>在完成特性时是否把特性分支合并回 develop</td><td>feature-finish</td></tr><tr><td>pushHotfixes</td><td>在完成 hotfix 时是否把分支合并回 master</td><td>hotfix-finish</td></tr><tr><td>noHotfixBuild</td><td>在完成 hotfix 时是否禁用 Maven 构建</td><td>hotfix-finish</td></tr></tbody></table><p>其余的配置项可以参考插件不同任务的<a href="https://bitbucket.org/atlassian/jgit-flow/wiki/goals.wiki" target="_blank" rel="noopener">文档</a>。</p><p>在启用了 JGit-Flow 之后，可以通过 mvn 运行 jgitflow:feature-start 和 jgitflow:feature-finish 来开始和结束新特性的开发。与版本发布和 hotfix 相关的命令分别是 jgitflow:release-start 和 jgitflow:release-finish 以及 jgitflow:hotfix-start 和 jgitflow:hotfix-finish。在运行命令之后，JGit-Flow 会完成相关的 Git 分支创建、合并、删除、添加 tag 等操作，不需要开发人员手动完成。</p><p>每个分支的 pom.xml 中的版本号的格式并不相同。如 master 分支的版本号是标准的发布版本号，如 1.2.3；develop 分支中则是 SNAPSHOT 版本，比 master 分支的版本号要高，如 1.2.4-SNAPSHOT；release 分支可以通过<code>&lt;releaseBranchVersionSuffix&gt;</code>配置来指定版本号的后缀，如 1.2.3-RC-SNAPSHOT；feature 分支可以通过<code>&lt;enableFeatureVersions&gt;</code>配置来把 feature 分支名称作为后缀添加到版本号中，如 1.2.3-my-awesome-feature-SNAPSHOT；hotfix 分支的版本号基于 master 分支的版本号，如 1.2.3.1 是对于 1.2.3 版本的第一个 hotfix。当使用 jgitflow:release-finish 完成一个 release 分支时，develop 分支的版本号会被自动更新成下一个小版本，如从 1.2.3 到 1.2.4。当需要手动修改版本号时，可以使用<a href="http://mojo.codehaus.org/versions-maven-plugin/" target="_blank" rel="noopener">Versions 插件</a>，如 mvn versions:set -DnewVersion=2.0.0-SNAPSHOT。</p><p><strong>持续集成</strong></p><p>由于 JGit-Flow 是纯 Java 的 Maven 插件实现，可以很容易的与常用的持续集成服务器进行集成。不过在与 Atlassian 的 Bamboo 集成时，有几个细节需要注意。首先是 Bamboo 在进行构建的时候，使用的是一个虚拟的 Git 仓库，其仓库地址是一个不存在的文件系统路径。因此需要在 JGit-Flow 的配置中手动设置 Git 仓库的地址，保证 Git 操作可以正确执行，如<a href="https://www.ibm.com/developerworks/cn/java/j-lo-git-mange/index.html#_%E6%B8%85%E5%8D%95%202.%20%E6%89%8B%E5%8A%A8%E8%AE%BE%E7%BD%AE%20JGit-Flow%20%E7%9A%84%20Git%20%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80" target="_blank" rel="noopener">代码清单</a><a href="https://www.ibm.com/developerworks/cn/java/j-lo-git-mange/index.html#_%E6%B8%85%E5%8D%95%202.%20%E6%89%8B%E5%8A%A8%E8%AE%BE%E7%BD%AE%20JGit-Flow%20%E7%9A%84%20Git%20%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80" target="_blank" rel="noopener">2</a>所示。</p><h5 id="清单-2-手动设置-JGit-Flow-的-Git-仓库地址"><a href="#清单-2-手动设置-JGit-Flow-的-Git-仓库地址" class="headerlink" title="清单 2. 手动设置 JGit-Flow 的 Git 仓库地址"></a>清单 2. 手动设置 JGit-Flow 的 Git 仓库地址</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[Git url]</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>另外在开始新的 release 之前，需要确保前一个发布分支已经被删除。JGit-Flow 在默认情况下会自动在发布完成之后，删除对应的 Git 分支。但是可能本地仓库中还保留有之前的发布分支，这会导致新的 release-start 任务执行失败。一种解决方式是每次都重新 checkout 新的仓库，这样可以保证不会出现已经在远程被删除的分支。不过可能会增加构建的时间。另外一种解决方式是通过 Git 命令来删除本地分支，如<a href="https://www.ibm.com/developerworks/cn/java/j-lo-git-mange/index.html#_%E6%B8%85%E5%8D%95%203.%20%E5%88%A0%E9%99%A4%20Git%20%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF" target="_blank" rel="noopener">代码清单</a><a href="https://www.ibm.com/developerworks/cn/java/j-lo-git-mange/index.html#_%E6%B8%85%E5%8D%95%203.%20%E5%88%A0%E9%99%A4%20Git%20%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF" target="_blank" rel="noopener">3</a>所示。</p><h5 id="清单-3-删除-Git-本地分支"><a href="#清单-3-删除-Git-本地分支" class="headerlink" title="清单 3. 删除 Git 本地分支"></a>清单 3. 删除 Git 本地分支</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;bamboo.capability.system.git.executable&#125;</span> fetch --prune --verbose</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;bamboo.capability.system.git.executable&#125;</span> branch -vv | awk <span class="string">'/: gone]/&#123;print $1&#125;'</span> | </span><br><span class="line">                      xargs <span class="variable">$&#123;bamboo.capability.system.git.executable&#125;</span> branch -d 2&gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'stale branches deleted'</span></span><br><span class="line"></span><br><span class="line">Git 分支合并冲突处理</span><br></pre></td></tr></table></figure><p>当把发布分支合并到 develop 时，可能会出现冲突。因为在发布分支中有与 bug fix 相关的改动，在 develop 分支中有可能修改相同的文件。当有冲突时，直接运行 JGit-Flow 的 release-finish 任务会出错。这个时候需要开发人员手动把发布分支合并到 develop 分支，并解决相应的冲突。然后再次运行 release-finish 任务即可。</p><h2 id="选择合适的实践"><a href="#选择合适的实践" class="headerlink" title="选择合适的实践"></a>选择合适的实践</h2><p>每个开发团队都应该根据团队自身和项目的特点来选择最适合的分支实践。首先是项目的版本发布周期。如果发布周期较长，则 git-flow 是最好的选择。git-flow 可以很好地解决新功能开发、版本发布、生产系统维护等问题；如果发布周期较短，则 TBD 和 GitHub flow 都是不错的选择。GitHub flow 的特色在于集成了 pull request 和代码审查。如果项目已经使用 GitHub，则 GitHub flow 是最佳的选择。GitHub flow 和 TBD 对持续集成和自动化测试等基础设施有比较高的要求。如果相关的基础设施不完善，则不建议使用。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Git 作为目前最流行的源代码管理工具，已经被很多开发人员所熟悉和使用。在基于 Git 的团队开发中，Git 分支的作用非常重要，可以让团队的不同成员同时在多个相对独立的特性上工作。本文对目前流行的 3 种 Git 分支管理实践做了介绍，并着重介绍了 git-flow 以及与之相关的 Maven JGit-Flow 插件。</p><h4 id="相关主题"><a href="#相关主题" class="headerlink" title="相关主题"></a>相关主题</h4><ul><li>了解<a href="http://paulhammant.com/2013/05/06/googles-scaled-trunk-based-development/" target="_blank" rel="noopener">Google</a>和<a href="http://paulhammant.com/2013/03/13/facebook-tbd-take-2/" target="_blank" rel="noopener">Facebook</a>的单主干实践。</li><li>了解<a href="http://scottchacon.com/2011/08/31/github-flow.html" target="_blank" rel="noopener">GitHub flow</a>的更多内容。</li><li>了解<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">git-flow</a>的更多内容。</li><li>了解 Maven<a href="http://jgitflow.bitbucket.org/index.html" target="_blank" rel="noopener">JGit-Flow</a>插件的更多内容。</li><li><a href="http://www.ibm.com/developerworks/cn/java/" target="_blank" rel="noopener">developerWorks Java 技术专区</a>：这里有数百篇关于 Java 编程各个方面的文章。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择一个开源软件协议</title>
      <link href="/posts/5e27/"/>
      <url>/posts/5e27/</url>
      
        <content type="html"><![CDATA[<h1 id="选择一个开源软件协议"><a href="#选择一个开源软件协议" class="headerlink" title="选择一个开源软件协议"></a>选择一个开源软件协议</h1><p><a href="http://choosealicense.online/" target="_blank" rel="noopener">http://choosealicense.online/</a></p><p><img src="https://github.com/Delena1988/Pic/blob/master/2.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Travel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Travel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git把本地代码推送到远程仓库</title>
      <link href="/posts/3252/"/>
      <url>/posts/3252/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git init   // 初始化版本库</span><br><span class="line"></span><br><span class="line">git add .   // 添加文件到版本库（只是添加到缓存区），.代表添加文件夹下所有文件 </span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">"first commit"</span> // 把添加的文件提交到版本库，并填写提交备注</span><br><span class="line"></span><br><span class="line">git remote add origin $你的远程库地址$  // 把本地库与远程库关联</span><br><span class="line"></span><br><span class="line">git push -u origin master    // 第一次推送时</span><br><span class="line"></span><br><span class="line">git push origin master  // 第一次推送后，直接使用该命令即可推送修改</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo OPS安装</title>
      <link href="/posts/80fa/"/>
      <url>/posts/80fa/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/apache/incubator-dubbo-ops.git</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#配置文件为：</span><br><span class="line">dubbo-admin-server/src/main/resources/application.properties</span><br><span class="line">#主要的配置有：</span><br><span class="line">dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn --projects dubbo-admin-server spring-boot:run</span><br></pre></td></tr></table></figure><p>OR</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> dubbo-admin-distribution/target; </span><br><span class="line">java -jar dubbo-admin-0.1.jar</span><br></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://127.0.0.1:8080</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库范式</title>
      <link href="/posts/77e3/"/>
      <url>/posts/77e3/</url>
      
        <content type="html"><![CDATA[<p><strong>“范式（NF）”</strong>是符合某一种级别的关系模式的集合，表示一个关系内部各属性之间的联系的合理化程度”。</p><a id="more"></a><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>1NF： 字段是最小的的单元不可再分 2NF：满足1NF,表中的字段必须完全依赖于全部主键而非部分主键 (一般我们都会做到) 3NF：满足2NF,非主键外的所有字段必须互不依赖 4NF：满足3NF,消除表中的多值依赖</p><h3 id="第一范式（1NF）"><a href="#第一范式（1NF）" class="headerlink" title="第一范式（1NF）"></a><strong>第一范式（1NF）</strong></h3><p><strong>符合1NF的关系中的每个属性都不可再分。1NF是所有关系型数据库的最基本要求。</strong>(一范式就是属性不可分割)</p><h3 id="第二范式（2NF）"><a href="#第二范式（2NF）" class="headerlink" title="第二范式（2NF）"></a><strong>第二范式（2NF）</strong></h3><p><strong>2NF在1NF的基础之上，消除了非主属性对于码的部分函数依赖。</strong>(二范式就是要有主键)</p><p><strong>函数依赖</strong> ：若在一张表中，在属性（或属性组）X的值确定的情况下，必定能确定属性Y的值，那么就可以说Y函数依赖于X，写作 X → Y</p><p><strong>完全函数依赖</strong>：在一张表中，若 X → Y，且对于 X 的任何一个真子集（假如属性组 X 包含超过一个属性的话），X ‘ → Y 不成立，那么我们称 Y 对于 X<strong>完全函数依赖</strong>，记作</p><p>$$<br>X{F \over }&gt;Y<br>$$</p><p><strong>部分函数依赖</strong>：假如 Y 函数依赖于 X，但同时 Y 并不完全函数依赖于 X，那么我们就称 Y 部分函数依赖于 X，记作</p><p>$$<br>X{P\over}&gt;Y<br>$$</p><p><strong>传递函数依赖</strong>：假如 Z 函数依赖于 Y，且 Y 函数依赖于 X（『Y 不包含于 X，且 X 不函数依赖于 Y』这个前提），那么我们就称 Z 传递函数依赖于 X ，记作</p><p>$$<br>X{T\over}&gt;Z<br>$$</p><p><strong>码</strong>：设 K 为某表中的一个属性或属性组，若除 K 之外的所有属性都完全函数依赖于 K（这个“完全”不要漏了），那么我们称 K 为<strong>候选码</strong>，简称为<strong>码</strong></p><p><strong>非主属性</strong>：</p><h3 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a><strong>第三范式（3NF）</strong></h3><p><strong>3NF在2NF的基础之上，消除了非主属性对于码的传递函数依赖。</strong>(三范式就是要消除传递依赖)</p><p><a href="https://link.zhihu.com/?target=http%3A//www.cnblogs.com/CareySon/archive/2010/02/16/1668803.html" target="_blank" rel="noopener">数据库范式那些事</a></p>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iproute2 对决 net-tools</title>
      <link href="/posts/b82b/"/>
      <url>/posts/b82b/</url>
      
        <content type="html"><![CDATA[<p>如今很多系统管理员依然通过组合使用诸如ifconfig、route、arp和netstat等命令行工具（统称为net-tools）来配置网络功能，解决网络故障。net-tools起源于BSD的TCP/IP工具箱，后来成为老版本Linux内核中配置网络功能的工具。<strong>但自2001年起，Linux社区已经对其停止维护。</strong>同时，一些Linux发行版比如Arch Linux和CentOS/RHEL 7则已经完全抛弃了net-tools，只支持iproute2。</p><a id="more"></a><h3 id="显示所有已连接的网络接口"><a href="#显示所有已连接的网络接口" class="headerlink" title="显示所有已连接的网络接口"></a>显示所有已连接的网络接口</h3><p>使用<strong>net-tools</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig -a</span><br></pre></td></tr></table></figure><p>使用<strong>iproute2</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ip link show</span><br></pre></td></tr></table></figure><h3 id="激活或停用网络接口"><a href="#激活或停用网络接口" class="headerlink" title="激活或停用网络接口"></a>激活或停用网络接口</h3><p>使用这些命令来激活或停用某个指定的网络接口。</p><p>使用<strong>net-tools</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifconfig eth1 up</span><br><span class="line">$ sudo ifconfig eth1 down</span><br></pre></td></tr></table></figure><p>使用<strong>iproute2</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ip link <span class="built_in">set</span> down eth1</span><br><span class="line">$ sudo ip link <span class="built_in">set</span> up eth1</span><br></pre></td></tr></table></figure><h3 id="为网络接口分配IPv4地址"><a href="#为网络接口分配IPv4地址" class="headerlink" title="为网络接口分配IPv4地址"></a>为网络接口分配IPv4地址</h3><p>使用这些命令配置网络接口的IPv4地址。</p><p>使用<strong>net-tools</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifconfig eth1 10.0.0.1/24</span><br></pre></td></tr></table></figure><p>使用<strong>iproute2</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ip addr add 10.0.0.1/24 dev eth1</span><br></pre></td></tr></table></figure><p>值得注意的是，可以使用iproute2给同一个接口分配多个IP地址，ifconfig则无法这么做。使用ifconfig的变通方案是使用<a href="http://xmodulo.com/2013/02/how-to-assign-multiple-ip-addresses-to-one-network-interface-on-centos.html" target="_blank" rel="noopener">IP别名</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ip addr add 10.0.0.1/24 broadcast 10.0.0.255 dev eth1</span><br><span class="line">$ sudo ip addr add 10.0.0.2/24 broadcast 10.0.0.255 dev eth1</span><br><span class="line">$ sudo ip addr add 10.0.0.3/24 broadcast 10.0.0.255 dev eth1</span><br></pre></td></tr></table></figure><h3 id="移除网络接口的IPv4地址"><a href="#移除网络接口的IPv4地址" class="headerlink" title="移除网络接口的IPv4地址"></a>移除网络接口的IPv4地址</h3><p>就IP地址的移除而言，除了给接口分配全0地址外，net-tools没有提供任何合适的方法来移除网络接口的IPv4地址。相反，iproute2则能很好地完全。</p><p>使用<strong>net-tools</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifconfig eth1 0</span><br></pre></td></tr></table></figure><p>使用<strong>iproute2</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ip addr del 10.0.0.1/24 dev eth1</span><br></pre></td></tr></table></figure><h3 id="显示网络接口的IPv4地址"><a href="#显示网络接口的IPv4地址" class="headerlink" title="显示网络接口的IPv4地址"></a>显示网络接口的IPv4地址</h3><p>按照如下操作可查看某个指定网络接口的IPv4地址。</p><p>使用<strong>net-tools</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig eth1</span><br></pre></td></tr></table></figure><p>使用<strong>iproute2</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ip addr show dev eth1</span><br></pre></td></tr></table></figure><p>同样，如果接口分配了多个IP地址，iproute2会显示出所有地址，而net-tools只能显示一个IP地址。</p><h3 id="为网络接口分配IPv6地址"><a href="#为网络接口分配IPv6地址" class="headerlink" title="为网络接口分配IPv6地址"></a>为网络接口分配IPv6地址</h3><p>使用这些命令为网络接口添加IPv6地址。net-tools和iproute2都允许用户为一个接口添加多个IPv6地址。</p><p>使用<strong>net-tools</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifconfig eth1 inet6 add 2002:0db5:0:f102::1/64</span><br><span class="line">$ sudo ifconfig eth1 inet6 add 2003:0db5:0:f102::1/64</span><br></pre></td></tr></table></figure><p>使用<strong>iproute2</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ip -6 addr add 2002:0db5:0:f102::1/64 dev eth1</span><br><span class="line">$ sudo ip -6 addr add 2003:0db5:0:f102::1/64 dev eth1</span><br></pre></td></tr></table></figure><h3 id="显示网络接口的IPv6地址"><a href="#显示网络接口的IPv6地址" class="headerlink" title="显示网络接口的IPv6地址"></a>显示网络接口的IPv6地址</h3><p>按照如下操作可显示某个指定网络接口的IPv6地址。net-tools和iproute2都可以显示出所有已分配的IPv6地址。</p><p>使用<strong>net-tools</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig eth1</span><br></pre></td></tr></table></figure><p>使用<strong>iproute2</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ip -6 addr show dev eth1</span><br></pre></td></tr></table></figure><h3 id="移除网络设备的IPv6地址"><a href="#移除网络设备的IPv6地址" class="headerlink" title="移除网络设备的IPv6地址"></a>移除网络设备的IPv6地址</h3><p>使用这些命令可移除接口中不必要的IPv6地址。</p><p>使用<strong>net-tools</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifconfig eth1 inet6 del 2002:0db5:0:f102::1/64</span><br></pre></td></tr></table></figure><p>使用<strong>iproute2</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ip -6 addr del 2002:0db5:0:f102::1/64 dev eth1</span><br></pre></td></tr></table></figure><h3 id="改变网络接口的MAC地址"><a href="#改变网络接口的MAC地址" class="headerlink" title="改变网络接口的MAC地址"></a>改变网络接口的MAC地址</h3><p>使用下面的命令可<a href="http://xmodulo.com/2014/02/spoof-mac-address-network-interface-linux.html" target="_blank" rel="noopener">篡改网络接口的MAC地址</a>，请注意在更改MAC地址前，需要停用接口。</p><p>使用<strong>net-tools</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifconfig eth1 hw ether 08:00:27:75:2a:66</span><br></pre></td></tr></table></figure><p>使用<strong>iproute2</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ip link <span class="built_in">set</span> dev eth1 address 08:00:27:75:2a:67</span><br></pre></td></tr></table></figure><h3 id="查看IP路由表"><a href="#查看IP路由表" class="headerlink" title="查看IP路由表"></a>查看IP路由表</h3><p>net-tools中有两个选择来显示内核的IP路由表：route和netstat。在iproute2中，使用命令ip route。</p><p>使用<strong>net-tools</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ route -n</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -rn</span><br></pre></td></tr></table></figure><p>使用<strong>iproute2</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ip route show</span><br></pre></td></tr></table></figure><h3 id="添加和修改默认路由"><a href="#添加和修改默认路由" class="headerlink" title="添加和修改默认路由"></a>添加和修改默认路由</h3><p>这里的命令用来添加或修改内核IP路由表中的默认路由规则。请注意在net-tools中可通过添加新的默认路由、删除旧的默认路由来实现修改默认路由。在iproute2使用ip route命令来代替。</p><p>使用<strong>net-tools</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo route add default gw 192.168.1.2 eth0</span><br><span class="line">$ sudo route del default gw 192.168.1.1 eth0</span><br></pre></td></tr></table></figure><p>使用<strong>iproute2</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ip route add default via 192.168.1.2 dev eth0</span><br><span class="line">$ sudo ip route replace default via 192.168.1.2 dev eth0</span><br></pre></td></tr></table></figure><h3 id="添加和移除静态路由"><a href="#添加和移除静态路由" class="headerlink" title="添加和移除静态路由"></a>添加和移除静态路由</h3><p>使用下面命令添加或移除一个静态路由。</p><p>使用<strong>net-tools</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo route add -net 172.16.32.0/24 gw 192.168.1.1 dev eth0</span><br><span class="line">$ sudo route del -net 172.16.32.0/24</span><br></pre></td></tr></table></figure><p>使用<strong>iproute2</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ip route add 172.16.32.0/24 via 192.168.1.1 dev eth0</span><br><span class="line">$ sudo ip route del 172.16.32.0/24</span><br></pre></td></tr></table></figure><h3 id="查看套接字统计信息"><a href="#查看套接字统计信息" class="headerlink" title="查看套接字统计信息"></a>查看套接字统计信息</h3><p>这里的命令用来查看套接字统计信息（比如活跃或监听状态的TCP/UDP套接字）。</p><p>使用<strong>net-tools</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ netstat</span><br><span class="line">$ netstat -l</span><br></pre></td></tr></table></figure><p>使用<strong>iproute2</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ss</span><br><span class="line">$ ss -l</span><br></pre></td></tr></table></figure><h3 id="查看ARP表"><a href="#查看ARP表" class="headerlink" title="查看ARP表"></a>查看ARP表</h3><p>使用这些命令显示内核的ARP表。</p><p>使用<strong>net-tools</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ arp -an</span><br></pre></td></tr></table></figure><p>使用<strong>iproute2</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ip neigh</span><br></pre></td></tr></table></figure><h3 id="添加或删除静态ARP项"><a href="#添加或删除静态ARP项" class="headerlink" title="添加或删除静态ARP项"></a>添加或删除静态ARP项</h3><p>按照如下操作在本地ARP表中添加或删除一个<a href="http://xmodulo.com/2013/02/how-to-add-or-remove-static-arp-entry-on-linux.html" target="_blank" rel="noopener">静态ARP项</a>。</p><p>使用<strong>net-tools</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo arp -s 192.168.1.100 00:0c:29:c0:5a:ef</span><br><span class="line">$ sudo arp -d 192.168.1.100</span><br></pre></td></tr></table></figure><p>使用<strong>iproute2</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ip neigh add 192.168.1.100 lladdr 00:0c:29:c0:5a:ef dev eth0</span><br><span class="line">$ sudo ip neigh del 192.168.1.100 dev eth0</span><br></pre></td></tr></table></figure><h3 id="添加、删除或查看多播地址"><a href="#添加、删除或查看多播地址" class="headerlink" title="添加、删除或查看多播地址"></a>添加、删除或查看多播地址</h3><p>使用下面的命令配置或查看网络接口上的多播地址。</p><p>使用<strong>net-tools</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ipmaddr add 33:44:00:00:00:01 dev eth0</span><br><span class="line">$ sudo ipmaddr del 33:44:00:00:00:01 dev eth0</span><br><span class="line">$ ipmaddr show dev eth0</span><br><span class="line">$ netstat -g</span><br></pre></td></tr></table></figure><p>使用<strong>iproute2</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ip maddr add 33:44:00:00:00:01 dev eth0</span><br><span class="line">$ sudo ip maddr del 33:44:00:00:00:01 dev eth0</span><br><span class="line">$ ip maddr list dev eth0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP状态码</title>
      <link href="/posts/6440/"/>
      <url>/posts/6440/</url>
      
        <content type="html"><![CDATA[<p>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。</p><a id="more"></a><h3 id="HTTP状态码分类"><a href="#HTTP状态码分类" class="headerlink" title="HTTP状态码分类"></a>HTTP状态码分类</h3><table><thead><tr><th>分类</th><th>分类描述</th></tr></thead><tbody><tr><td>1**</td><td>信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td>2**</td><td>成功，操作被成功接收并处理</td></tr><tr><td>3**</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>4**</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>5**</td><td>服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><h3 id="HTTP状态码列表"><a href="#HTTP状态码列表" class="headerlink" title="HTTP状态码列表"></a>HTTP状态码列表</h3><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>中文描述</th></tr></thead><tbody><tr><td>100</td><td>Continue</td><td>继续。<a href="http://www.dreamdu.com/webbuild/client_vs_server/" target="_blank" rel="noopener">客户端</a>应继续其请求</td></tr><tr><td>101</td><td>Switching Protocols</td><td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td></td><td></td><td></td></tr><tr><td>200</td><td>OK</td><td>请求成功。一般用于GET与POST请求</td></tr><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源</td></tr><tr><td>202</td><td>Accepted</td><td>已接受。已经接受请求，但未处理完成</td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td>204</td><td>No Content</td><td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td>205</td><td>Reset Content</td><td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td>206</td><td>Partial Content</td><td>部分内容。服务器成功处理了部分GET请求</td></tr><tr><td></td><td></td><td></td></tr><tr><td>300</td><td>Multiple Choices</td><td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>303</td><td>See Other</td><td>查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>305</td><td>Use Proxy</td><td>使用代理。所请求的资源必须通过代理访问</td></tr><tr><td>306</td><td>Unused</td><td>已经被废弃的HTTP状态码</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td></td><td></td><td></td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求要求用户的身份认证</td></tr><tr><td>402</td><td>Payment Required</td><td>保留，将来使用</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>客户端请求中的方法被禁止</td></tr><tr><td>406</td><td>Not Acceptable</td><td>服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td>407</td><td>Proxy Authentication Required</td><td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td>408</td><td>Request Time-out</td><td>服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td>409</td><td>Conflict</td><td>服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td>410</td><td>Gone</td><td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td>411</td><td>Length Required</td><td>服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td>412</td><td>Precondition Failed</td><td>客户端请求信息的先决条件错误</td></tr><tr><td>413</td><td>Request Entity Too Large</td><td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td>414</td><td>Request-URI Too Large</td><td>请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td>415</td><td>Unsupported Media Type</td><td>服务器无法处理请求附带的媒体格式</td></tr><tr><td>416</td><td>Requested range not satisfiable</td><td>客户端请求的范围无效</td></tr><tr><td>417</td><td>Expectation Failed</td><td>服务器无法满足Expect的请求头信息</td></tr><tr><td></td><td></td><td></td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td>502</td><td>Bad Gateway</td><td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td>504</td><td>Gateway Time-out</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td>505</td><td>HTTP Version not supported</td><td>服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven Scope</title>
      <link href="/posts/7b73/"/>
      <url>/posts/7b73/</url>
      
        <content type="html"><![CDATA[<h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><p><strong>默认就是compile</strong>，什么都不配置也就是意味着compile。compile表示被依赖项目需要参与当前项目的编译，当然后续的测试，运行周期也参与其中，是一个比较强的依赖。打包的时候通常需要包含进去。</p><a id="more"></a><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>scope为test表示依赖项目仅仅参与测试相关的工作，包括测试代码的编译，执行。比较典型的如junit。</p><h3 id="runntime"><a href="#runntime" class="headerlink" title="runntime"></a>runntime</h3><p>runntime表示被依赖项目无需参与项目的编译，不过后期的测试和运行周期需要其参与。与compile相比，跳过编译而已，说实话在终端的项目（非开源，企业内部系统）中，和compile区别不是很大。比较常见的如JSR×××的实现，对应的API jar是compile的，具体实现是runtime的，compile只需要知道接口就足够了。oracle jdbc驱动架包就是一个很好的例子，一般scope为runntime。另外runntime的依赖通常和optional搭配使用，optional为true。我可以用A实现，也可以用B实现。</p><h3 id="provided"><a href="#provided" class="headerlink" title="provided"></a>provided</h3><p>provided意味着打包的时候可以不用包进去，别的设施(Web Container)会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。相当于compile，但是在打包阶段做了exclude的动作。</p><h3 id="system"><a href="#system" class="headerlink" title="system"></a>system</h3><p>从参与度来说，也provided相同，不过被依赖项不会从maven仓库抓，而是从本地文件系统拿，一定需<strong>要配合systemPath属性使用</strong>。</p><h3 id="Dependency-Scope"><a href="#Dependency-Scope" class="headerlink" title="Dependency Scope"></a>Dependency Scope</h3><ul><li><p><strong>compile</strong>  </p><p>This is the default scope, used if none is specified. Compile dependencies are available in all classpaths of a project. Furthermore, those dependencies are propagated to dependent projects.</p></li><li><p><strong>provided</strong>  </p><p>This is much like  compile, but indicates you expect the JDK or a container to provide the dependency at runtime. For example, when building a web application for the Java Enterprise Edition, you would set the dependency on the Servlet API and related Java EE APIs to scope  provided  because the web container provides those classes. This scope is only available on the compilation and test classpath, and is not transitive.</p></li><li><p><strong>runtime</strong>  </p><p>This scope indicates that the dependency is not required for compilation, but is for execution. It is in the runtime and test classpaths, but not the compile classpath.</p></li><li><p><strong>test</strong>  </p><p>This scope indicates that the dependency is not required for normal use of the application, and is only available for the test compilation and execution phases. This scope is not transitive.</p></li><li><p><strong>system</strong>  </p><p>This scope is similar to  provided  except that you have to provide the JAR which contains it explicitly. The artifact is always available and is not looked up in a repository.</p></li><li><p><strong>import</strong>  </p><p>This scope is only supported on a dependency of type  pom  in the  <dependencymanagement>  section. It indicates the dependency to be replaced with the effective list of dependencies in the specified POM’s  <dependencymanagement>  section. Since they are replaced, dependencies with a scope of  import  do not actually participate in limiting the transitivity of a dependency.</dependencymanagement></dependencymanagement></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebSocket</title>
      <link href="/posts/67c3/"/>
      <url>/posts/67c3/</url>
      
        <content type="html"><![CDATA[<p><strong>WebSocket</strong>是一种<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" title="网络传输协议" target="_blank" rel="noopener">通信协议</a>，可在单个<a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE" title="传输控制协议" target="_blank" rel="noopener">TCP</a>连接上进行<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E9%9B%99%E5%B7%A5" title="全双工" target="_blank" rel="noopener">全双工</a>通信。</p><a id="more"></a><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><p>较少的控制开销。在连接创建后，服务器和客户端之间交换数据时，用于协议控制的数据包头部相对较小。在不包含扩展的情况下，对于服务器到客户端的内容，此头部大小只有2至10<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82" title="字节" target="_blank" rel="noopener">字节</a>（和数据包长度有关）；对于客户端到服务器的内容，此头部还需要加上额外的4字节的<a href="https://zh.wikipedia.org/wiki/%E6%8E%A9%E7%A0%81" title="掩码" target="_blank" rel="noopener">掩码</a>。相对于HTTP请求每次都要携带完整的头部，此项开销显著减少了。</p></li><li><p>更强的实时性。由于协议是全双工的，所以服务器可以随时主动给客户端下发数据。相对于HTTP请求需要等待客户端发起请求服务端才能响应，延迟明显更少；即使是和Comet等类似的<a href="https://zh.wikipedia.org/w/index.php?title=%E9%95%BF%E8%BD%AE%E8%AF%A2&amp;action=edit&amp;redlink=1" title="长轮询（页面不存在）" target="_blank" rel="noopener">长轮询</a>比较，其也能在短时间内更多次地传递数据。</p></li><li><p>保持连接状态。与HTTP不同的是，Websocket需要先创建连接，这就使得其成为一种有状态的协议，之后通信时可以省略部分状态信息。而HTTP请求可能需要在每个请求都携带状态信息（如身份认证等）。</p></li><li><p>更好的二进制支持。Websocket定义了<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6" title="二进制" target="_blank" rel="noopener">二进制</a>帧，相对HTTP，可以更轻松地处理二进制内容。</p></li><li><p>可以支持扩展。Websocket定义了扩展，用户可以扩展协议、实现部分自定义的子协议。如部分浏览器支持<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9" title="数据压缩" target="_blank" rel="noopener">压缩</a>等。</p></li><li><p>更好的压缩效果。相对于<a href="https://zh.wikipedia.org/wiki/HTTP%E5%8E%8B%E7%BC%A9" title="HTTP压缩" target="_blank" rel="noopener">HTTP压缩</a>，Websocket在适当的扩展支持下，可以沿用之前内容的<a href="https://zh.wikipedia.org/wiki/%E4%B8%8A%E4%B8%8B%E6%96%87" title="上下文" target="_blank" rel="noopener">上下文</a>，在传递类似的数据时，可以显著地提高压缩率。</p></li></ul><h3 id="握手协议"><a href="#握手协议" class="headerlink" title="握手协议"></a>握手协议</h3><p>WebSocket 是独立的、创建在 TCP 上的协议。</p><p>Websocket 通过  <a href="https://zh.wikipedia.org/wiki/HTTP" title="HTTP" target="_blank" rel="noopener">HTTP</a>/1.1 协议的101<a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" title="HTTP状态码" target="_blank" rel="noopener">状态码</a>进行握手。</p><p>为了创建Websocket连接，需要通过浏览器发出请求，之后服务器进行回应，这个过程通常称为“<a href="https://zh.wikipedia.org/wiki/%E6%8F%A1%E6%89%8B_(%E6%8A%80%E6%9C%AF" target="_blank" rel="noopener">握手</a> “握手 (技术)”)”（handshaking）。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>一个典型的Websocket握手请求如下：</p><p>客户端请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Host: example.com</span><br><span class="line">Origin: http://example.com</span><br><span class="line">Sec-WebSocket-Key: sN9cRrP/n9NdMgdcy2VJFQ==</span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure><p>服务器回应</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: fFBooB7FAkLlXgRSz0BT3v4hq5s=</span><br><span class="line">Sec-WebSocket-Location: ws://example.com/</span><br></pre></td></tr></table></figure><h3 id="字段说明"><a href="#字段说明" class="headerlink" title="字段说明"></a>字段说明</h3><ul><li>Connection必须设置Upgrade，表示客户端希望连接升级。</li><li>Upgrade字段必须设置Websocket，表示希望升级到Websocket协议。</li><li>Sec-WebSocket-Key是随机的字符串，服务器端会用这些数据来构造出一个SHA-1的信息摘要。把“Sec-WebSocket-Key”加上一个特殊字符串“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”，然后计算<a href="https://zh.wikipedia.org/wiki/SHA-1" title="SHA-1" target="_blank" rel="noopener">SHA-1</a>摘要，之后进行<a href="https://zh.wikipedia.org/w/index.php?title=BASE-64&amp;action=edit&amp;redlink=1" title="BASE-64（页面不存在）" target="_blank" rel="noopener">BASE-64</a>编码，将结果做为“Sec-WebSocket-Accept”头的值，返回给客户端。如此操作，可以尽量避免普通HTTP请求被误认为Websocket协议。</li><li>Sec-WebSocket-Version 表示支持的Websocket版本。RFC6455要求使用的版本是13，之前草案的版本均应当弃用。</li><li>Origin字段是可选的，通常用来表示在浏览器中发起此Websocket连接所在的页面，类似于<a href="https://zh.wikipedia.org/wiki/HTTP%E6%9D%A5%E6%BA%90%E5%9C%B0%E5%9D%80" title="HTTP来源地址" target="_blank" rel="noopener">Referer</a>。但是，与Referer不同的是，Origin只包含了协议和主机名称。</li><li>其他一些定义在HTTP协议中的字段，如<a href="https://zh.wikipedia.org/wiki/Cookie" title="Cookie" target="_blank" rel="noopener">Cookie</a>等，也可以在Websocket中使用。</li></ul><h3 id="其他伪长链接方式"><a href="#其他伪长链接方式" class="headerlink" title="其他伪长链接方式"></a>其他伪长链接方式</h3><h5 id="AJAX-轮询"><a href="#AJAX-轮询" class="headerlink" title="AJAX 轮询"></a>AJAX 轮询</h5><p>浏览器隔个几秒就发送一次请求。需要服务器有很快的处理速度和资源。</p><h5 id="Long-Pull"><a href="#Long-Pull" class="headerlink" title="Long Pull"></a>Long Pull</h5><p>原理跟 ajax轮询 差不多，都是采用轮询的方式，不过采取的是阻塞模型。需要有很高的并发。</p>]]></content>
      
      
      <categories>
          
          <category> WebSocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloud Toolkit之Command编写指南</title>
      <link href="/posts/671a/"/>
      <url>/posts/671a/</url>
      
        <content type="html"><![CDATA[<p>Cloud Toolkit 帮助开发者将本地应用程序一键部署到阿里云 ECS、EDAS 和 Kubernetes 和任意服务器中去。</p><a id="more"></a><h3 id="Spring-Boot-应用"><a href="#Spring-Boot-应用" class="headerlink" title="Spring Boot 应用"></a>Spring Boot 应用</h3><p><img src="https://i.loli.net/2019/05/17/5cde002f2d3b822696.png" alt="5cde002f2d3b822696"></p><p> <img src alt></p><p>start.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">knowledge_pwd=/home/jhuser/knowledge</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$knowledge_pwd</span></span><br><span class="line"><span class="built_in">echo</span> starting</span><br><span class="line">nohup jdk1.8.0_151/bin/java -jar knowledge-aggregator-1.0-SNAPSHOT.jar &gt; nohup.out 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>stop.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">PID=$(ps -ef | grep knowledge-aggregator-1.0-SNAPSHOT.jar | grep -v grep | awk <span class="string">'&#123; print $2 &#125;'</span>)</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$PID</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> knowledge is already stopped</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="built_in">kill</span> <span class="variable">$PID</span></span><br><span class="line">    <span class="built_in">kill</span> <span class="variable">$PID</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>restart.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> stop knowledge</span><br><span class="line"><span class="built_in">source</span> /home/jhuser/knowledge/stop.sh</span><br><span class="line"><span class="built_in">echo</span> start knowledge</span><br><span class="line"><span class="built_in">source</span> /home/jhuser/knowledge/start.sh</span><br></pre></td></tr></table></figure><h3 id="标准的-Java-Web-Tomcat-应用"><a href="#标准的-Java-Web-Tomcat-应用" class="headerlink" title="标准的 Java Web Tomcat 应用"></a>标准的 Java Web Tomcat 应用</h3><p><img src="https://i.loli.net/2019/01/18/5c41360fb210f.png" alt="5c41360fb210f"><img src="https://i.loli.net/2019/01/18/5c41360fb210f.png" alt="5c41360fb210f"></p><p>restart-tomcat.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"stop hug_interview....."</span></span><br><span class="line">PID=$(ps -ef | grep tomcat_2.0/bin | grep -v grep | awk <span class="string">'&#123; print $2 &#125;'</span>)</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$PID</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> hug_interview is already stopped</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="built_in">kill</span> <span class="variable">$PID</span></span><br><span class="line"> <span class="built_in">kill</span> <span class="variable">$PID</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"remove old hug_interview"</span></span><br><span class="line">rm -rf /home/hug_interview/2.0/tomcat_2.0/webapps/hug_interview</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"start hug_interview....."</span></span><br><span class="line">sh /home/hug_interview/2.0/tomcat_2.0/bin/startup.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile相关命令介绍</title>
      <link href="/posts/3e37/"/>
      <url>/posts/3e37/</url>
      
        <content type="html"><![CDATA[<p>使用<code>docker build</code>命令或使用<code>Docker Hub</code>的自动构建功能构建Docker镜像时，都需要一个<code>Dockerfile</code>文件。<code>Dockerfile</code>文件是一个由一系列构建指令组成的文本文件，<code>docker build</code>命令会根据这些构建指令完成Docker镜像的构建。本文将会介绍<code>Dockerfile</code>文件，及其中使用的构建指令。</p><a id="more"></a><h3 id="Dockerfile文件使用"><a href="#Dockerfile文件使用" class="headerlink" title="Dockerfile文件使用"></a>Dockerfile文件使用</h3><p><code>docker build</code>命令会根据<code>Dockerfile</code>文件及上下文构建新Docker镜像。构建上下文是指<code>Dockerfile</code>所在的本地路径或一个<code>URL</code>（<code>Git</code>仓库地址）。构建上下文环境会被递归处理，所以，构建所指定的路径还包括了子目录，而<code>URL</code>还包括了其中指定的子模块。</p><p><strong>构建镜像</strong></p><p>将当前目录做为构建上下文时，可以像下面这样使用<code>docker build</code>命令构建镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker build .</span><br><span class="line">Sending build context to Docker daemon  6.51 MB</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><em>说明：</em>构建会在Docker后台守护进程（daemon）中执行，而不是<code>CLI</code>中。构建前，构建进程会将全部内容（递归）发送到守护进程。大多情况下，应该将一个空目录作为构建上下文环境，并将<code>Dockerfile</code>文件放在该目录下。</p><p>在构建上下文中使用的<code>Dockerfile</code>文件，是一个构建指令文件。为了提高构建性能，可以通过<code>.dockerignore</code>文件排除上下文目录下，不需要的文件和目录。</p><p><code>Dockerfile</code>一般位于构建上下文的根目录下，也可以通过<code>-f</code>指定该文件的位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -f /path/to/a/Dockerfile .</span><br></pre></td></tr></table></figure><p>构建时，还可以通过<code>-t</code>参数指定构建成后，镜像的<em>仓库</em>、<em>标签</em>等：</p><p><strong>镜像标签</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t shykes/myapp \.</span><br></pre></td></tr></table></figure><p>如果存在多个仓库下，或使用多个镜像标签，就可以使用多个<code>-t</code>参数：</p><p>$ docker build -t shykes/myapp:1.0.2 -t shykes/myapp:latest .</p><p>在Docker守护进程执行<code>Dockerfile</code>中的指令前，首先会对<code>Dockerfile</code>进行语法检查，有语法错误时会返回：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t <span class="built_in">test</span>/myapp \.</span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line">Error response from daemon: Unknown instruction: RUNCMD</span><br></pre></td></tr></table></figure><p><strong>缓存</strong></p><p>Docker 守护进程会一条一条的执行<code>Dockerfile</code>中的指令，而且会在每一步提交并生成一个新镜像，最后会输出最终镜像的ID。生成完成后，Docker 守护进程会自动清理你发送的上下文。</p><p><code>Dockerfile</code>文件中的每条指令会被独立执行，并会创建一个新镜像，<code>RUN cd /tmp</code>等命令不会对下条指令产生影响。</p><p>Docker 会重用已生成的中间镜像，以加速<code>docker build</code>的构建速度。以下是一个使用了缓存镜像的执行过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t svendowideit/ambassador \.</span><br><span class="line">Sending build context to Docker daemon 15.36 kB</span><br><span class="line">Step 1/4 : FROM alpine:3.2</span><br><span class="line"> ---&gt; 31f630c65071</span><br><span class="line"></span><br><span class="line">Step 2/4 : MAINTAINER SvenDowideit@home.org.au</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 2a1c91448f5f</span><br><span class="line">Step 3/4 : RUN apk update &amp;&amp; apk add socat &amp;&amp; rm -r /var/cache/</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 21ed6e7fbb73</span><br><span class="line">Step 4/4 : CMD env | grep _TCP= | (sed <span class="string">'s/.*_PORT_\([0-9]*\)_TCP=tcp:\/\/\(.*\):\(.*\)/socat -t 100000000 TCP4-LISTEN:\1,fork,reuseaddr TCP4:\2:\3 \&amp;/'</span> &amp;&amp; <span class="built_in">echo</span> <span class="built_in">wait</span>) | sh</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 7ea8aef582cc</span><br><span class="line">Successfully built 7ea8aef582cc</span><br></pre></td></tr></table></figure><p>构建缓存仅会使用本地父生成链上的镜像。如果不想使用本地缓存的镜像，也可以通过<code>--cache-from</code>指定缓存。指定后将再不使用本地生成的镜像链，而是从镜像仓库中下载。</p><h3 id="Dockerfile文件格式"><a href="#Dockerfile文件格式" class="headerlink" title="Dockerfile文件格式"></a>Dockerfile文件格式</h3><p><code>Dockerfile</code>文件格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comment</span></span><br><span class="line">INSTRUCTION arguments</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释</span></span><br><span class="line">指令 参数</span><br></pre></td></tr></table></figure><p><code>Dockerfile</code>文件中指令不区分大小写，但为了更易区分，约定使用<code>大写</code>形式。</p><p>Docker 会依次执行<code>Dockerfile</code>中的指令，文件中的第一条指令必须是<code>FROM</code>，<code>FROM</code>指令用于指定一个基础镜像。</p><p>以<code>#</code>开头的行，Docker会认为是注释。但<code>#</code>出现在指令参数中时，则不是注释。如：</p><p># </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  Comment</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">'we are running some # of cool things'</span></span><br></pre></td></tr></table></figure><h3 id="Dockerfile中使用指令"><a href="#Dockerfile中使用指令" class="headerlink" title="Dockerfile中使用指令"></a>Dockerfile中使用指令</h3><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p><code>FROM</code>指令用于指定其后构建新镜像所使用的基础镜像。<code>FROM</code>指令必是<code>Dockerfile</code>文件中的首条命令，启动构建流程后，Docker将会基于该镜像构建新镜像，<code>FROM</code>后的命令也会基于这个基础镜像。</p><p><code>FROM</code>语法格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM &lt;image&gt;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM &lt;image&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM &lt;image&gt;:&lt;digest&gt;</span><br></pre></td></tr></table></figure><p>通过<code>FROM</code>指定的镜像，可以是任何有效的基础镜像。<code>FROM</code>有以下限制：</p><ul><li><code>FROM</code>必须是<code>Dockerfile</code>中第一条非注释命令</li><li>在一个<code>Dockerfile</code>文件中创建多个镜像时，<code>FROM</code>可以多次出现。只需在每个新命令<code>FROM</code>之前，记录提交上次的镜像ID。</li><li><code>tag</code>或<code>digest</code>是可选的，如果不使用这两个值时，会使用<code>latest</code>版本的基础镜像</li></ul><h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><p><code>RUN</code>用于在镜像容器中执行命令，其有以下两种命令执行方式：</p><p><strong><code>shell</code>执行</strong></p><p>在这种方式会在<code>shell</code>中执行命令，Linux下默认使用<code>/bin/sh -c</code>，Windows下使用<code>cmd /S /C</code>。</p><p><em>注意：</em>通过<a href="https://itbilu.com/linux/docker/VyhM5wPuz.html#cmd-shell" target="_blank" rel="noopener"><code>SHELL</code></a>命令修改<code>RUN</code>所使用的默认<code>shell</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure><p><strong><code>exec</code>执行</strong></p><p>RUN [“executable”, “param1”, “param2”]</p><p><code>RUN</code>可以执行任何命令，然后在当前镜像上创建一个新层并提交。提交后的结果镜像将会用在<code>Dockerfile</code>文件的下一步。</p><p>通过<code>RUN</code>执行多条命令时，可以通过<code>\</code>换行执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUN /bin/bash -c <span class="string">'source $HOME/.bashrc; \</span></span><br><span class="line"><span class="string">echo $HOME'</span></span><br></pre></td></tr></table></figure><p>也可以在同一行中，通过分号分隔命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN /bin/bash -c <span class="string">'source $HOME/.bashrc; echo $HOME'</span></span><br></pre></td></tr></table></figure><p><code>RUN</code>指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定<code>--no-cache</code>参数，如：<code>docker build --no-cache</code>。</p><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p><code>CMD</code>用于指定在容器启动时所要执行的命令。<code>CMD</code>有以下三种格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CMD [<span class="string">"executable"</span>,<span class="string">"param1"</span>,<span class="string">"param2"</span>]</span><br><span class="line">CMD [<span class="string">"param1"</span>,<span class="string">"param2"</span>]</span><br><span class="line">CMD <span class="built_in">command</span> param1 param2</span><br></pre></td></tr></table></figure><p><code>CMD</code>不同于<code>RUN</code>，<code>CMD</code>用于指定在容器启动时所要执行的命令，而<code>RUN</code>用于指定镜像构建时所要执行的命令。</p><p><code>CMD</code>与<code>RUN</code>在功能实现上也有相似之处。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -i itbilu/static_web_server /bin/<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd [<span class="string">"/bin/true"</span>]</span><br></pre></td></tr></table></figure><p><code>CMD</code>在<code>Dockerfile</code>文件中仅可指定一次，指定多次时，会覆盖前的指令。</p><p>另外，<code>docker run</code>命令也会覆盖<code>Dockerfile</code>中<code>CMD</code>命令。如果<code>docker run</code>运行容器时，使用了<code>Dockerfile</code>中<code>CMD</code>相同的命令，就会覆盖<code>Dockerfile</code>中的<code>CMD</code>命令。</p><p>如，我们在构建镜像的<code>Dockerfile</code>文件中使用了如下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD [<span class="string">"/bin/bash"</span>]</span><br></pre></td></tr></table></figure><p>使用<code>docker build</code>构建一个新镜像，镜像名为<code>itbilu/test</code>。构建完成后，使用这个镜像运行一个新容器，运行效果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -i -t itbilu/<span class="built_in">test</span></span><br><span class="line">root@e3597c81aef4:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>在使用<code>docker run</code>运行容器时，我们并没有在命令结尾指定会在容器中执行的命令，这时Docker就会执行在<code>Dockerfile</code>的<code>CMD</code>中指定的命令。</p><p>如果不想使用<code>CMD</code>中指定的命令，就可以在<code>docker run</code>命令的结尾指定所要运行的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -i -t itbilu/<span class="built_in">test</span> /bin/ps</span><br><span class="line"> PID TTY TIME CMD</span><br><span class="line"> 1 ? 00:00:00 ps</span><br></pre></td></tr></table></figure><p>这时，<code>docker run</code>结尾指定的<code>/bin/ps</code>命令覆盖了<code>Dockerfile</code>的<code>CMD</code>中指定的命令。</p><h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p><code>ENTRYPOINT</code>用于给容器配置一个可执行程序。也就是说，每次使用镜像创建容器时，通过<code>ENTRYPOINT</code>指定的程序都会被设置为默认程序。<code>ENTRYPOINT</code>有以下两种形式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [<span class="string">"executable"</span>, <span class="string">"param1"</span>, <span class="string">"param2"</span>]</span><br><span class="line">ENTRYPOINT <span class="built_in">command</span> param1 param2</span><br></pre></td></tr></table></figure><p><code>ENTRYPOINT</code>与<code>CMD</code>非常类似，不同的是通过<code>docker run</code>执行的命令不会覆盖<code>ENTRYPOINT</code>，而<code>docker run</code>命令中指定的任何参数，都会被当做参数再次传递给<code>ENTRYPOINT</code>。<code>Dockerfile</code>中只允许有一个<code>ENTRYPOINT</code>命令，多指定时会覆盖前面的设置，而只执行最后的<code>ENTRYPOINT</code>指令。</p><p><code>docker run</code>运行容器时指定的参数都会被传递给<code>ENTRYPOINT</code>，且会覆盖<code>CMD</code>命令指定的参数。如，执行<code>docker run &lt;image&gt; -d</code>时，<code>-d</code>参数将被传递给入口点。</p><p>也可以通过<code>docker run --entrypoint</code>重写<code>ENTRYPOINT</code>入口点。</p><p>如：可以像下面这样指定一个容器执行程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [<span class="string">"/usr/bin/nginx"</span>]</span><br></pre></td></tr></table></figure><p>完整构建代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Version: 0.0.3</span></span><br><span class="line">FROM ubuntu:16.04</span><br><span class="line">MAINTAINER 何民三 <span class="string">"cn.liuht@gmail.com"</span></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y nginx</span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">'Hello World, 我是个容器'</span> \ </span><br><span class="line">   &gt; /var/www/html/index.html</span><br><span class="line">ENTRYPOINT [<span class="string">"/usr/sbin/nginx"</span>]</span><br><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure><p>使用<code>docker build</code>构建镜像，并将镜像指定为<code>itbilu/test</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker build -t=<span class="string">"itbilu/test"</span> .</span><br></pre></td></tr></table></figure><p>构建完成后，使用<code>itbilu/test</code>启动一个容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -i -t itbilu/<span class="built_in">test</span> -g <span class="string">"daemon off;"</span></span><br></pre></td></tr></table></figure><p>在运行容器时，我们使用了<code>-g &quot;daemon off;&quot;</code>，这个参数将会被传递给<code>ENTRYPOINT</code>，最终在容器中执行的命令为<code>/usr/sbin/nginx -g &quot;daemon off;&quot;</code>。</p><h4 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a><code>LABEL</code></h4><p><code>LABEL</code>用于为镜像添加元数据，元数以键值对的形式指定：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure><p>使用<code>LABEL</code>指定元数据时，一条<code>LABEL</code>指定可以指定一或多条元数据，指定多条元数据时不同元数据之间通过空格分隔。推荐将所有的元数据通过一条<code>LABEL</code>指令指定，以免生成过多的中间镜像。</p><p>如，通过<code>LABEL</code>指定一些元数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LABEL version=<span class="string">"1.0"</span> description=<span class="string">"这是一个Web服务器"</span> by=<span class="string">"IT笔录"</span></span><br></pre></td></tr></table></figure><p>指定后可以通过<code>docker inspect</code>查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> docker inspect itbilu/<span class="built_in">test</span></span><br><span class="line"><span class="string">"Labels"</span>: &#123;</span><br><span class="line"> <span class="string">"version"</span>: <span class="string">"1.0"</span>,</span><br><span class="line"> <span class="string">"description"</span>: <span class="string">"这是一个Web服务器"</span>,</span><br><span class="line"> <span class="string">"by"</span>: <span class="string">"IT笔录"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><em>注意；</em><code>Dockerfile</code>中还有个<code>MAINTAINER</code>命令，该命令用于指定镜像作者。但<code>MAINTAINER</code>并不推荐使用，更推荐使用<code>LABEL</code>来指定镜像作者。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LABEL maintainer=<span class="string">"itbilu.com"</span></span><br></pre></td></tr></table></figure><h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a><code>EXPOSE</code></h4><p><code>EXPOSE</code>用于指定容器在运行时监听的端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE &lt;port&gt; [&lt;port&gt;...]</span><br></pre></td></tr></table></figure><p><code>EXPOSE</code>并不会让容器的端口访问到主机。要使其可访问，需要在<code>docker run</code>运行容器时通过<code>-p</code>来发布这些端口，或通过<code>-P</code>参数来发布<code>EXPOSE</code>导出的所有端口。</p><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a><code>ENV</code></h4><p><code>ENV</code>用于设置环境变量，其有以下两种设置形式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line">ENV &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure><p>如，通过<code>ENV</code>设置一个环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENV ITBILU_PATH /home/itbilu/</span><br></pre></td></tr></table></figure><p>设置后，这个环境变量在<code>ENV</code>命令后都可以使用。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WORKERDIR <span class="variable">$ITBILU_PATH</span></span><br></pre></td></tr></table></figure><p>这些环境变量不仅可以构建镜像过程使用，使用该镜像创建的容器中也可以使用。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -i -t itbilu/<span class="built_in">test</span></span><br><span class="line"> root@196ca123c0c3:/<span class="comment"># cd $ITBILU_PATH</span></span><br><span class="line">root@196ca123c0c3:/home/itbilu<span class="comment">#</span></span><br></pre></td></tr></table></figure><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p><code>ADD</code>用于复制构建环境中的文件或目录到镜像中。其有以下两种使用方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ADD &lt;src&gt;... &lt;dest&gt;</span><br><span class="line">ADD [<span class="string">"&lt;src&gt;"</span>,... <span class="string">"&lt;dest&gt;"</span>]</span><br></pre></td></tr></table></figure><p>通过<code>ADD</code>复制文件时，需要通过<src>指定源文件位置，并通过<code>&lt;dest&gt;</code>来指定目标位置。<src>可以是一个构建上下文中的文件或目录，也可以是一个<code>URL</code>，但不能访问构建上下文之外的文件或目录。</src></src></p><p>如，通过<code>ADD</code>复制一个网络文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD http://wordpress.org/latest.zip <span class="variable">$ITBILU_PATH</span></span><br></pre></td></tr></table></figure><p>在上例中，<code>$ITBILU_PATH</code>是我们使用<code>ENV</code>指定的一个环境变量。</p><p>另外，如果使用的是本地归档文件（<code>gzip</code>、<code>bzip2</code>、<code>xz</code>）时，Docker会自动进行解包操作，类似使用<code>tar -x</code>。</p><h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><p><code>COPY</code>同样用于复制构建环境中的文件或目录到镜像中。其有以下两种使用方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COPY &lt;src&gt;... &lt;dest&gt;</span><br><span class="line">COPY [<span class="string">"&lt;src&gt;"</span>,... <span class="string">"&lt;dest&gt;"</span>]</span><br></pre></td></tr></table></figure><p><code>COPY</code>指令非常类似于<code>ADD</code>，不同点在于<code>COPY</code>只会复制构建目录下的文件，不能使用<code>URL</code>也不会进行解压操作。</p><h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a><code>VOLUME</code></h4><p><code>VOLUME</code>用于创建挂载点，即向基于所构建镜像创始的容器添加卷：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [<span class="string">"/data"</span>]</span><br></pre></td></tr></table></figure><p>一个卷可以存在于一个或多个容器的指定目录，该目录可以绕过联合文件系统，并具有以下功能：</p><ul><li>卷可以容器间共享和重用</li><li>容器并不一定要和其它容器共享卷</li><li>修改卷后会立即生效</li><li>对卷的修改不会对镜像产生影响</li><li>卷会一直存在，直到没有任何容器在使用它</li></ul><p><code>VOLUME</code>让我们可以将源代码、数据或其它内容添加到镜像中，而又不并提交到镜像中，并使我们可以多个容器间共享这些内容。</p><p>如，通过<code>VOLUME</code>创建一个挂载点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV ITBILU_PATH /home/itbilu/</span><br><span class="line">VOLUME [<span class="variable">$ITBILU_PATH</span>]</span><br></pre></td></tr></table></figure><p>构建的镜像，并指定镜像名为<code>itbilu/test</code>。构建镜像后，使用新构建的运行一个容器。运行容器时，需<code>-v</code>参将能本地目录绑定到容器的卷（挂载点）上，以使容器可以访问宿主机的数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -i -t -v ~/code/itbilu:/home/itbilu/ itbilu/<span class="built_in">test</span></span><br><span class="line"> root@31b0fac536c4:/<span class="comment"># cd /home/itbilu/</span></span><br><span class="line">root@31b0fac536c4:/home/itbilu<span class="comment"># ls</span></span><br><span class="line">README.md app.js bin config.js controller db demo document lib minify.js node_modules package.json public routes <span class="built_in">test</span> views</span><br></pre></td></tr></table></figure><p>如上所示，我们已经可以容器的<code>/home/itbilu/</code>目录下访问到宿主机<code>~/code/itbilu</code>目录下的数据了。</p><h4 id="USER"><a href="#USER" class="headerlink" title="USER"></a><code>USER</code></h4><p><code>USER</code>用于指定运行镜像所使用的用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER daemon</span><br></pre></td></tr></table></figure><p>使用<code>USER</code>指定用户时，可以使用用户名、<code>UID</code>或<code>GID</code>，或是两者的组合。以下都是合法的指定试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">USER user</span><br><span class="line">USER user:group</span><br><span class="line">USER uid</span><br><span class="line">USER uid:gid</span><br><span class="line">USER user:gid</span><br><span class="line">USER uid:group</span><br></pre></td></tr></table></figure><p>使用<code>USER</code>指定用户后，<code>Dockerfile</code>中其后的命令<code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code>都将使用该用户。镜像构建完成后，通过<code>docker run</code>运行容器时，可以通过<code>-u</code>参数来覆盖所指定的用户。</p><h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p><code>WORKDIR</code>用于在容器内设置一个工作目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /path/to/workdir</span><br></pre></td></tr></table></figure><p>通过<code>WORKDIR</code>设置工作目录后，<code>Dockerfile</code>中其后的命令<code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code>、<code>ADD</code>、<code>COPY</code>等命令都会在该目录下执行。</p><p>如，使用<code>WORKDIR</code>设置工作目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /a</span><br><span class="line">WORKDIR b</span><br><span class="line">WORKDIR c</span><br><span class="line">RUN <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><p>在以上示例中，<code>pwd</code>最终将会在<code>/a/b/c</code>目录中执行。</p><p>在使用<code>docker run</code>运行容器时，可以通过<code>-w</code>参数覆盖构建时所设置的工作目录。</p><h4 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a><code>ARG</code></h4><p><code>ARG</code>用于指定传递给构建运行时的变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARG &lt;name&gt;[=&lt;default value&gt;]</span><br></pre></td></tr></table></figure><p>如，通过<code>ARG</code>指定两个变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ARG site</span><br><span class="line">ARG build_user=IT笔录</span><br></pre></td></tr></table></figure><p>以上我们指定了<code>site</code>和<code>build_user</code>两个变量，其中<code>build_user</code>指定了默认值。在使用<code>docker build</code>构建镜像时，可以通过<code>--build-arg &lt;varname&gt;=&lt;value&gt;</code>参数来指定或重设置这些变量的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker build --build-arg site=itiblu.com -t itbilu/<span class="built_in">test</span> .</span><br></pre></td></tr></table></figure><p>这样我们构建了<code>itbilu/test</code>镜像，其中<code>site</code>会被设置为<code>itbilu.com</code>，由于没有指定<code>build_user</code>，其值将是默认值<code>IT笔录</code>。</p><h4 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h4><p><code>ONBUILD</code>用于设置镜像触发器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ONBUILD [INSTRUCTION]</span><br></pre></td></tr></table></figure><p>当所构建的镜像被用做其它镜像的基础镜像，该镜像中的触发器将会被钥触发。</p><p>如，当镜像被使用时，可能需要做一些处理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[...]</span><br><span class="line">ONBUILD ADD . /app/src</span><br><span class="line">ONBUILD RUN /usr/<span class="built_in">local</span>/bin/python-build --dir /app/src</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><h4 id="STOPSIGNAL"><a href="#STOPSIGNAL" class="headerlink" title="STOPSIGNAL"></a>STOPSIGNAL</h4><p><code>STOPSIGNAL</code>用于设置停止容器所要发送的系统调用信号：</p><p>STOPSIGNAL signal</p><p>所使用的信号必须是内核系统调用表中的合法的值，如：<code>9</code>、<code>SIGKILL</code>。</p><h4 id="SHELL"><a href="#SHELL" class="headerlink" title="SHELL"></a><code>SHELL</code></h4><p><code>SHELL</code>用于设置执行命令（<code>shell</code>式）所使用的的默认<code>shell</code>类型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHELL [<span class="string">"executable"</span>, <span class="string">"parameters"</span>]</span><br></pre></td></tr></table></figure><p><code>SHELL</code>在Windows环境下比较有用，Windows下通常会有<code>cmd</code>和<code>powershell</code>两种<code>shell</code>，可能还会有<code>sh</code>。这时就可以通过<code>SHELL</code>来指定所使用的<code>shell</code>类型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM microsoft/windowsservercore</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FROM microsoft/windowsservercore</span><br><span class="line"></span><br><span class="line"><span class="comment"># Executed as cmd /S /C echo default</span></span><br><span class="line">RUN <span class="built_in">echo</span> default</span><br><span class="line"></span><br><span class="line"><span class="comment"># Executed as cmd /S /C powershell -command Write-Host default</span></span><br><span class="line">RUN powershell -<span class="built_in">command</span> Write-Host default</span><br><span class="line"></span><br><span class="line"><span class="comment"># Executed as powershell -command Write-Host hello</span></span><br><span class="line">SHELL [<span class="string">"powershell"</span>, <span class="string">"-command"</span>]</span><br><span class="line">RUN Write-Host hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># Executed as cmd /S /C echo hello</span></span><br><span class="line">SHELL [<span class="string">"cmd"</span>, <span class="string">"/S"</span><span class="string">", "</span>/C<span class="string">"]</span></span><br><span class="line"><span class="string">RUN echo helloD</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JDBC超时</title>
      <link href="/posts/f7b3/"/>
      <url>/posts/f7b3/</url>
      
        <content type="html"><![CDATA[<p>这是最近读到的讲关于 JDBC 的超时问题最透彻的文章，原文是<a href="https://link.jianshu.com?t=http://www.cubrid.org/blog/understanding-jdbc-internals-and-timeout-configuration" target="_blank" rel="noopener">http://www.cubrid.org/blog/understanding-jdbc-internals-and-timeout-configuration</a> ，网上现有的翻译感觉磕磕绊绊的，很多上下文信息丢失了，这里用我的理解重新翻译一下。</p><p>应用程序中配置恰当的 JDBC 超时时间能减少服务失败的时间，这篇文章我们将讨论不同种类的超时和推荐的配置。</p><a id="more"></a><h3 id="Web-应用服务器在-DDoS-攻击后变得无响应"><a href="#Web-应用服务器在-DDoS-攻击后变得无响应" class="headerlink" title="Web 应用服务器在 DDoS 攻击后变得无响应"></a>Web 应用服务器在 DDoS 攻击后变得无响应</h3><p>(这是一个真实案例的发生过程复述)</p><p>在 DDoS 攻击之后，整个服务都不能正常工作了，因为第四层交换机不能工作，网络连接断开了，这也导致 WAS （<strong>可以将 WAS 理解为作者公司的应用程序</strong>）不能正常工作。攻击发生后不久，安全团队拦截了所有 DDoS 攻击，然后网络恢复正常，但 WAS 还是不能工作。</p><p>通过分析系统的 dump 日志发现，业务系统停在了 JDBC API 的调用上。20分钟后系统仍处于等待状态无法响应，大概过了30分钟，系统突然发生异常，然后服务恢复正常。</p><blockquote><p>为什么已经将查询超时时间设置成3秒， WAS 却等待了30分钟？为什么30分钟后 WAS 又开始工作了？</p></blockquote><p>如果理解了 JDBC 的超时机制就能找到答案。</p><h3 id="为什么我们需要知道-JDBC-驱动"><a href="#为什么我们需要知道-JDBC-驱动" class="headerlink" title="为什么我们需要知道 JDBC 驱动"></a>为什么我们需要知道 JDBC 驱动</h3><p>当有性能问题或系统级错误时，WAS 和数据库是我们关注的两个重要层面。在我公司 WAS 和数据库通常由不同的部门负责，因此每个部门聚焦在各自负责的领域来设法弄清楚状况。此时 WAS 和数据库之间的部分会因为得不到足够的关注而产生盲区。对于 Java 应用，这个盲区在数据库连接池和 JDBC 之间，本文我们将重点讨论 JDBC。</p><h3 id="什么是-JDBC-驱动"><a href="#什么是-JDBC-驱动" class="headerlink" title="什么是 JDBC 驱动"></a>什么是 JDBC 驱动</h3><p>JDBC 是 Java 应用程序中用于访问数据库的一套标准 API，Sun 公司定义了<a href="https://www.jianshu.com/p/fce9ac03a250" target="_blank" rel="noopener">4种类型的 JDBC 驱动</a>。我公司主要用的是第4种，该类型驱动由纯 Java 语言编写，在 Java 应用中通过 socket 与数据库通信。</p><p><img src="https://i.loli.net/2019/05/15/5cdb707cb9a1932056.png" alt="5cdb707cb9a1932056"></p><p>图1: 类型4驱动</p><p>类型4驱动是通过 socket 来处理字节流的，它的基本操作和 HttpClient 这种网络操作类库相同。同其他网络类库一样，也会在发生超时的时候占用大量的 CPU 资源从而失去响应。如果你之前用过 HttpClient ，肯定遇到过因为没有设置超时导致的错误。如果 socket 超时设置不合适，类型4驱动也可能有同样的错误（连接被阻塞）。</p><p>下面让我们了解如何配置 JDBC 驱动的 socket 超时，以及设置时需考虑哪些问题。</p><h1 id="WAS-与数据库间的设置超时的层次"><a href="#WAS-与数据库间的设置超时的层次" class="headerlink" title="WAS 与数据库间的设置超时的层次"></a>WAS 与数据库间的设置超时的层次</h1><p><img src="https://i.loli.net/2019/05/15/5cdb728387e9286374.png" alt="5cdb728387e9286374"></p><p>图2: 超时的层次</p><p>图2展示了简化的 WAS 和数据库通信时的超时层次。</p><p>更上层的超时依赖于下层的超时，只有当较低层的超时机制正常工作，上层的超时才会正常。如果 JDBC 驱动程序的 socket 超时工作不正常，那么更上层的超时比如 Statement 超时和事务超时都不会正常工作。</p><p>我们收到很多评论说：</p><blockquote><p>即使配置了 Statement 超时，应用程序还是不能从故障中恢复，因为 Statement 超时在网络故障时不起作用。</p></blockquote><p><strong>Statement 超时在网络故障时不起作用</strong>。它只能做到：限制一次Statement 执行的时间，处理超时以防网络故障必须由 JDBC 驱动来做。</p><p>JDBC 驱动的 socket 超时还会受操作系统的 socket 超时配置的影响。这解释了为什么案例中的 JDBC 连接在网络故障后阻塞了30分钟才恢复，即使没配置 JDBC 驱动的 socket 超时。</p><p>DBCP 连接池位于图2的左边。你会发现各种层面的超时与 DBCP 是分开的。DBCP 负责数据库连接（即本文中说到的<strong>Connection</strong>）的创建和管理，并不涉及超时的处理。当在 DBCP 中创建了一个数据库连接或发送了一条查询校验的 sql 语句用于检查连接有效性时，socket 超时会影响这些过程的处理，但并不直接影响应用程序。</p><p>然而在应用程序中调用 DBCP 的 getConnection() 方法时，你能指定应用程序获取数据库连接的超时时间，但这和 JDBC 的连接超时无关。</p><p><img src="https://i.loli.net/2019/05/15/5cdb72dd6cb7316696.png" alt="5cdb72dd6cb7316696"></p><p>图3: 每一层级的超时</p><h1 id="什么是事务超时"><a href="#什么是事务超时" class="headerlink" title="什么是事务超时"></a>什么是事务超时</h1><p><strong>事务超时</strong>是在框架（Spring、EJB容器）或应用程序层面上才有效的超时。</p><p>事务超时可能是个不常见的概念。简单讲，事务超时等于<strong> Statement 超时 * N（需要执行的 Statement 的数量） + 其它（垃圾回收等其他时间）</strong>。事务超时被用来限制执行一个事务之内所有 Statement 执行的总时长。</p><p>比如，假设执行一次 Statement 执行需0.1秒，那执行几次 Statement<br>并不是什么问题，但如果是执行十万次则需要一万秒（大约7个小时），这就可以用上事务超时了。</p><p>EJB 的声明式事务管理 (容器管理事务) 就是一种典型的使用场景，但声明式事务管理只是定义了相应的规范，容器内事务的处理过程和具体实现由容器的开发者负责。我们公司并没有用 EJB，用的是最常见的 Spring 框架，所以事务超时的配置也由 Spring 来管理。在 Spring 中，事务超时可以在 XML 文件显式配置或在 Java 代码中用 Transactional 注解来配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;tx:attributes&gt;</span><br><span class="line">        &lt;tx:method name=&quot;…&quot; timeout=&quot;3&quot;/&gt;</span><br><span class="line">&lt;/tx:attributes&gt;</span><br></pre></td></tr></table></figure><p>Spring 提供的事务超时的配置非常简单，它会记录每个事务的开始时间和消耗时间，当特定的事件发生时会对已消耗掉的时间做校验，如果超出了配置将抛出异常。</p><p>Spring 中数据库连接被保存在线程本地变量（ThreadLocal）中，这被称作事务同步（Transaction Synchronization）。当数据库连接被保存到 ThreadLocal 时，同时会记录事务的开始时间和超时时间。所以通过数据库连接的代理创建的 Statement 在执行时就会校验这个时间。</p><p>EJB 的声明式事务管理的实现也是类似，实现的思路非常简单。如果事务超时非常重要，但你所使用的容器或框架不提供此功能，你也可以选择自己实现，关于事务超时并没有制定标准的 API。</p><p>Lucy 框架的1.5和1.6版不支持事务超时，但你可以通过 Spring 的事务管理达到相同的效果。</p><p>假设一个事务里有5条 Statement ，每条 Statement 执行时间是200毫秒，其它业务逻辑或框架操作的执行时间是100毫秒，那事务允许的超时时间至少应该1100毫秒（200 * 5 + 100）。</p><h1 id="什么是-Statement-超时"><a href="#什么是-Statement-超时" class="headerlink" title="什么是 Statement 超时"></a>什么是 Statement 超时</h1><p>Statement 超时是用来限制 Statement 的执行时间的，它的具体值是通过 JDBC API 来设置的。JDBC 驱动程序基于这个值进行 Statement 执行时的超时处理。Statement 超时是通过 JDBC API 中java.sql.Statement 类的 setQueryTimeout(int timeout) 方法配置的。不过现在的开发者已经很少直接在代码中配置它了，更多是通过框架来进行设置。</p><p>以 iBatis 为例，可以通过 SqlMapConfig.xml 中的 setting 属性defaultStatementTimeout 来设置全局的 statement 超时缺省值。你也可以通过在具体的 sql 映射文件中的 select insert update 标签的 statement 属性来覆盖。</p><p>当你用 Lucy 1.5或1.6版时，可以通过设置 queryTimeout 属性在数据源层面设置 Statement 超时。</p><p>Statement 超时的具体数值需要根据每个应用自身的情况而定，并没有推荐的配置。</p><h1 id="JDBC-驱动中的-Statement-超时处理过程"><a href="#JDBC-驱动中的-Statement-超时处理过程" class="headerlink" title="JDBC 驱动中的 Statement 超时处理过程"></a>JDBC 驱动中的 Statement 超时处理过程</h1><p>每个数据库和驱动程序的 Statement 超时的处理也是不同的。Oracle 和 SQLServer 的工作方式比较像，MySQL 和 CUBRID 比较像。</p><h1 id="Oracle-中的-Statement-超时处理"><a href="#Oracle-中的-Statement-超时处理" class="headerlink" title="Oracle 中的 Statement 超时处理"></a>Oracle 中的 Statement 超时处理</h1><ol><li>调用 Connection 的 createStatement() 方法创建一个 Statement 对象</li><li>调用 Statement 的 executeQuery() 方法</li><li>Statement 通过内部绑定的 Connection 对象将查询命令发送到 Oracle 数据库</li><li>Statement 向 Oracle 的超时处理线程 <strong>OracleTimeoutPollingThread</strong>（每个类加载器一个该线程）注册一个 Statement 用于处理超时</li><li>发生超时</li><li>Oracle 的 OracleTimeoutPollingThread 调用 OracleStatement 的 cancel() 方法</li><li>通过 Statement 的 Connection 发送一条消息取消还在执行的查询</li></ol><p><img src="https://i.loli.net/2019/05/15/5cdb7157f22e991517.png" alt="5cdb7157f22e991517"></p><p>图4 Oracle 的 Statement 超时执行过程</p><h1 id="JTDS-MS-SQLServer-中的-Statement-超时处理"><a href="#JTDS-MS-SQLServer-中的-Statement-超时处理" class="headerlink" title="JTDS (MS SQLServer) 中的 Statement 超时处理"></a>JTDS (MS SQLServer) 中的 Statement 超时处理</h1><p>1.调用 Connection 的 createStatement() 方法创建一个 Statement 对象</p><ol start="2"><li>调用 Statement 的 executeQuery() 方法</li><li>Statement 通过内部的 Connection 将查询命令发送到 MS SqlServer 数据库</li><li>Statement 向 MS SQLServer 的 <strong>TimerThread</strong> 线程注册一个 Statement 用于处理超时</li><li>发生超时</li><li>TimerThread 调用 JtdsStatement 内部的 TsdCore.cancel()方法</li><li>通过 ConnectionJDBC 发送一条消息取消还在执行的查询</li></ol><p><img src="https://i.loli.net/2019/05/15/5cdb716d63f5476687.png" alt="5cdb716d63f5476687"></p><p>图5 MS SQLServer 的 Statement 超时执行过程</p><h1 id="MySQL-5-0-8-中的-Statement-超时处理"><a href="#MySQL-5-0-8-中的-Statement-超时处理" class="headerlink" title="MySQL (5.0.8) 中的 Statement 超时处理"></a>MySQL (5.0.8) 中的 Statement 超时处理</h1><ol><li>调用 Connection 的 createStatement() 方法创建一个 Statement 对象</li><li>调用 Statement 的 executeQuery() 方法</li><li>Statement 通过内部的 Connection 将查询命令传输到 MySqlServer 数据库</li><li>Statement 创建一个新的超时执行线程(<strong>timeout-execution</strong>)来处理超时</li><li>5.1以上版本改为每个连接分配一个线程</li><li>向 timeout-execution 线程注册当前的 Statement</li><li>发生超时</li><li>timeout-execution 线程创建一个相同配置的 Connection</li><li>用新创建的 Connection 发送取消查询的命令</li></ol><p><img src="https://i.loli.net/2019/05/15/5cdb7178b0c3765318.png" alt="5cdb7178b0c3765318"></p><p> 图6 MySQL 的 Statement 超时执行过程</p><h1 id="CUBRID中的-Statement-超时处理"><a href="#CUBRID中的-Statement-超时处理" class="headerlink" title="CUBRID中的 Statement 超时处理"></a>CUBRID中的 Statement 超时处理</h1><ol><li>调用 Connection 的 createStatement() 方法创建一个 Statement 对象</li><li>调用 Statement 的 executeQuery() 方法</li><li>Statement 通过内部的 Connection 将查询命令发送到 CUBRID 数据库</li><li>Statement 创建一个新的超时执行线程(<strong>timeout-execution</strong>)来处理超时</li><li>向 timeout-execution 线程注册当前的 Statement</li><li>发生超时</li><li>timeout-execution 线程创建一个相同配置的Connection</li><li>用新创建的 Connection 发送取消查询的命令</li></ol><p><img src="https://i.loli.net/2019/05/15/5cdb720ba42ec26973.png" alt="5cdb720ba42ec26973"></p><p>图7 CUBRID 的 Statement 超时执行过程</p><h1 id="什么是-Socket-超时"><a href="#什么是-Socket-超时" class="headerlink" title="什么是 Socket 超时"></a>什么是 Socket 超时</h1><p>类型4的 JDBC 驱动是用 Socket 方式与数据库连接的，应用程序和数据库之间的连接超时并不是由数据库处理的。</p><p>当数据库突然宕掉或发生网络错误（设备故障等）时，JDBC 驱动的 Socket 超时的值是必须的。由于 TCP/IP 的结构，Socket 没有办法检测到网络错误，因此应用不能检测到与数据库到连接断开了。如果没有设置 Socket 超时，应用程序会一直等待数据库返回结果。（这个连接也被叫做“死连接”） 为了避免死连接，Socket 必须要设置超时时间。Socket 超时可以通过 JDBC 驱动程序配置。通过设置 Socket 超时，可以防止出现网络错误时一直等待的情况并缩短故障时间。</p><p>不推荐使用 Socket 超时来限制一个 Statement 的执行时间，因此Socket 超时的值必须要高于 Statement 的超时时间，否则 Socket 超时将会先生效，这样 Statement 超时就没有意义，也无法生效。</p><p>下面展示了 Socket 超时设置的连个选项，其配置因不同的驱动而异。</p><ul><li>Socket 连接时的超时：通过 Socket 对象的 connect(SocketAddress endpoint, int timeout) 方法来配置</li><li>Socket 读写时的超时：通过 Socket 对象的 setSoTimeout(int timeout) 方法来配置</li></ul><p>通过查看CUBRID，MySQL，MS SQL Server (JTDS) 和 Oracle 的JDBC 驱动源码，我们确认以上所有驱动都是使用上面的2个 API 来设置socket 超时的。</p><p>下面列出了如何配置 Socket 超时</p><table><thead><tr><th>JDBC 驱动</th><th>连接超时配置</th><th>Socket 超时配置</th><th>JDBC Url 格式</th><th>示例</th></tr></thead><tbody><tr><td>MySQL</td><td>connectTimeout（默认值：0，单位：毫秒）</td><td>socketTimeout（默认值：0，单位：ms）</td><td>jdbc:mysql://[[host:port],[host:port]…/[database]]<br>[?propertyName1][=propertyValue1][&amp;propertyName2][=propertyValue2]…</td><td>jdbc:[mysql://xxx.xx.xxx.xxx:3306/database?connectTimeout=60000&amp;socketTimeout=60000]</td></tr><tr><td>MS-SQL , jTDS</td><td>loginTimeout（默认值：0，单位：秒）</td><td>socketTimeout（默认值：0，单位：s）</td><td>jdbc:jtds:\&lt;server_type&gt;://\<server>[:\<port>][/\<database>][;\<property>=\<value>[;…]]</value></property></database></port></server></td><td>jdbc:jtds:sqlserver://server:port/database;loginTimeout=60;socketTimeout=60</td></tr><tr><td>Oracle</td><td>oracle.net.CONNECT_TIMEOUT （默认值：0，单位：毫秒）</td><td>oracle.jdbc.ReadTimeout（默认值：0，单位：毫秒）</td><td>不支持通过url配置，只能通过OracleDatasource.setConnectionProperties() API设置，使用DBCP时可以调用BasicDatasource.setConnectionProperties()或BasicDatasource.addConnectionProperties()进行设置</td><td></td></tr><tr><td>CUBRID</td><td>无单独配置项（默认值：5,000，单位：毫秒）</td><td>无单独配置项（默认值：5,000，单位：毫秒）</td><td></td></tr></tbody></table><ul><li>connectTimeout 和 socketTimeout 的默认值是 0 ，这意味着不会发生超时。</li><li>你也可以通过属性进行配置，而无需直接使用 DBCP 的 API 。</li></ul><p>通过属性进行配置时，需要传入的 key 为 “connectionProperties”，其 value 的格式为” [propertyName=property;]*”。下面是 iBatis 中通过 xml 文件配置属性的例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;transactionManager type=&quot;JDBC&quot;&gt;</span><br><span class="line">  &lt;dataSource type=&quot;com.nhncorp.lucy.db.DbcpDSFactory&quot;&gt;</span><br><span class="line">     ....</span><br><span class="line">     &lt;property name=&quot;connectionProperties&quot; value=&quot;oracle.net.CONNECT_TIMEOUT=6000;oracle.jdbc.ReadTimeout=6000&quot;/&gt; </span><br><span class="line">  &lt;/dataSource&gt;</span><br><span class="line">&lt;/transactionManager&gt;</span><br></pre></td></tr></table></figure><h1 id="操作系统层面的-Socket-超时配置"><a href="#操作系统层面的-Socket-超时配置" class="headerlink" title="操作系统层面的 Socket 超时配置"></a>操作系统层面的 Socket 超时配置</h1><p>如果没设置 Socket 超时或连接超时，应用程序多数情况下无法检测到网络错误。此时，应用程序将一直等待下去，直到连接上数据库或能读取到数据。然而，如果查看实际服务遇到的实际情况会发现问题常常在在应用程序（WAS）在30分钟后尝试重新连接到网络后被解决了。这是因为操作系统也配置了 Socket 超时时间。我公司使用的 Linux 服务器将 Socket 超时时间设置为30分钟。它将在操作系统层面对网络连接做校验。因为公司的 Linux 服务器的 KeepAlive 检查周期为30分钟，因此即使应用程序里将 Socket 超时设置为0，由网络原因引起的数据库网络连接问题也不会超过30分钟。</p><p>通常，应用程序会在调用 Socket 的 read() 方法时由于网络问题而阻塞住。然而很少在调用 Socket 的 write() 方法时处于等待状态，这取决于网络构成和错误类型。当应用程序调用 Socket 的 write() 方法时，数据被记录到操作系统的内核缓冲区，然后将控制权立即交还给应用程序。因此，一旦数据已经写入内核缓冲区，write() 的调用始终是成功。但是，如果操作系统内核缓冲区由于特殊的网络错误而满了的话，write() 方法也会进入等待状态。这种情况下，操作系统会尝试重新发送数据包一段时间，并在达到超时限制时产生错误。 在公司的 Linux服务器上这种情况的超时时间设置为15分钟。</p><p>至此，我已经解释了 JDBC 的内部操作，希望这将帮助你正确的超时配置超时时间从而减少错误。</p><p>至此，我已经对JDBC的内部操作做了讲解，希望能够让大家学会如何正确的配置超时时间，从而减少错误的发生。</p>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker创建镜像</title>
      <link href="/posts/6e0f/"/>
      <url>/posts/6e0f/</url>
      
        <content type="html"><![CDATA[<h3 id="修改已有镜像"><a href="#修改已有镜像" class="headerlink" title="修改已有镜像"></a>修改已有镜像</h3><ol><li><p>使用下载的镜像启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -t -i training/sinatra /bin/bash</span><br><span class="line">root@0b2616b0e5a8:$</span><br></pre></td></tr></table></figure></li></ol>   <a id="more"></a><ol start="2"><li><p>在容器中添加 json 和 gem 两个应用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@0b2616b0e5a8:$ gem install json</span><br></pre></td></tr></table></figure></li><li><p>提交更新后的副本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker commit -m <span class="string">"Added json gem"</span> -a <span class="string">"Docker Newbee"</span> 0b2616b0e5a8 ouruser/sinatra:v2</span><br><span class="line">4f177bd27a9ff0f6dc2a830403925b5360bfe0b93d476f7fc3231110e7f71b1c</span><br></pre></td></tr></table></figure></li></ol><p>   其中，<code>-m</code>  来指定提交的说明信息，跟我们使用的版本控制工具一样；<code>-a</code>  可以指定更新的用户信息；之后是用来创建镜像的容器的 ID；最后指定目标镜像的仓库名和 tag 信息。创建成功后会返回这个镜像的 ID 信息。</p><ol start="4"><li><p>使用 <code>docker images</code> 来查看新创建的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker images</span><br><span class="line">REPOSITORY          TAG     IMAGE ID       CREATED       VIRTUAL SIZE</span><br><span class="line">training/sinatra    latest  5bc342fa0b91   10 hours ago  446.7 MB</span><br><span class="line">ouruser/sinatra     v2      3c59e02ddd1a   10 hours ago  446.7 MB</span><br><span class="line">ouruser/sinatra     latest  5db5f8471261   10 hours ago  446.7 MB</span><br></pre></td></tr></table></figure></li><li><p>可以使用新的镜像来启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -t -i ouruser/sinatra:v2 /bin/bash</span><br><span class="line">root@78e82f680994:$</span><br></pre></td></tr></table></figure></li></ol><h3 id="利用Dockerfile来创建镜像"><a href="#利用Dockerfile来创建镜像" class="headerlink" title="利用Dockerfile来创建镜像"></a>利用Dockerfile来创建镜像</h3><ol><li><p>新建一个目录和一个 Dockerfile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir sinatra</span><br><span class="line">$ <span class="built_in">cd</span> sinatra</span><br><span class="line">$ touch Dockerfile</span><br></pre></td></tr></table></figure></li><li><p>Dockerfile 中每一条指令都创建镜像的一层，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a comment</span></span><br><span class="line">FROM ubuntu:14.04</span><br><span class="line">MAINTAINER Docker Newbee &lt;newbee@docker.com&gt;</span><br><span class="line">RUN apt-get -qq update</span><br><span class="line">RUN apt-get -qqy install ruby ruby-dev</span><br><span class="line">RUN gem install sinatra</span><br></pre></td></tr></table></figure></li></ol><p>   Dockerfile 基本的语法是</p><ul><li>使用<code>#</code>来注释</li><li><code>FROM</code>  指令告诉 Docker 使用哪个镜像作为基础</li><li>接着是维护者的信息</li><li><code>RUN</code>开头的指令会在创建中运行，比如安装一个软件包，在这里使用 apt-get 来安装了一些软件</li></ul><ol start="3"><li><p>编写完成 Dockerfile 后可以使用 <code>docker build</code> 来生成镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker build -t=<span class="string">"ouruser/sinatra:v2"</span> .</span><br><span class="line">Uploading context  2.56 kB</span><br><span class="line">Uploading context</span><br><span class="line">Step 0 : FROM ubuntu:14.04</span><br><span class="line"> ---&gt; 99ec81b80c55</span><br><span class="line">Step 1 : MAINTAINER Newbee &lt;newbee@docker.com&gt;</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 7c5664a8a0c1</span><br><span class="line"> ---&gt; 2fa8ca4e2a13</span><br><span class="line">Removing intermediate container 7c5664a8a0c1</span><br><span class="line">Step 2 : RUN apt-get -qq update</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> b07cc3fb4256</span><br><span class="line"> ---&gt; 50d21070ec0c</span><br><span class="line">Removing intermediate container b07cc3fb4256</span><br><span class="line">Step 3 : RUN apt-get -qqy install ruby ruby-dev</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> a5b038dd127e</span><br><span class="line">Selecting previously unselected package libasan0:amd64.</span><br><span class="line">(Reading database ... 11518 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../libasan0_4.8.2-19ubuntu1_amd64.deb ...</span><br><span class="line">Setting up ruby (1:1.9.3.4) ...</span><br><span class="line">Setting up ruby1.9.1 (1.9.3.484-2ubuntu1) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> libc-bin (2.19-0ubuntu6) ...</span><br><span class="line"> ---&gt; 2acb20f17878</span><br><span class="line">Removing intermediate container a5b038dd127e</span><br><span class="line">Step 4 : RUN gem install sinatra</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 5e9d0065c1f7</span><br><span class="line">. . .</span><br><span class="line">Successfully installed rack-protection-1.5.3</span><br><span class="line">Successfully installed sinatra-1.4.5</span><br><span class="line">4 gems installed</span><br><span class="line"> ---&gt; 324104cde6ad</span><br><span class="line">Removing intermediate container 5e9d0065c1f7</span><br><span class="line">Successfully built 324104cde6ad</span><br></pre></td></tr></table></figure></li></ol><pre><code>其中 `-t` 标记来添加 tag，指定新的镜像的用户信息。 “.” 是 Dockerfile 所在的路径（当前目录），也可以替换为一个具体的 Dockerfile 的路径。注意一个镜像不能超过 127 层</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令</title>
      <link href="/posts/1d91/"/>
      <url>/posts/1d91/</url>
      
        <content type="html"><![CDATA[<h4 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker --version</span><br><span class="line">$ docker-compose --version</span><br><span class="line">$ docker-machine --version</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="从docker注册中心拉取镜像"><a href="#从docker注册中心拉取镜像" class="headerlink" title="从docker注册中心拉取镜像"></a>从docker注册中心拉取镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull &#123;container_name&#125;</span><br></pre></td></tr></table></figure><h4 id="运行容器，"><a href="#运行容器，" class="headerlink" title="运行容器，"></a>运行容器，</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run &#123;container_name&#125;</span><br></pre></td></tr></table></figure><p>-p  {HOST_PORT}:{CLIENT_PORT} 端口映射（不指定端口则随机映射）</p><p>-t  让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上</p><p>-i  让容器的标准输入保持打开</p><p>-d  让 Docker 在后台运行</p><h4 id="查看容器端口"><a href="#查看容器端口" class="headerlink" title="查看容器端口"></a>查看容器端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker port &#123;container_name&#125;</span><br></pre></td></tr></table></figure><h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker stop &#123;container_name&#125;</span><br></pre></td></tr></table></figure><h4 id="获取本地镜像列表"><a href="#获取本地镜像列表" class="headerlink" title="获取本地镜像列表"></a>获取本地镜像列表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br></pre></td></tr></table></figure><h4 id="显示当前正在运行的所有容器"><a href="#显示当前正在运行的所有容器" class="headerlink" title="显示当前正在运行的所有容器"></a>显示当前正在运行的所有容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container ls</span><br></pre></td></tr></table></figure><h4 id="显示所有运行过的容器"><a href="#显示所有运行过的容器" class="headerlink" title="显示所有运行过的容器"></a>显示所有运行过的容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -a</span><br></pre></td></tr></table></figure><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rm 305297d7a235 ff0a5c3750b9</span><br></pre></td></tr></table></figure><h4 id="删除所有停止的容器"><a href="#删除所有停止的容器" class="headerlink" title="删除所有停止的容器"></a>删除所有停止的容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container prune</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rm $(docker ps -a -q -f status=exited)</span><br></pre></td></tr></table></figure><h4 id="删除所有挂起的镜像"><a href="#删除所有挂起的镜像" class="headerlink" title="删除所有挂起的镜像"></a>删除所有挂起的镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image prune</span><br></pre></td></tr></table></figure><h4 id="搜素镜像"><a href="#搜素镜像" class="headerlink" title="搜素镜像"></a>搜素镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker search xxx</span><br></pre></td></tr></table></figure><h4 id="拷贝文件到容器"><a href="#拷贝文件到容器" class="headerlink" title="拷贝文件到容器"></a>拷贝文件到容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker cp [source_file] [container_name]:[target_path]</span><br></pre></td></tr></table></figure><h4 id="拷贝文件到宿主机"><a href="#拷贝文件到宿主机" class="headerlink" title="拷贝文件到宿主机"></a>拷贝文件到宿主机</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker cp [container_name]:[source_file]  [target_path]</span><br></pre></td></tr></table></figure><h4 id="保存对容器的修改"><a href="#保存对容器的修改" class="headerlink" title="保存对容器的修改"></a>保存对容器的修改</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker commit &lt;container_id&gt; &lt;image_name&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql processlist中哪些状态要引起关注</title>
      <link href="/posts/3b7f/"/>
      <url>/posts/3b7f/</url>
      
        <content type="html"><![CDATA[<p>一般而言，我们在processlist结果中如果经常能看到某些SQL的话，至少可以说明这些SQL的频率很高，通常需要对这些SQL进行进一步优化。</p><a id="more"></a><table><thead><tr><th>状态</th><th>建议</th></tr></thead><tbody><tr><td>copy to tmp table</td><td>执行ALTER TABLE修改表结构时 建议：放在凌晨执行或者采用类似pt-osc工具</td></tr><tr><td>Copying to tmp table</td><td>拷贝数据到内存中的临时表，常见于GROUP BY操作时 建议：创建适当的索引</td></tr><tr><td>Copying to tmp table on disk</td><td>临时结果集太大，内存中放不下，需要将内存中的临时表拷贝到磁盘上，形成 #sql<strong><em>.MYD、#sql</em></strong>.MYI(在5.6及更高的版本，临时表可以改成InnoDB引擎了，可以参考选项 default_tmp_storage_engine) 建议：创建适当的索引，并且适当加大 sort_buffer_size/tmp_table_size/max_heap_table_size</td></tr><tr><td>Creating sort index</td><td>当前的SELECT中需要用到临时表在进行ORDER BY排序 建议：创建适当的索引</td></tr><tr><td>Creating tmp table</td><td>创建基于内存或磁盘的临时表，当从内存转成磁盘的临时表时，状态会变成：Copying to tmp table on disk 建议：创建适当的索引，或者少用UNION、视图(VIEW)、子查询(SUBQUERY)之类的，确实需要用到临时表的时候，可以在session级临时适当调大 tmp_table_size/max_heap_table_size 的值</td></tr><tr><td>Reading from net</td><td>表示server端正通过网络读取客户端发送过来的请求 建议：减小客户端发送数据包大小，提高网络带宽/质量</td></tr><tr><td>Sending data</td><td>从server端发送数据到客户端，也有可能是接收存储引擎层返回的数据，再发送给客户端，数据量很大时尤其经常能看见备注：Sending Data不是网络发送，是从硬盘读取，发送到网络是Writing to net 建议：通过索引或加上LIMIT，减少需要扫描并且发送给客户端的数据量</td></tr><tr><td>Sorting result</td><td>正在对结果进行排序，类似Creating sort index，不过是正常表，而不是在内存表中进行排序 建议：创建适当的索引</td></tr><tr><td>statistics</td><td>进行数据统计以便解析执行计划，如果状态比较经常出现，有可能是磁盘IO性能很差 建议：查看当前io性能状态，例如iowait</td></tr><tr><td>Waiting for global read lock</td><td>FLUSH TABLES WITH READ LOCK整等待全局读锁 建议：不要对线上业务数据库加上全局读锁，通常是备份引起，可以放在业务低谷期间执行或者放在slave服务器上执行备份</td></tr><tr><td>Waiting for tables, Waiting for table flush</td><td>FLUSH TABLES, ALTER TABLE, RENAME TABLE, REPAIR TABLE, ANALYZE TABLE, OPTIMIZE TABLE等需要刷新表结构并重新打开 建议：不要对线上业务数据库执行这些操作，可以放在业务低谷期间执行</td></tr><tr><td>Waiting for lock_type lock</td><td>等待各种类型的锁：• Waiting for event metadata lock• Waiting for global read lock• Waiting for schema metadata lock• Waiting for stored function metadata lock• Waiting for stored procedure metadata lock<br>   • Waiting for table level lock<br><br>   • Waiting for table metadata lock<br><br>   • Waiting for trigger metadata lock<br><br>    建议：比较常见的是上面提到的global read lock以及table metadata lock，建议不要对线上业务数据库执行这些操作，可以放在业务低谷期间执行。如果是table level lock，通常是因为还在使用MyISAM引擎表，赶紧转投InnoDB引擎吧，别再老顽固了</td></tr></tbody></table><p>更多详情可参考官方手册： <a href="http://dev.mysql.com/doc/refman/5.6/en/general-thread-states.html" target="_blank" rel="noopener">8.14.2 General Thread States</a></p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>婚礼当天流程</title>
      <link href="/posts/d823/"/>
      <url>/posts/d823/</url>
      
        <content type="html"><![CDATA[<h3 id="上午安排："><a href="#上午安排：" class="headerlink" title="上午安排："></a>上午安排：</h3><ol><li><p>6:00享喜（新郎妈妈）</p></li><li><p>7:00铺床、打扫新房（林晶、钟鸣亮）</p></li><li><p>8:00买鲜花、气球装饰（林晶）</p><a id="more"></a></li><li><p>9:00铺红地毯（钟鸣亮、张永峰）</p></li><li><p>9:00皇冠酒店装喜糖（林潇潇、陈瑞）</p></li><li><p>8:00–10:00新娘化妆（伴娘到达新娘家），联系摄像师到达时间</p></li><li><p>10:00–11:00 新娘、伴娘外景拍摄（小区内草坪）</p></li><li><p>12:00–12:30新郎负责婚车装饰，伴郎到位，安排好车辆</p></li></ol><h3 id="迎新娘："><a href="#迎新娘：" class="headerlink" title="迎新娘："></a>迎新娘：</h3><ol><li><p>12:58新郎带领迎亲车队出发去新娘家  </p></li><li><p>到达前新郎准备好鲜花、红包  、饼干、巧克力、纸包（拿回一袋）、香烟</p></li><li><p>出门前告知新娘  </p></li><li><p>抵达前10分钟告知迎亲爆竹准备  </p></li><li><p>进门前新娘亲友提问阻挠（可有可无）、塞红包吧  </p></li><li><p>新娘提问、新郎承诺  </p></li><li><p>新郎给女方父母敬茶、合影  </p></li><li><p>桂圆、莲心、红枣（水浦蛋）汤（视习俗）</p></li><li><p>出门前新娘向父母告别、新郎向女方父母承诺  、女方父母祝福语  </p></li><li><p>14:18迎亲车队离开新娘家，爆竹准备  </p></li></ol><h3 id="到新房："><a href="#到新房：" class="headerlink" title="到新房："></a>到新房：</h3><ol><li><p>车队从新娘家出发后开到新郎家  </p></li><li><p>抵达前10分钟告知迎亲爆竹准备</p></li><li><p>进门前新郎家亲友拦门（钟鸣亮、张永峰）</p></li><li><p>男方父母准备见面红包</p></li><li><p>新娘给男方父母敬茶、交接钥匙、合影（林晶）、楼梯、新房拍照</p></li><li><p>桂圆、莲心、红枣（水浦蛋）汤（视习俗）</p></li><li><p>出门前向父母告别、男方父母祝福语 </p></li><li><p>15:00左右从新郎家出发去酒店，出发前爆竹准备。</p></li></ol><h3 id="拍摄外景"><a href="#拍摄外景" class="headerlink" title="拍摄外景"></a>拍摄外景</h3><ol><li><p>外景拍摄地（酒店公共区域、无边际泳池、沙滩），直奔无边际泳池</p></li><li><p>外景拍摄约为一个小时</p></li></ol><h3 id="酒店准备："><a href="#酒店准备：" class="headerlink" title="酒店准备："></a>酒店准备：</h3><ol><li><p>糖、烟、酒、茶、饮料等带至酒店</p></li><li><p>检查酒席安排、音响、桌牌、签到处等细节  </p></li><li><p>伴手礼放置签到处</p></li></ol><h3 id="酒店迎宾："><a href="#酒店迎宾：" class="headerlink" title="酒店迎宾："></a>酒店迎宾：</h3><ol><li><p>新郎新娘到达酒店休息，补妆，新郎补拍</p></li><li><p>签到处人员就位（林晶、钟鸣亮）</p></li><li><p>迎宾人员门口就位  </p></li><li><p>新郎新娘伴郎伴娘门口迎宾</p></li></ol><h3 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h3><ol><li><p>倒kelou（花花、满满）</p></li><li><p>尿尿（等等）</p></li></ol><h3 id="相关人员联系方式"><a href="#相关人员联系方式" class="headerlink" title="相关人员联系方式"></a>相关人员联系方式</h3><table><thead><tr><th>人员</th><th>任务</th><th>电话</th></tr></thead><tbody><tr><td>林剑（新郎）</td><td></td><td>15067172995</td></tr><tr><td>任霄（新娘）</td><td></td><td>15868417801</td></tr><tr><td>林宗跃（新郎爸爸）</td><td></td><td>13906841252</td></tr><tr><td>周玲玲（新郎妈妈）</td><td></td><td>18757457452</td></tr><tr><td>任祥基（新娘爸爸）</td><td></td><td>13586817026</td></tr><tr><td>苏静燕（新娘妈妈）</td><td></td><td>13732124295<br>18989349490</td></tr><tr><td>林晶（新郎大姐）</td><td></td><td>13695776221</td></tr><tr><td>林潇潇（新郎二姐）</td><td></td><td>13989342347</td></tr><tr><td>泮伟光</td><td>婚车租赁（12点前到）</td><td>13777191855</td></tr><tr><td>花先生</td><td>婚车装饰</td><td>15888068655</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Next美化</title>
      <link href="/posts/3495/"/>
      <url>/posts/3495/</url>
      
        <content type="html"><![CDATA[<h3 id="设置语言为中文"><a href="#设置语言为中文" class="headerlink" title="设置语言为中文"></a>设置语言为中文</h3><p>_config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h4><ol><li><p>安装  <code>hexo-generator-searchdb</code>，在站点的根目录下执行以下命令：</p></li><li><p>编辑<strong>站点配置</strong>文件，新增以下内容到任意位置：</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><ol start="3"><li>编辑<strong>主题配置</strong>文件，启用本地搜索功能：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="修改文章底部标签图标"><a href="#修改文章底部标签图标" class="headerlink" title="修改文章底部标签图标"></a>修改文章底部标签图标</h4><p>NexT主题中所有图标来源于Font Awesome图标，因此和更改侧边栏社交链接图标同样，不再赘述。</p><p>修改模板<code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 # 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code> 即可。</p><h4 id="隐藏网页底部-powered-By-Hexo"><a href="#隐藏网页底部-powered-By-Hexo" class="headerlink" title="隐藏网页底部 powered By Hexo"></a>隐藏网页底部 powered By Hexo</h4><p>打开<code>themes/next/layout/_partials/footer.swig</code>,注释相关代码</p><p><img src="https://i.loli.net/2019/05/07/5cd0f55f11135.png" alt="5cd0f55f11135"></p><h4 id="右下角显示当前浏览百分比"><a href="#右下角显示当前浏览百分比" class="headerlink" title="右下角显示当前浏览百分比"></a>右下角显示当前浏览百分比</h4><p>打开 <code>themes/next/_config.yml</code> ，搜索关键字 <code>scrollpercent</code> 。把 false 改为 true。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat指定JDK版本</title>
      <link href="/posts/929d/"/>
      <url>/posts/929d/</url>
      
        <content type="html"><![CDATA[<h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>/bin/setclasspath.bat</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> JAVA_HOME=D:\Program Files\Java\jdk7\jdk1.7.0_51</span><br><span class="line"><span class="built_in">set</span> JRE_HOME=D:\Program Files\Java\jdk7\jre7</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>/bin/setclasspath.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/home/jdk/Java\jdk7\jdk1.7.0_51</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=/home/jdk/Java\jdk7\jre7</span><br></pre></td></tr></table></figure><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>启动tomcat可以通过运行bin下的startup.bat，startup.bat会调用catalina.bat文件，而catalina.bat会调用setclasspath.bat文件来获取JAVA_HOME和JRE_HOME这两个环境变量的值，因此若要在tomcat启动时指向特定的JDK，则需在setclasspath.bat文件的开头处加上JAVA_HOME和JRE_HOME。</p><h4 id="查看Tomcat-JDK版本"><a href="#查看Tomcat-JDK版本" class="headerlink" title="查看Tomcat JDK版本"></a>查看Tomcat JDK版本</h4><ul><li><p>/bin/version.bat – Windows下的批处理脚本</p></li><li><p>/bin/version.sh – Linux下的Shell脚本</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用词汇</title>
      <link href="/posts/9587/"/>
      <url>/posts/9587/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>中文</th><th>英文</th><th></th></tr></thead><tbody><tr><td>孕婴</td><td>PregnantBaby</td><td></td></tr><tr><td>孕妇</td><td>PregnantWoman</td><td></td></tr><tr><td>孕期</td><td>Pregnancy</td><td></td></tr><tr><td>分娩期</td><td>childbirth</td><td></td></tr><tr><td>婴儿期</td><td>Infancy</td><td></td></tr><tr><td>末次月经</td><td>last menstrual period</td><td></td></tr><tr><td>编号</td><td>number</td><td></td></tr><tr><td>孕周</td><td>gestation</td><td></td></tr><tr><td>预产期</td><td>due date</td><td></td></tr><tr><td>孕次</td><td>gravida</td><td></td></tr><tr><td>产次</td><td>parity</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>胎盘</td><td>placenta</td><td></td></tr><tr><td>脐血</td><td>cord blood</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo常用命令</title>
      <link href="/posts/3e38/"/>
      <url>/posts/3e38/</url>
      
        <content type="html"><![CDATA[<h3 id="清理缓存文件"><a href="#清理缓存文件" class="headerlink" title="清理缓存文件"></a>清理缓存文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo --debug</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Blog</title>
      <link href="/posts/81cc/"/>
      <url>/posts/81cc/</url>
      
        <content type="html"><![CDATA[<p>This is My First Blog!</p>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/3eeb/"/>
      <url>/posts/3eeb/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Liquibase创建索引</title>
      <link href="/posts/5f4b/"/>
      <url>/posts/5f4b/</url>
      
        <content type="html"><![CDATA[<h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p><a href="http://www.liquibase.org/documentation/preconditions.html" target="_blank" rel="noopener">liquibase preconditions</a></p><p>创建索引前先判断索引是否存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;changeSet id=&quot;228-039&quot; author=&quot;jlin&quot;&gt;</span><br><span class="line">        &lt;preConditions onFail=&quot;MARK_RAN&quot;&gt;</span><br><span class="line">            &lt;not&gt;</span><br><span class="line">                &lt;indexExists tableName=&quot;t_health_abnormal&quot; indexName=&quot;idx_create_time&quot; columnNames=&quot;create_time&quot;/&gt;</span><br><span class="line">            &lt;/not&gt;</span><br><span class="line">        &lt;/preConditions&gt;</span><br><span class="line">        &lt;createIndex tableName=&quot;t_health_abnormal&quot; indexName=&quot;idx_create_time&quot;&gt;</span><br><span class="line">            &lt;column name=&quot;create_time&quot; /&gt;</span><br><span class="line">        &lt;/createIndex&gt;</span><br><span class="line">    &lt;/changeSet&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Available-attributes"><a href="#Available-attributes" class="headerlink" title="Available attributes"></a>Available attributes</h3><table><thead><tr><th>Attribute</th><th>Description</th></tr></thead><tbody><tr><td>onFail</td><td>What to do when preconditions fail (see below).</td></tr><tr><td>onError</td><td>What to do when preconditions error (see below).</td></tr><tr><td>onUpdateSQL</td><td>What to do in updateSQL mode (see below).<strong>Since 1.9.5</strong></td></tr><tr><td>onFailMessage</td><td>Custom message to output when preconditions fail.<strong>Since 2.0</strong></td></tr><tr><td>onErrorMessage</td><td>Custom message to output when preconditions fail.<strong>Since 2.0</strong></td></tr></tbody></table><h3 id="Possible-onFail-onError-values"><a href="#Possible-onFail-onError-values" class="headerlink" title="Possible onFail/onError values"></a>Possible onFail/onError values</h3><table><thead><tr><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>HALT</td><td>Immediately halt the execution of the entire change log.<strong>[DEFAULT]</strong></td></tr><tr><td>CONTINUE</td><td>Skip over the change set. Execution of the change set will be attempted again on the next update. Continue with the change log.</td></tr><tr><td>MARK_RAN</td><td>Skip over the change set, but mark it as executed. Continue with the change log.</td></tr><tr><td>WARN</td><td>Output a warning and continue executing the change set/change log as normal.</td></tr></tbody></table><h3 id="Possible-onUpdateSQL-values"><a href="#Possible-onUpdateSQL-values" class="headerlink" title="Possible onUpdateSQL values"></a>Possible onUpdateSQL values</h3><table><thead><tr><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>RUN</td><td>Run the changeSet in updateSQL mode.</td></tr><tr><td>FAIL</td><td>Fail the preCondition in updateSQL mode.</td></tr><tr><td>IGNORE</td><td>Ignore the preCondition in updateSQL mode.</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Liquibase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Liquibase </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
